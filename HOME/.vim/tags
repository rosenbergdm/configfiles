1G	syntax/man.vim	/^norm! 1G$/
<A-F9>	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <A-F9>             :call Perl_SyntaxCheck()<CR>$/
<A-F9>	ftplugin/perl.vim	/^  imap    <buffer>  <silent>  <A-F9>        <C-C>:call Perl_SyntaxCheck()<CR>$/
<C-Down>	plugin/minibufexpl.vim	/^  noremap <C-Down>  <C-W>j$/
<C-F9>	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <C-F9>             :call Perl_Run()<CR>$/
<C-F9>	ftplugin/perl.vim	/^  imap    <buffer>  <silent>  <C-F9>        <C-C>:call Perl_Run()<CR>$/
<C-G>S	plugin/surround.vim	/^    imap        <C-G>S <Plug>ISurround$/
<C-G>s	plugin/surround.vim	/^    imap        <C-G>s <Plug>Isurround$/
<C-H>	plugin/minibufexpl.vim	/^  noremap <C-H> <C-W>h$/
<C-J>	plugin/imaps.vim	/^		vmap <C-J> <Plug>IMAP_DeleteAndJumpForward$/
<C-J>	plugin/imaps.vim	/^		vmap <C-J> <Plug>IMAP_JumpForward$/
<C-J>	plugin/imaps.vim	/^    imap <C-J> <Plug>IMAP_JumpForward$/
<C-J>	plugin/imaps.vim	/^    nmap <C-J> <Plug>IMAP_JumpForward$/
<C-J>	plugin/minibufexpl.vim	/^  noremap <C-J> <C-W>j$/
<C-K>	plugin/minibufexpl.vim	/^  noremap <C-K> <C-W>k$/
<C-L>	plugin/minibufexpl.vim	/^  noremap <C-L> <C-W>l$/
<C-Left>	plugin/minibufexpl.vim	/^  noremap <C-Left>  <C-W>h$/
<C-Right>	plugin/minibufexpl.vim	/^  noremap <C-Right> <C-W>l$/
<C-S-TAB>	plugin/minibufexpl.vim	/^  noremap <C-S-TAB> :call <SID>CycleBuffer(0)<CR>:<BS>$/
<C-S-TAB>	plugin/minibufexpl.vim	/^  noremap <C-S-TAB> <C-W>W$/
<C-S>	plugin/surround.vim	/^        imap     <C-S> <Plug>Isurround$/
<C-TAB>	plugin/minibufexpl.vim	/^  noremap <C-TAB>   :call <SID>CycleBuffer(1)<CR>:<BS>$/
<C-TAB>	plugin/minibufexpl.vim	/^  noremap <C-TAB>   <C-W>w$/
<C-Up>	plugin/minibufexpl.vim	/^  noremap <C-Up>    <C-W>k$/
<C-j>	ftplugin/perl.vim	/^  imap    <buffer>  <silent>  <C-j>     <C-R>=Perl_JumpCtrlJ()<CR>$/
<C-j>	ftplugin/perl.vim	/^  nmap    <buffer>  <silent>  <C-j>    i<C-R>=Perl_JumpCtrlJ()<CR>$/
<C-o><plug>	ftplugin/latex-suite/elementmacros.vim	/^imap <silent> <script> <C-o><plug> <Nop>$/
<C-o><plug>	ftplugin/latex-suite/envmacros.vim	/^imap <silent> <script> <C-o><plug> <Nop>$/
<C-o><plug>	ftplugin/latex-suite/main.vim	/^imap <silent> <script> <C-o><plug> <Nop>$/
<F4>	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^nmap <silent> <F4> :set opfunc=CountSpaces<CR>g@$/
<F4>	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^vmap <silent> <F4> :<C-U>call vl#lib#completion#useCustomFunctionNonInteracting#CountSpaces(visualmode(), 1)<CR>$/
<F9>	ftplugin/perl.vim	/^   noremap    <buffer>  <silent>    <F9>             :call Perl_Debugger()<CR>$/
<F9>	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>    <F9>        <C-C>:call Perl_Debugger()<CR>$/
<Leader>be	plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>be :BufExplorer<CR>$/
<Leader>bs	plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>bs :BufExplorerHorizontalSplit<CR>$/
<Leader>bv	plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>bv :BufExplorerVerticalSplit<CR>$/
<Leader>caL	plugin/calendar.vim	/^  nmap <unique> <Leader>caL <Plug>CalendarH$/
<Leader>cal	plugin/calendar.vim	/^  nmap <unique> <Leader>cal <Plug>CalendarV$/
<Leader>di	plugin/DrawItPlugin.vim	/^  map <unique> <Leader>di <Plug>StartDrawIt$/
<Leader>ds	plugin/DrawItPlugin.vim	/^  map <unique> <Leader>ds <Plug>StopDrawIt$/
<Leader>lps		:call	plugin/perl-support.vim	/^  nmap	<silent>  <Leader>lps		:call Perl_CreateGuiMenus()<CR>$/
<Leader>mbc	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbc <Plug>CMiniBufExplorer$/
<Leader>mbe	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbe <Plug>MiniBufExplorer$/
<Leader>mbt	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbt <Plug>TMiniBufExplorer$/
<Leader>mbu	plugin/minibufexpl.vim	/^  map <unique> <Leader>mbu <Plug>UMiniBufExplorer$/
<Leader>rwp	plugin/cecutil.vim	/^ map <unique> <Leader>rwp <Plug>RestoreWinPosn$/
<Leader>swp	plugin/cecutil.vim	/^ map <unique> <Leader>swp <Plug>SaveWinPosn$/
<Leader>ups		:call	plugin/perl-support.vim	/^  nmap	<silent>  <Leader>ups		:call Perl_RemoveGuiMenus()<CR>$/
<LocalLeader>$	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>$    <C-C>:call Perl_InsertTemplate("idioms.scalar")<CR>$/
<LocalLeader>$	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>$         :call Perl_InsertTemplate("idioms.scalar")<CR>$/
<LocalLeader>$$	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>$$   <C-C>:call Perl_InsertTemplate("idioms.scalar2")<CR>$/
<LocalLeader>$$	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>$$        :call Perl_InsertTemplate("idioms.scalar2")<CR>$/
<LocalLeader>$=	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>$=   <C-C>:call Perl_InsertTemplate("idioms.scalar-assign")<CR>$/
<LocalLeader>$=	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>$=        :call Perl_InsertTemplate("idioms.scalar-assign")<CR>$/
<LocalLeader>%	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>%    <C-C>:call Perl_InsertTemplate("idioms.hash")<CR>$/
<LocalLeader>%	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>%         :call Perl_InsertTemplate("idioms.hash")<CR>$/
<LocalLeader>%=	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>%=   <C-C>:call Perl_InsertTemplate("idioms.hash-assign")<CR>$/
<LocalLeader>%=	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>%=        :call Perl_InsertTemplate("idioms.hash-assign")<CR>$/
<LocalLeader>.	ftplugin/haskell_doc.vim	/^map <LocalLeader>. :call Qualify()<cr>$/
<LocalLeader>?	ftplugin/haskell_doc.vim	/^map <LocalLeader>? :call Haddock()<cr>$/
<LocalLeader>?1	ftplugin/haskell_doc.vim	/^map <LocalLeader>?1 :call HaskellSearchEngine('hoogle')<cr>$/
<LocalLeader>?2	ftplugin/haskell_doc.vim	/^map <LocalLeader>?2 :call HaskellSearchEngine('hayoo!')<cr>$/
<LocalLeader>??	ftplugin/haskell_doc.vim	/^map <LocalLeader>?? :let es=g:haskell_search_engines$/
<LocalLeader>@	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>@    <C-C>:call Perl_InsertTemplate("idioms.array")<CR>$/
<LocalLeader>@	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>@         :call Perl_InsertTemplate("idioms.array")<CR>$/
<LocalLeader>@=	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>@=   <C-C>:call Perl_InsertTemplate("idioms.array-assign")<CR>$/
<LocalLeader>@=	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>@=        :call Perl_InsertTemplate("idioms.array-assign")<CR>$/
<LocalLeader>T	compiler/ghc.vim	/^map <LocalLeader>T :call GHC_ShowType(1)<cr>$/
<LocalLeader>cb	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cb         :call Perl_CommentBlock("a")<CR>$/
<LocalLeader>cb	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>cb    <C-C>:call Perl_CommentBlock("v")<CR>$/
<LocalLeader>cc	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cc         :call Perl_CommentToggle()<CR>j$/
<LocalLeader>cc	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>cc    <C-C>:call Perl_CommentToggleRange()<CR>j$/
<LocalLeader>cd	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>cd    <Esc>:call Perl_InsertDateAndTime("d")<CR>a$/
<LocalLeader>cd	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cd    <Esc>:call Perl_InsertDateAndTime("d")<CR>$/
<LocalLeader>cfr	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>cfr   <C-C>:call Perl_InsertTemplate("comment.frame")<CR>$/
<LocalLeader>cfr	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cfr        :call Perl_InsertTemplate("comment.frame")<CR>$/
<LocalLeader>cfu	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>cfu   <C-C>:call Perl_InsertTemplate("comment.function")<CR>$/
<LocalLeader>cfu	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cfu        :call Perl_InsertTemplate("comment.function")<CR>$/
<LocalLeader>chpl	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>chpl  <C-C>:call Perl_InsertTemplate("comment.file-description-pl")<CR>$/
<LocalLeader>chpl	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>chpl       :call Perl_InsertTemplate("comment.file-description-pl")<CR>$/
<LocalLeader>chpm	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>chpm  <C-C>:call Perl_InsertTemplate("comment.file-description-pm")<CR>$/
<LocalLeader>chpm	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>chpm       :call Perl_InsertTemplate("comment.file-description-pm")<CR>$/
<LocalLeader>chpo	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>chpo  <C-C>:call Perl_InsertTemplate("comment.file-description-pod")<CR>$/
<LocalLeader>chpo	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>chpo       :call Perl_InsertTemplate("comment.file-description-pod")<CR>$/
<LocalLeader>cht	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>cht   <C-C>:call Perl_InsertTemplate("comment.file-description-t")<CR>$/
<LocalLeader>cht	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cht        :call Perl_InsertTemplate("comment.file-description-t")<CR>$/
<LocalLeader>cj	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>cj    <C-C>:call Perl_AlignLineEndComm("a")<CR>a$/
<LocalLeader>cj	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cj         :call Perl_AlignLineEndComm("a")<CR>$/
<LocalLeader>cj	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>cj    <C-C>:call Perl_AlignLineEndComm("v")<CR>$/
<LocalLeader>ckb	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ckb   <C-C>$:call Perl_InsertTemplate("comment.keyword-bug")<CR>$/
<LocalLeader>ckb	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ckb        $:call Perl_InsertTemplate("comment.keyword-bug")<CR>$/
<LocalLeader>ckn	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ckn   <C-C>$:call Perl_InsertTemplate("comment.keyword-keyword")<CR>$/
<LocalLeader>ckn	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ckn        $:call Perl_InsertTemplate("comment.keyword-keyword")<CR>$/
<LocalLeader>cko	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>cko   <C-C>$:call Perl_InsertTemplate("comment.keyword-workaround")<CR>$/
<LocalLeader>cko	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cko        $:call Perl_InsertTemplate("comment.keyword-workaround")<CR>$/
<LocalLeader>ckr	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ckr   <C-C>$:call Perl_InsertTemplate("comment.keyword-tricky")<CR>$/
<LocalLeader>ckr	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ckr        $:call Perl_InsertTemplate("comment.keyword-tricky")<CR>$/
<LocalLeader>ckt	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ckt   <C-C>$:call Perl_InsertTemplate("comment.keyword-todo")<CR>$/
<LocalLeader>ckt	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ckt        $:call Perl_InsertTemplate("comment.keyword-todo")<CR>$/
<LocalLeader>ckw	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ckw   <C-C>$:call Perl_InsertTemplate("comment.keyword-warning")<CR>$/
<LocalLeader>ckw	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ckw        $:call Perl_InsertTemplate("comment.keyword-warning")<CR>$/
<LocalLeader>cl	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>cl    <C-C>:call Perl_LineEndComment("")<CR>A$/
<LocalLeader>cl	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cl         :call Perl_LineEndComment("")<CR>A$/
<LocalLeader>cl	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>cl    <C-C>:call Perl_MultiLineEndComments()<CR>A$/
<LocalLeader>cm	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>cm    <C-C>:call Perl_InsertTemplate("comment.method")<CR>$/
<LocalLeader>cm	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cm         :call Perl_InsertTemplate("comment.method")<CR>$/
<LocalLeader>cn	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cn         :call Perl_UncommentBlock()<CR>$/
<LocalLeader>cs	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cs         :call Perl_GetLineEndCommCol()<CR>$/
<LocalLeader>ct	compiler/ghc.vim	/^map <LocalLeader>ct :call GHC_CreateTagfile()<cr>$/
<LocalLeader>ct	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ct    <Esc>:call Perl_InsertDateAndTime("dt")<CR>a$/
<LocalLeader>ct	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ct    <Esc>:call Perl_InsertDateAndTime("dt")<CR>$/
<LocalLeader>cv	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>cv         :call Perl_CommentVimModeline()<CR>$/
<LocalLeader>h	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>h          :call Perl_perldoc()<CR>$/
<LocalLeader>hp	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>hp         :call Perl_HelpPerlsupport()<CR>$/
<LocalLeader>hp	ftplugin/perl.vim	/^  imap    <buffer>  <silent>  <LocalLeader>hp    <C-C>:call Perl_HelpPerlsupport()<CR>$/
<LocalLeader>i	ftplugin/haskell_doc.vim	/^map <LocalLeader>i :call Import(0,0)<cr>$/
<LocalLeader>ie	compiler/ghc.vim	/^map <LocalLeader>ie :call GHC_MkImportsExplicit()<cr>$/
<LocalLeader>ifu	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ifu   <C-C>:call Perl_InsertTemplate("idioms.subroutine")<CR>$/
<LocalLeader>ifu	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ifu        :call Perl_InsertTemplate("idioms.subroutine")<CR>$/
<LocalLeader>ifu	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>ifu   <C-C>:call Perl_InsertTemplate("idioms.subroutine", "v")<CR>$/
<LocalLeader>ii	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ii    <C-C>:call Perl_InsertTemplate("idioms.open-input-file")<CR>$/
<LocalLeader>ii	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ii         :call Perl_InsertTemplate("idioms.open-input-file")<CR>$/
<LocalLeader>ii	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>ii    <C-C>:call Perl_InsertTemplate("idioms.open-input-file", "v" )<CR>$/
<LocalLeader>im	ftplugin/haskell_doc.vim	/^map <LocalLeader>im :call Import(1,0)<cr>$/
<LocalLeader>im	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>im    <C-C>:call Perl_InsertTemplate("idioms.match")<CR>$/
<LocalLeader>im	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>im         :call Perl_InsertTemplate("idioms.match")<CR>$/
<LocalLeader>io	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>io    <C-C>:call Perl_InsertTemplate("idioms.open-output-file")<CR>$/
<LocalLeader>io	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>io         :call Perl_InsertTemplate("idioms.open-output-file")<CR>$/
<LocalLeader>io	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>io    <C-C>:call Perl_InsertTemplate("idioms.open-output-file", "v" )<CR>$/
<LocalLeader>ip	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ip    <C-C>:call Perl_InsertTemplate("idioms.print")<CR>$/
<LocalLeader>ip	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ip         :call Perl_InsertTemplate("idioms.print")<CR>$/
<LocalLeader>ipi	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ipi   <C-C>:call Perl_InsertTemplate("idioms.open-pipe")<CR>$/
<LocalLeader>ipi	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ipi        :call Perl_InsertTemplate("idioms.open-pipe")<CR>$/
<LocalLeader>ipi	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>ipi   <C-C>:call Perl_InsertTemplate("idioms.open-pipe", "v" )<CR>$/
<LocalLeader>iq	ftplugin/haskell_doc.vim	/^map <LocalLeader>iq :call Import(0,1)<cr>$/
<LocalLeader>iqm	ftplugin/haskell_doc.vim	/^map <LocalLeader>iqm :call Import(1,1)<cr>$/
<LocalLeader>ir	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ir   <C-C>:call Perl_InsertTemplate("idioms.regex")<CR>$/
<LocalLeader>ir	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ir        :call Perl_InsertTemplate("idioms.regex")<CR>$/
<LocalLeader>is	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>is    <C-C>:call Perl_InsertTemplate("idioms.substitute")<CR>$/
<LocalLeader>is	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>is         :call Perl_InsertTemplate("idioms.substitute")<CR>$/
<LocalLeader>isu	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>isu   <C-C>:call Perl_InsertTemplate("idioms.subroutine")<CR>$/
<LocalLeader>isu	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>isu        :call Perl_InsertTemplate("idioms.subroutine")<CR>$/
<LocalLeader>isu	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>isu   <C-C>:call Perl_InsertTemplate("idioms.subroutine", "v")<CR>$/
<LocalLeader>it	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>it    <C-C>:call Perl_InsertTemplate("idioms.translate")<CR>$/
<LocalLeader>it	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>it         :call Perl_InsertTemplate("idioms.translate")<CR>$/
<LocalLeader>lang	compiler/ghc.vim	/^    map <LocalLeader>lang :emenu ]LANGUAGES_GHC.$/
<LocalLeader>lang	compiler/ghc.vim	/^    map <LocalLeader>lang :popup ]LANGUAGES_GHC<cr>$/
<LocalLeader>ne	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ne    <C-C>:call Perl_CodeSnippet("e")<CR>$/
<LocalLeader>nr	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>nr    <C-C>:call Perl_CodeSnippet("r")<CR>$/
<LocalLeader>ntg	ftplugin/perl.vim	/^  noremap    <buffer>  <silent>  <LocalLeader>ntg        :call Perl_EditTemplates("global")<CR>$/
<LocalLeader>ntl	ftplugin/perl.vim	/^  noremap    <buffer>  <silent>  <LocalLeader>ntl        :call Perl_EditTemplates("local")<CR>$/
<LocalLeader>ntr	ftplugin/perl.vim	/^  noremap    <buffer>  <silent>  <LocalLeader>ntr        :call Perl_RereadTemplates()<CR>$/
<LocalLeader>nw	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>nw    <C-C>:call Perl_CodeSnippet("w")<CR>$/
<LocalLeader>nw	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>nw    <C-C>:call Perl_CodeSnippet("wv")<CR>$/
<LocalLeader>opt	compiler/ghc.vim	/^  map <LocalLeader>opt :emenu ]OPTIONS_GHC.$/
<LocalLeader>opt	compiler/ghc.vim	/^  map <LocalLeader>opt :popup ]OPTIONS_GHC<cr>$/
<LocalLeader>pa	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pa    [:alnum:]$/
<LocalLeader>pa	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pa    a[:alnum:]<Esc>$/
<LocalLeader>pb	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pb    [:blank:]$/
<LocalLeader>pb	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pb    a[:blank:]<Esc>$/
<LocalLeader>pc	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pc    [:cntrl:]$/
<LocalLeader>pc	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pc    a[:cntrl:]<Esc>$/
<LocalLeader>pd	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pd    [:digit:]$/
<LocalLeader>pd	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pd    a[:digit:]<Esc>$/
<LocalLeader>pg	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pg    [:graph:]$/
<LocalLeader>pg	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pg    a[:graph:]<Esc>$/
<LocalLeader>ph	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ph    [:alpha:]$/
<LocalLeader>ph	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ph    a[:alpha:]<Esc>$/
<LocalLeader>pi	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pi    [:ascii:]$/
<LocalLeader>pi	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pi    a[:ascii:]<Esc>$/
<LocalLeader>pl	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pl    [:lower:]$/
<LocalLeader>pl	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pl    a[:lower:]<Esc>$/
<LocalLeader>pn	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pn    [:punct:]$/
<LocalLeader>pn	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pn    a[:punct:]<Esc>$/
<LocalLeader>pod	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>pod         :call Perl_PodCheck()<CR>$/
<LocalLeader>podh	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>podh        :call Perl_POD('html')<CR>$/
<LocalLeader>podm	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>podm        :call Perl_POD('man')<CR>$/
<LocalLeader>podt	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>podt        :call Perl_POD('text')<CR>$/
<LocalLeader>pp	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pp    [:print:]$/
<LocalLeader>pp	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pp    a[:print:]<Esc>$/
<LocalLeader>ps	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ps    [:space:]$/
<LocalLeader>ps	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>ps    a[:space:]<Esc>$/
<LocalLeader>pu	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pu    [:upper:]$/
<LocalLeader>pu	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pu    a[:upper:]<Esc>$/
<LocalLeader>pw	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>pw    [:word:]$/
<LocalLeader>pw	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>pw    a[:word:]<Esc>$/
<LocalLeader>px	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>px    [:xdigit:]$/
<LocalLeader>px	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>px    a[:xdigit:]<Esc>$/
<LocalLeader>q	ftplugin/r.vim	/^  inoremap <buffer> <LocalLeader>q <Esc>:call SendLineToR("stay")<CR>o$/
<LocalLeader>q	ftplugin/rhelp.vim	/^  inoremap <buffer> <LocalLeader>q <Esc>:call SendLineToR("stay")<CR>o$/
<LocalLeader>q	ftplugin/rnoweb.vim	/^  inoremap <buffer> <LocalLeader>q <Esc>:call SendLineToR("stay")<CR>o$/
<LocalLeader>ra	ftplugin/perl.vim	/^   noremap    <buffer>  <silent>  <LocalLeader>ra         :call Perl_Arguments()<CR>$/
<LocalLeader>ra	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>ra    <C-C>:call Perl_Arguments()<CR>$/
<LocalLeader>rc	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>rc         :call Perl_Perlcritic()<CR>$/
<LocalLeader>rd	ftplugin/perl.vim	/^   noremap    <buffer>  <silent>  <LocalLeader>rd    :call Perl_Debugger()<CR>$/
<LocalLeader>re	ftplugin/perl.vim	/^     noremap    <buffer>  <silent>  <LocalLeader>re         :call Perl_MakeScriptExecutable()<CR>$/
<LocalLeader>re	ftplugin/perl.vim	/^    inoremap    <buffer>  <silent>  <LocalLeader>re    <C-C>:call Perl_MakeScriptExecutable()<CR>$/
<LocalLeader>rg	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>rg         :call Perl_perldoc_generate_module_list()<CR>$/
<LocalLeader>rh	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>rh         :call Perl_Hardcopy("n")<CR>$/
<LocalLeader>rh	ftplugin/perl.vim	/^  vmap    <buffer>  <silent>  <LocalLeader>rh    <C-C>:call Perl_Hardcopy("v")<CR>$/
<LocalLeader>ri	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>ri         :call Perl_perldoc_show_module_list()<CR>$/
<LocalLeader>rk	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>rk    :call Perl_Settings()<CR>$/
<LocalLeader>rm	ftplugin/perl.vim	/^   noremap    <buffer>  <silent>  <LocalLeader>rm         :call Perl_Make()<CR>$/
<LocalLeader>rm	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>rm    <C-C>:call Perl_Make()<CR>$/
<LocalLeader>rma	ftplugin/perl.vim	/^   noremap    <buffer>  <silent>  <LocalLeader>rma        :call Perl_MakeArguments()<CR>$/
<LocalLeader>rma	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>rma   <C-C>:call Perl_MakeArguments()<CR>$/
<LocalLeader>ro	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>ro         :call Perl_Toggle_Gvim_Xterm()<CR>$/
<LocalLeader>ro	ftplugin/perl.vim	/^  imap    <buffer>  <silent>  <LocalLeader>ro    <C-C>:call Perl_Toggle_Gvim_Xterm()<CR>$/
<LocalLeader>rp	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>rp         :call Perl_perldoc()<CR>$/
<LocalLeader>rpf	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>rpf         :call perlsupportprofiling#Perl_Fastprof()<CR>$/
<LocalLeader>rpn	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>rpn         :call perlsupportprofiling#Perl_NYTprof()<CR>$/
<LocalLeader>rpnc	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>rpnc        :call perlsupportprofiling#Perl_NYTprofReadCSV("read","line")<CR>$/
<LocalLeader>rps	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>rps         :call perlsupportprofiling#Perl_Smallprof()<CR>$/
<LocalLeader>rr	ftplugin/perl.vim	/^   noremap    <buffer>  <silent>  <LocalLeader>rr         :call Perl_Run()<CR>$/
<LocalLeader>rr	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>rr    <C-C>:call Perl_Run()<CR>$/
<LocalLeader>rs	ftplugin/perl.vim	/^   noremap    <buffer>  <silent>  <LocalLeader>rs         :call Perl_SyntaxCheck()<CR>$/
<LocalLeader>rs	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>rs    <C-C>:call Perl_SyntaxCheck()<CR>$/
<LocalLeader>rt	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>rt         :call Perl_SaveWithTimestamp()<CR>$/
<LocalLeader>rw	ftplugin/perl.vim	/^   noremap    <buffer>  <silent>  <LocalLeader>rw         :call Perl_PerlSwitches()<CR>$/
<LocalLeader>rw	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>rw    <C-C>:call Perl_PerlSwitches()<CR>$/
<LocalLeader>rx	ftplugin/perl.vim	/^     map    <buffer>  <silent>  <LocalLeader>rx    :call Perl_XtermSize()<CR>$/
<LocalLeader>ry	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <LocalLeader>ry         :call Perl_Perltidy("n")<CR>$/
<LocalLeader>ry	ftplugin/perl.vim	/^  vmap    <buffer>  <silent>  <LocalLeader>ry    <C-C>:call Perl_Perltidy("v")<CR>$/
<LocalLeader>sb	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>sb              :call Perl_InsertTemplate("statements.block")<CR>$/
<LocalLeader>sb	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>sb    <C-C>:call Perl_InsertTemplate("statements.block", "v" )<CR>$/
<LocalLeader>sd	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>sd    <C-C>:call Perl_InsertTemplate("statements.do-while")<CR>$/
<LocalLeader>sd	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>sd              :call Perl_InsertTemplate("statements.do-while")<CR>$/
<LocalLeader>sd	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>sd    <C-C>:call Perl_InsertTemplate("statements.do-while", "v" )<CR>$/
<LocalLeader>se	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>se    <C-C>:call Perl_InsertTemplate("statements.else")<CR>$/
<LocalLeader>se	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>se              :call Perl_InsertTemplate("statements.else")<CR>$/
<LocalLeader>se	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>se    <C-C>:call Perl_InsertTemplate("statements.else", "v" )<CR>$/
<LocalLeader>sei	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>sei   <C-C>:call Perl_InsertTemplate("statements.elsif")<CR>$/
<LocalLeader>sei	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>sei             :call Perl_InsertTemplate("statements.elsif")<CR>$/
<LocalLeader>sei	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>sei   <C-C>:call Perl_InsertTemplate("statements.elsif", "v" )<CR>$/
<LocalLeader>sf	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>sf    <C-C>:call Perl_InsertTemplate("statements.for")<CR>$/
<LocalLeader>sf	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>sf              :call Perl_InsertTemplate("statements.for")<CR>$/
<LocalLeader>sf	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>sf    <C-C>:call Perl_InsertTemplate("statements.for", "v" )<CR>$/
<LocalLeader>sfe	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>sfe   <C-C>:call Perl_InsertTemplate("statements.foreach")<CR>$/
<LocalLeader>sfe	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>sfe             :call Perl_InsertTemplate("statements.foreach")<CR>$/
<LocalLeader>sfe	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>sfe   <C-C>:call Perl_InsertTemplate("statements.foreach", "v" )<CR>$/
<LocalLeader>si	compiler/ghc.vim	/^map <LocalLeader>si :call GHC_ShowInfo()<cr>$/
<LocalLeader>si	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>si    <C-C>:call Perl_InsertTemplate("statements.if")<CR>$/
<LocalLeader>si	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>si              :call Perl_InsertTemplate("statements.if")<CR>$/
<LocalLeader>si	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>si    <C-C>:call Perl_InsertTemplate("statements.if", "v" )<CR>$/
<LocalLeader>sie	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>sie   <C-C>:call Perl_InsertTemplate("statements.if-else")<CR>$/
<LocalLeader>sie	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>sie             :call Perl_InsertTemplate("statements.if-else")<CR>$/
<LocalLeader>sie	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>sie   <C-C>:call Perl_InsertTemplate("statements.if-else", "v" )<CR>$/
<LocalLeader>st	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>st    <C-C>:call Perl_InsertTemplate("statements.until")<CR>$/
<LocalLeader>st	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>st              :call Perl_InsertTemplate("statements.until")<CR>$/
<LocalLeader>st	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>st    <C-C>:call Perl_InsertTemplate("statements.until", "v" )<CR>$/
<LocalLeader>su	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>su    <C-C>:call Perl_InsertTemplate("statements.unless")<CR>$/
<LocalLeader>su	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>su              :call Perl_InsertTemplate("statements.unless")<CR>$/
<LocalLeader>su	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>su    <C-C>:call Perl_InsertTemplate("statements.unless", "v" )<CR>$/
<LocalLeader>sue	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>sue   <C-C>:call Perl_InsertTemplate("statements.unless-else")<CR>$/
<LocalLeader>sue	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>sue             :call Perl_InsertTemplate("statements.unless-else")<CR>$/
<LocalLeader>sue	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>sue   <C-C>:call Perl_InsertTemplate("statements.unless-else", "v" )<CR>$/
<LocalLeader>sw	ftplugin/perl.vim	/^  inoremap    <buffer>  <silent>  <LocalLeader>sw    <C-C>:call Perl_InsertTemplate("statements.while")<CR>$/
<LocalLeader>sw	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>sw              :call Perl_InsertTemplate("statements.while")<CR>$/
<LocalLeader>sw	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>sw    <C-C>:call Perl_InsertTemplate("statements.while", "v" )<CR>$/
<LocalLeader>s{	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>s{              :call Perl_InsertTemplate("statements.block")<CR>$/
<LocalLeader>s{	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>s{    <C-C>:call Perl_InsertTemplate("statements.block", "v" )<CR>$/
<LocalLeader>t	compiler/ghc.vim	/^map <LocalLeader>t :call GHC_ShowType(0)<cr>$/
<LocalLeader>xe	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>xe        :call perlsupportregex#Perl_RegexExplain( "n" )<CR>$/
<LocalLeader>xe	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>xe   <C-C>:call perlsupportregex#Perl_RegexExplain( "v" )<CR>$/
<LocalLeader>xf	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>xf        :call perlsupportregex#Perl_RegexPickFlag( "n" )<CR>$/
<LocalLeader>xf	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>xf   <C-C>:call perlsupportregex#Perl_RegexPickFlag( "v" )<CR>'>j$/
<LocalLeader>xm	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>xm        :call perlsupportregex#Perl_RegexVisualize( )<CR>$/
<LocalLeader>xmm	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>xmm       :call perlsupportregex#Perl_RegexMatchSeveral( )<CR>$/
<LocalLeader>xr	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>xr        :call perlsupportregex#Perl_RegexPick( "regexp", "n" )<CR>j$/
<LocalLeader>xr	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>xr   <C-C>:call perlsupportregex#Perl_RegexPick( "regexp", "v" )<CR>'>j$/
<LocalLeader>xs	ftplugin/perl.vim	/^  nnoremap    <buffer>  <silent>  <LocalLeader>xs        :call perlsupportregex#Perl_RegexPick( "string", "n" )<CR>j$/
<LocalLeader>xs	ftplugin/perl.vim	/^  vnoremap    <buffer>  <silent>  <LocalLeader>xs   <C-C>:call perlsupportregex#Perl_RegexPick( "string", "v" )<CR>'>j$/
<Plug>(altkwprg-look)	plugin/altkwprg.vim	/^nnoremap <silent> <Plug>(altkwprg-look)$/
<Plug>(altkwprg-look)	plugin/altkwprg.vim	/^vnoremap <silent> <Plug>(altkwprg-look)$/
<Plug>(exjumplist-%-next-position)	autoload/exjumplist.vim	/^nnoremap <silent> <Plug>(exjumplist-%-next-position)  <C-i>$/
<Plug>(exjumplist-go-first)	plugin/exjumplist.vim	/^nnoremap <silent> <Plug>(exjumplist-go-first)$/
<Plug>(exjumplist-go-last)	plugin/exjumplist.vim	/^nnoremap <silent> <Plug>(exjumplist-go-last)$/
<Plug>(exjumplist-next-buffer)	plugin/exjumplist.vim	/^nnoremap <silent> <Plug>(exjumplist-next-buffer)$/
<Plug>(exjumplist-previous-buffer)	plugin/exjumplist.vim	/^nnoremap <silent> <Plug>(exjumplist-previous-buffer)$/
<Plug>(fakeclip-P)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-P)$/
<Plug>(fakeclip-P)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-P)$/
<Plug>(fakeclip-Y)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-Y)$/
<Plug>(fakeclip-Y)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-Y)$/
<Plug>(fakeclip-[P)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-[P)$/
<Plug>(fakeclip-[P)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-[P)$/
<Plug>(fakeclip-[p)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-[p)$/
<Plug>(fakeclip-[p)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-[p)$/
<Plug>(fakeclip-]P)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-]P)$/
<Plug>(fakeclip-]P)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-]P)$/
<Plug>(fakeclip-]p)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-]p)$/
<Plug>(fakeclip-]p)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-]p)$/
<Plug>(fakeclip-gP)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-gP)$/
<Plug>(fakeclip-gP)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-gP)$/
<Plug>(fakeclip-gp)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-gp)$/
<Plug>(fakeclip-gp)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-gp)$/
<Plug>(fakeclip-insert)	plugin/fakeclip.vim	/^noremap! <Plug>(fakeclip-insert)$/
<Plug>(fakeclip-insert-o)	plugin/fakeclip.vim	/^noremap! <Plug>(fakeclip-insert-o)$/
<Plug>(fakeclip-insert-p)	plugin/fakeclip.vim	/^inoremap <Plug>(fakeclip-insert-p)$/
<Plug>(fakeclip-insert-r)	plugin/fakeclip.vim	/^noremap! <Plug>(fakeclip-insert-r)$/
<Plug>(fakeclip-p)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-p)$/
<Plug>(fakeclip-p)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-p)$/
<Plug>(fakeclip-screen-P)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-screen-P)$/
<Plug>(fakeclip-screen-P)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-screen-P)$/
<Plug>(fakeclip-screen-Y)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-screen-Y)$/
<Plug>(fakeclip-screen-Y)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-screen-Y)$/
<Plug>(fakeclip-screen-[P)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-screen-[P)$/
<Plug>(fakeclip-screen-[P)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-screen-[P)$/
<Plug>(fakeclip-screen-[p)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-screen-[p)$/
<Plug>(fakeclip-screen-[p)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-screen-[p)$/
<Plug>(fakeclip-screen-]P)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-screen-]P)$/
<Plug>(fakeclip-screen-]P)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-screen-]P)$/
<Plug>(fakeclip-screen-]p)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-screen-]p)$/
<Plug>(fakeclip-screen-]p)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-screen-]p)$/
<Plug>(fakeclip-screen-gP)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-screen-gP)$/
<Plug>(fakeclip-screen-gP)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-screen-gP)$/
<Plug>(fakeclip-screen-gp)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-screen-gp)$/
<Plug>(fakeclip-screen-gp)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-screen-gp)$/
<Plug>(fakeclip-screen-insert)	plugin/fakeclip.vim	/^noremap! <Plug>(fakeclip-screen-insert)$/
<Plug>(fakeclip-screen-insert-o)	plugin/fakeclip.vim	/^noremap! <Plug>(fakeclip-screen-insert-o)$/
<Plug>(fakeclip-screen-insert-p)	plugin/fakeclip.vim	/^inoremap <Plug>(fakeclip-screen-insert-p)$/
<Plug>(fakeclip-screen-insert-r)	plugin/fakeclip.vim	/^noremap! <Plug>(fakeclip-screen-insert-r)$/
<Plug>(fakeclip-screen-p)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-screen-p)$/
<Plug>(fakeclip-screen-p)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-screen-p)$/
<Plug>(fakeclip-screen-y)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-screen-y)$/
<Plug>(fakeclip-screen-y)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-screen-y)$/
<Plug>(fakeclip-y)	plugin/fakeclip.vim	/^nnoremap <silent> <Plug>(fakeclip-y)$/
<Plug>(fakeclip-y)	plugin/fakeclip.vim	/^vnoremap <silent> <Plug>(fakeclip-y)$/
<Plug>(gtd-jump-to-issue)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-jump-to-issue)$/
<Plug>(gtd-mark-as-archive)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-mark-as-archive)$/
<Plug>(gtd-mark-as-calendar)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-mark-as-calendar)$/
<Plug>(gtd-mark-as-inbox)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-mark-as-inbox)$/
<Plug>(gtd-mark-as-next-actions)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-mark-as-next-actions)$/
<Plug>(gtd-mark-as-projects)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-mark-as-projects)$/
<Plug>(gtd-mark-as-someday)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-mark-as-someday)$/
<Plug>(gtd-mark-as-trash)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-mark-as-trash)$/
<Plug>(gtd-mark-as-waiting-for)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-mark-as-waiting-for)$/
<Plug>(gtd-new-issue)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-new-issue)  :<C-u>call gtd#new_issue()<Return>$/
<Plug>(gtd-new-note)	ftplugin/gtd.vim	/^nnoremap <silent> <Plug>(gtd-new-note)  :<C-u>call gtd#new_note()<Return>$/
<Plug>(issue-jump-to-issue)	ftplugin/issue.vim	/^nnoremap <buffer> <silent> <Plug>(issue-jump-to-issue)$/
<Plug>(issue-new-issue)	ftplugin/issue.vim	/^nnoremap <buffer> <silent> <Plug>(issue-new-issue)$/
<Plug>(issue-new-note)	ftplugin/issue.vim	/^nnoremap <buffer> <silent> <Plug>(issue-new-note)$/
<Plug>(issue-show-status)	ftplugin/issue.vim	/^nnoremap <buffer> <silent> <Plug>(issue-show-status)$/
<Plug>(metarw-go-to-parent)	autoload/metarw.vim	/^nnoremap <silent> <Plug>(metarw-go-to-parent)$/
<Plug>(metarw-open-here)	autoload/metarw.vim	/^nnoremap <silent> <Plug>(metarw-open-here)$/
<Plug>(metarw-open-split)	autoload/metarw.vim	/^nnoremap <silent> <Plug>(metarw-open-split)$/
<Plug>(metarw-open-vsplit)	autoload/metarw.vim	/^nnoremap <silent> <Plug>(metarw-open-vsplit)$/
<Plug>(repeat-.)	plugin/repeat.vim	/^nnoremap <silent> <Plug>(repeat-.)  :<C-u>call repeat#_repeat(v:count)<Return>$/
<Plug>(repeat-<C-r>)	plugin/repeat.vim	/^nnoremap <silent> <Plug>(repeat-<C-r>)$/
<Plug>(repeat-U)	plugin/repeat.vim	/^nnoremap <silent> <Plug>(repeat-U)  :<C-u>call repeat#_do('U', v:count)<Return>$/
<Plug>(repeat-g+)	plugin/repeat.vim	/^nnoremap <silent> <Plug>(repeat-g+)$/
<Plug>(repeat-g-)	plugin/repeat.vim	/^nnoremap <silent> <Plug>(repeat-g-)$/
<Plug>(repeat-u)	plugin/repeat.vim	/^nnoremap <silent> <Plug>(repeat-u)  :<C-u>call repeat#_do('u', v:count)<Return>$/
<Plug>(scratch-close)	plugin/scratch.vim	/^noremap <silent> <Plug>(scratch-close)  :<C-u>ScratchClose<Return>$/
<Plug>(scratch-evaluate!)	plugin/scratch.vim	/^noremap <silent> <Plug>(scratch-evaluate!)  :ScratchEvaluate!<Return>$/
<Plug>(scratch-evaluate)	plugin/scratch.vim	/^noremap <silent> <Plug>(scratch-evaluate)  :ScratchEvaluate<Return>$/
<Plug>(scratch-open)	plugin/scratch.vim	/^noremap <silent> <Plug>(scratch-open)  :<C-u>ScratchOpen<Return>$/
<Plug>(smarttill-T)	plugin/smarttill.vim	/^nnoremap <silent> <Plug>(smarttill-T)  :<C-u>call smarttill#after('n')<CR>$/
<Plug>(smarttill-T)	plugin/smarttill.vim	/^onoremap <silent> <Plug>(smarttill-T)  :<C-u>call smarttill#after('o')<CR>$/
<Plug>(smarttill-T)	plugin/smarttill.vim	/^vnoremap <silent> <Plug>(smarttill-T)  :<C-u>call smarttill#after('v')<CR>$/
<Plug>(smarttill-t)	plugin/smarttill.vim	/^nnoremap <silent> <Plug>(smarttill-t)  :<C-u>call smarttill#before('n')<CR>$/
<Plug>(smarttill-t)	plugin/smarttill.vim	/^onoremap <silent> <Plug>(smarttill-t)  :<C-u>call smarttill#before('o')<CR>$/
<Plug>(smarttill-t)	plugin/smarttill.vim	/^vnoremap <silent> <Plug>(smarttill-t)  :<C-u>call smarttill#before('v')<CR>$/
<Plug>(smartword-b)	plugin/smartword.vim	/^nnoremap <silent> <Plug>(smartword-b)  :<C-u>call smartword#move('b','n')<CR>$/
<Plug>(smartword-b)	plugin/smartword.vim	/^onoremap <silent> <Plug>(smartword-b)  :<C-u>call smartword#move('b','o')<CR>$/
<Plug>(smartword-b)	plugin/smartword.vim	/^vnoremap <silent> <Plug>(smartword-b)  :<C-u>call smartword#move('b','v')<CR>$/
<Plug>(smartword-e)	plugin/smartword.vim	/^nnoremap <silent> <Plug>(smartword-e)  :<C-u>call smartword#move('e','n')<CR>$/
<Plug>(smartword-e)	plugin/smartword.vim	/^onoremap <silent> <Plug>(smartword-e)  :<C-u>call smartword#move('e','o')<CR>$/
<Plug>(smartword-e)	plugin/smartword.vim	/^vnoremap <silent> <Plug>(smartword-e)  :<C-u>call smartword#move('e','v')<CR>$/
<Plug>(smartword-ge)	plugin/smartword.vim	/^nnoremap <silent> <Plug>(smartword-ge)  :<C-u>call smartword#move('ge','n')<CR>$/
<Plug>(smartword-ge)	plugin/smartword.vim	/^onoremap <silent> <Plug>(smartword-ge)  :<C-u>call smartword#move('ge','o')<CR>$/
<Plug>(smartword-ge)	plugin/smartword.vim	/^vnoremap <silent> <Plug>(smartword-ge)  :<C-u>call smartword#move('ge','v')<CR>$/
<Plug>(smartword-w)	plugin/smartword.vim	/^nnoremap <silent> <Plug>(smartword-w)  :<C-u>call smartword#move('w','n')<CR>$/
<Plug>(smartword-w)	plugin/smartword.vim	/^onoremap <silent> <Plug>(smartword-w)  :<C-u>call smartword#move('w','o')<CR>$/
<Plug>(smartword-w)	plugin/smartword.vim	/^vnoremap <silent> <Plug>(smartword-w)  :<C-u>call smartword#move('w','v')<CR>$/
<Plug>(vcsi-add-all)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-add-all)  :<C-u>VcsiAdd .<Return>$/
<Plug>(vcsi-add-it)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-add-it)  :<C-u>VcsiAdd<Return>$/
<Plug>(vcsi-amend-all)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-amend-all)  :<C-u>VcsiAmend .<Return>$/
<Plug>(vcsi-amend-it)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-amend-it)  :<C-u>VcsiAmend<Return>$/
<Plug>(vcsi-commit-all)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-commit-all)  :<C-u>VcsiCommit .<Return>$/
<Plug>(vcsi-commit-it)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-commit-it)  :<C-u>VcsiCommit<Return>$/
<Plug>(vcsi-diff-all)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-diff-all)  :VcsiDiff .<Return>$/
<Plug>(vcsi-diff-it)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-diff-it)  :VcsiDiff<Return>$/
<Plug>(vcsi-log-all)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-log-all)  :<C-u>VcsiLog .<Return>$/
<Plug>(vcsi-log-it)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-log-it)  :<C-u>VcsiLog<Return>$/
<Plug>(vcsi-remove-it)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-remove-it)  :<C-u>VcsiRemove<Return>$/
<Plug>(vcsi-revert-all)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-revert-all)  :<C-u>VcsiRevert .<Return>$/
<Plug>(vcsi-revert-it)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-revert-it)  :<C-u>VcsiRevert<Return>$/
<Plug>(vcsi-status-all)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-status-all)  :<C-u>VcsiStatus .<Return>$/
<Plug>(vcsi-status-it)	plugin/vcsi.vim	/^nnoremap <silent> <Plug>(vcsi-status-it)  :<C-u>VcsiStatus<Return>$/
<Plug>AM_Htd	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Htd <SID>WS:'y,'zs%<[tT][rR]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><\/[tT][rR]>%@&@%g<CR>'yjma'zk:AlignCtrl m=Ilp1P0 @<CR>:'a,.Align<CR>:'y,'zs\/ @\/@\/<CR>:'y,'zs\/@ <[tT][rR]>\/<[tT][rR]>\/ge<CR>:'y,'zs\/@\/\/ge<CR><SID>WE$/
<Plug>AM_T|	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T| <SID>WS:AlignCtrl mIp0P0=r <Bar><CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_T#	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T#   <SID>WS:AlignCtrl mIp0P0=r #<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_T,	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T,   <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_T:	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T:   <SID>WS:AlignCtrl mIp1P1=r :<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_T;	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T;   <SID>WS:AlignCtrl mIp0P0=r ;<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_T<	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T<   <SID>WS:AlignCtrl mIp0P0=r <<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_T=	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T=   <SID>WS:'a,'z-1s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'z-1s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'z-1s\/; *\/;@\/e<CR>:'a,'z-1s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'z-1s\/!=\/\\x="!\\<Char-0x0f>"\/ge<CR>:AlignCtrl mIp1P1=r = @<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s\/; *@\/;\/e<CR>:'a,'z-1s\/; *$\/;\/e<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1s\/\\xff\/=\/ge<CR><SID>WE:exe "norm <Plug>acom"$/
<Plug>AM_T?	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T?   <SID>WS:AlignCtrl mIp0P0=r ?<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/
<Plug>AM_T@	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T@   <SID>WS:AlignCtrl mIp0P0=r @<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_Tab	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tab  <SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\t','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/
<Plug>AM_Ts,	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Ts,  <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR>:'a,.s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/
<Plug>AM_Tsp	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tsp  <SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/
<Plug>AM_T~	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T~   <SID>WS:AlignCtrl mIp0P0=r ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/
<Plug>AM_a(	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a(       <SID>WS:AlignCtrl mIp0P1=l<CR>:'a,.Align [(,]<CR>:sil 'y+1,'z-1s\/\\(\\s\\+\\),\/,\\1\/ge<CR><SID>WE$/
<Plug>AM_a,		<SID>WS:'y,'zs/\(\S\)\s\+/\1	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a,		<SID>WS:'y,'zs\/\\(\\S\\)\\s\\+\/\\1 \/ge<CR>'yjma'zk:call AlignMaps#CharJoiner(",")<cr>:silent 'y,'zg\/,\/call AlignMaps#FixMultiDec()<CR>'z:exe "norm \\<Plug>AM_adec"<cr><SID>WE$/
<Plug>AM_a<		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a<		<SID>WS:AlignCtrl mIp1P1=l << >><CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_a=		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a=		<SID>WS:AlignCtrl mIp1P1=l<CR>:AlignCtrl g :=<CR>:'a,'zAlign :\\==<CR><SID>WE$/
<Plug>AM_a?		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a?		<SID>WS:AlignCtrl mIp1P1lC ? : : : : <CR>:'a,.Align<CR>:'a,'z-1s\/\\(\\s\\+\\)? \/?\\1\/e<CR><SID>WE$/
<Plug>AM_abox		<SID>WS:let	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_abox		<SID>WS:let g:alignmaps_iws=substitute(getline("'a"),'^\\(\\s*\\).*$','\\1','e')<CR>:'a,'z-1s\/^\\s\\+\/\/e<CR>:'a,'z-1s\/^.*$\/@&@\/<CR>:AlignCtrl m=p01P0w @<CR>:'a,.Align<CR>:'a,'z-1s\/@\/ * \/<CR>:'a,'z-1s\/@$\/*\/<CR>'aYP:s\/.\/*\/g<CR>0r\/'zkYp:s\/.\/*\/g<CR>0r A\/<Esc>:exe "'a-1,'z-1s\/^\/".g:alignmaps_iws."\/e"<CR><SID>WE$/
<Plug>AM_acom		<SID>WS:'a,.s/\/[*/]\/\=/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:'y,'zs/^\(	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_acom		<SID>WS:'a,.s\/\\\/[*\/]\\\/\\=\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:'y,'zs\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(2)<CR>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/
<Plug>AM_adcom	<SID>WS:'a,.v/^\s*\/[/*]/s/\/[*/]\*\=/@&@/e<CR>:'a,.v/^\s*\/[/*]/s/\*\//@&/e<CR>:'y,'zv/^\s*\/[/*]/s/^\(	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adcom	<SID>WS:'a,.v\/^\\s*\\\/[\/*]\/s\/\\\/[*\/]\\*\\=\/@&@\/e<CR>:'a,.v\/^\\s*\\\/[\/*]\/s\/\\*\\\/\/@&\/e<CR>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(3)<cr>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/
<Plug>AM_adec		<SID>WS:'a,'zs/\([^	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adec		<SID>WS:'a,'zs\/\\([^ \\t\/(]\\)\\([*&]\\)\/\\1 \\2\/e<CR>:'y,'zv\/^\\\/\/s\/\\([^ \\t]\\)\\s\\+\/\\1 \/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\([^\/][*&]\\)\\s\\+\/\\1\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\(\\s*\\%(\\K\\k*\\s\\+\\%([a-zA-Z_*(&]\\)\\@=\\)\\+\\)\\([*(&]*\\)\\s*\\([a-zA-Z0-9_()]\\+\\)\\s*\\(\\(\\[.\\{-}]\\)*\\)\\s*\\(=\\)\\=\\s*\\(.\\{-}\\)\\=\\s*;\/\\1@\\2#@\\3\\4@\\6@\\7;@\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\*\\\/\\s*$\/@*\\\/\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\s\\+\\*\/@@@@@* \/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^@@@@@\\*\\(.*[^*\/]\\)$\/&@*\/e<CR>'yjma'zk:AlignCtrl v ^\\s*[*\/#]<CR>:call AlignMaps#StdAlign(1)<cr>:'y,'zv\/^\\s*[*\/]\/s\/@ \/\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\(\\s*\\);\/;\\1\/e<CR>:'y,'zv\/^#\/s\/# \/\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\([^\/*]\\)\\(\\*\\+\\)\\( \\+\\)\/\\1\\3\\2\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\((\\+\\)\\( \\+\\)\\*\/\\2\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/^\\(\\s\\+\\) \\*\/\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/[ \\t@]*$\/\/e<CR>:'y,'zs\/^[*]\/ *\/e<CR><SID>WE$/
<Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl v ^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/^\\(\\s*\\)#\\(\\s\\)*define\\s*\\(\\I[a-zA-Z_0-9(),]*\\)\\s*\\(.\\{-}\\)\\($\\<Bar>\\\/\\*\\)\/#\\1\\2define @\\3@\\4@\\5\/e<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/\\($\\<Bar>\\*\\\/\\)\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>'yjma'zk:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/ @\/\/g<CR><SID>WE$/
<Plug>AM_aenum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\([-+]\=\d\)/\1@\2/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aenum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\([-+]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [,@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(,\\)\\(\\s\\+\\)\\([-0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/
<Plug>AM_afnc		:<c-u>set	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_afnc		:<c-u>set lz<CR>:silent call AlignMaps#Afnc()<CR>:set nolz<CR>$/
<Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl g \/[*\/]<CR>:exe "norm \\<Plug>AM_acom"<cr>:AlignPop<CR><SID>WE$/
<Plug>AM_ascom	<SID>WS:'a,.s/\/[*/]/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:silent!	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ascom	<SID>WS:'a,.s\/\\\/[*\/]\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:silent! 'a,.g\/^\\s*@\\\/[*\/]\/s\/@\/\/ge<CR>:AlignCtrl v ^\\s*\\\/[*\/]<CR>:AlignCtrl g \\\/[*\/]<CR>'zk:call AlignMaps#StdAlign(2)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/
<Plug>AM_aunum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\zs\([-+.]\=\d\)/@\1/ge<CR>:'a,'zs/\(\(^\|\s\)\d\+\)\(\s\+\)@/\1@\3@/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aunum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\zs\\([-+.]\\=\\d\\)\/@\\1\/ge<CR>:'a,'zs\/\\(\\(^\\|\\s\\)\\d\\+\\)\\(\\s\\+\\)@\/\\1@\\3@\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [.@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(\\.\\)\\(\\s\\+\\)\\([0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/
<Plug>AM_m=		<SID>WS:'a,'zs/\s\+\([*/+\-%<Bar>&\~^]\==\)/	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_m=		<SID>WS:'a,'zs\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zs@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zs\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zs\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mIp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-s\/%\\ze[^=]\/ @%@ \/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1s\/\\xff\/=\/ge<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/
<Plug>AM_t|		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t|		<SID>WS:AlignCtrl mIp0P0=l <Bar><CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_t#		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t#		<SID>WS:AlignCtrl mIp0P0=l #<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_t,		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_t:		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_t;		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t;		<SID>WS:AlignCtrl mIp0P1=l ;<CR>:'a,.Align<CR>:sil 'y,'zs\/\\( *\\);\/;\\1\/ge<CR><SID>WE$/
<Plug>AM_t<		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t<		<SID>WS:AlignCtrl mIp0P0=l <<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_t=		<SID>WS:call	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t=		<SID>WS:call AlignMaps#Equals()<CR><SID>WE$/
<Plug>AM_t?		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t?		<SID>WS:AlignCtrl mIp0P0=l ?<CR>:'a,.Align<CR>:.,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/
<Plug>AM_t@		<SID>WS::call	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t@		<SID>WS::call AlignMaps#StdAlign(1)<cr>:<SID>WE$/
<Plug>AM_tab		<SID>WS:'a,.s/^\(\t*\)\(.*\)$/\=submatch(1).escape(substitute(submatch(2),'\t',"\<Char-0x0f>",'g'),'\')/<CR>:if	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tab		<SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)$\/\\=submatch(1).escape(substitute(submatch(2),'\\t',"\\<Char-0x0f>",'g'),'\\')\/<CR>:if &ts == 1<bar>exe "AlignCtrl mI=lp0P0 \\<Char-0x0f>"<bar>else<bar>exe "AlignCtrl mI=l \\<Char-0x0f>"<bar>endif<CR>:'a,.Align<CR>:exe "'y+1,'z-1s\/\\<Char-0x0f>\/".((&ts == 1)? '\\t' : ' ')."\/g"<CR><SID>WE$/
<Plug>AM_tml		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tml		<SID>WS:AlignCtrl mWp1P0=l \\\\\\@<!\\\\\\s*$<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_ts,		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l #<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)#\/,\\1\/ge<CR><SID>WE$/
<Plug>AM_ts,		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/
<Plug>AM_ts:		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\):\/:\\1\/ge<CR><SID>WE$/
<Plug>AM_ts;		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts;		<SID>WS:AlignCtrl mIp1P1=l ;<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\);\/;\\1\/ge<CR><SID>WE$/
<Plug>AM_ts<		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts<		<SID>WS:AlignCtrl mIp1P1=l <<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)<\/<\\1\/ge<CR><SID>WE$/
<Plug>AM_ts=		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts=		<SID>WS:AlignCtrl mIp1P1=l =<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)=\/=\\1\/ge<CR><SID>WE$/
<Plug>AM_tsp		<SID>WS:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).escape(substitute(submatch(2),'\s\+','@','g'),'\')/<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsp		<SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=lp0P0 @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/
<Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).substitute(submatch(2),'\s\+','@','g')/<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).substitute(submatch(2),'\\s\\+','@','g')\/<CR>:AlignCtrl mIp0P0=l @<CR>:'a,.Align<CR>:'y+1,'z-1s\/[%@]\/ \/g<CR><SID>WE$/
<Plug>AM_tt		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tt		<SID>WS:AlignCtrl mIp1P1=l \\\\\\@<!& \\\\\\\\<CR>:'a,.Align<CR><SID>WE$/
<Plug>AM_t~		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t~		<SID>WS:AlignCtrl mIp0P0=l ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/
<Plug>AM_w=		<SID>WS:'a,'zg/=/s/\s\+\([*/+\-%<Bar>&\~^]\==\)/	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_w=		<SID>WS:'a,'zg\/=\/s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zg\/=\/s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zg\/=\/s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zg\/=\/s\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mWp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1g\/=\/Align<CR>:'a,'z-1g\/=\/s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1g\/=\/s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\\/[*\/]\/@&@\/e<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\*\\\/\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1g\/=\/s\/\\xff\/=\/ge<CR>:'y,'zg\/=\/s\/ @\/\/eg<CR><SID>WE$/
<Plug>AlignMapsWrapperEnd	:call	plugin/AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperEnd	:call AlignMaps#WrapperEnd()<CR>:set nolz<CR>$/
<Plug>AlignMapsWrapperStart	:<c-u>set	plugin/AlignMapsPlugin.vim	/^vmap <silent> <script> <Plug>AlignMapsWrapperStart	:<c-u>set lz<CR>:call AlignMaps#WrapperStart(1)<CR>$/
<Plug>AlignMapsWrapperStart	:set	plugin/AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperStart	:set lz<CR>:call AlignMaps#WrapperStart(0)<CR>$/
<Plug>CMiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>CMiniBufExplorer :call <SID>StopExplorer(1)<CR>:<BS>$/
<Plug>CalendarH	plugin/calendar.vim	/^nnoremap <silent> <Plug>CalendarH :cal Calendar(1)<CR>$/
<Plug>CalendarV	plugin/calendar.vim	/^nnoremap <silent> <Plug>CalendarV :cal Calendar(0)<CR>$/
<Plug>Csurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/
<Plug>Dsurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/
<Plug>IMAP_DeleteAndJumpBack	plugin/imaps.vim	/^vmap <silent> <Plug>IMAP_DeleteAndJumpBack          "_<Del>i<c-r>=IMAP_Jumpfunc('b', 0)<CR>$/
<Plug>IMAP_DeleteAndJumpForward	plugin/imaps.vim	/^vmap <silent> <Plug>IMAP_DeleteAndJumpForward       "_<Del>i<c-r>=IMAP_Jumpfunc('', 0)<CR>$/
<Plug>IMAP_JumpBack	plugin/imaps.vim	/^imap <silent> <Plug>IMAP_JumpBack       <c-r>=IMAP_Jumpfunc('b', 0)<CR>$/
<Plug>IMAP_JumpBack	plugin/imaps.vim	/^nmap <silent> <Plug>IMAP_JumpBack           i<c-r>=IMAP_Jumpfunc('b', 0)<CR>$/
<Plug>IMAP_JumpBack	plugin/imaps.vim	/^vmap <silent> <Plug>IMAP_JumpBack          <C-\\><C-N>`<i<c-r>=IMAP_Jumpfunc('b', 0)<CR>$/
<Plug>IMAP_JumpForward	plugin/imaps.vim	/^imap <silent> <Plug>IMAP_JumpForward    <c-r>=IMAP_Jumpfunc('', 0)<CR>$/
<Plug>IMAP_JumpForward	plugin/imaps.vim	/^nmap <silent> <Plug>IMAP_JumpForward        i<c-r>=IMAP_Jumpfunc('', 0)<CR>$/
<Plug>IMAP_JumpForward	plugin/imaps.vim	/^vmap <silent> <Plug>IMAP_JumpForward       <C-\\><C-N>i<c-r>=IMAP_Jumpfunc('', 0)<CR>$/
<Plug>ISurround	plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/
<Plug>Isurround	plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/
<Plug>ManPageView	:<c-u>call	plugin/manpageviewPlugin.vim	/^nmap <silent> <script> <Plug>ManPageView	:<c-u>call manpageview#ManPageView(1,v:count,expand("<cword>"))<CR>$/
<Plug>MiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>MiniBufExplorer  :call <SID>StartExplorer(1, -1)<CR>:<BS>$/
<Plug>NetrwBrowseX	plugin/netrwPlugin.vim	/^ nno <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)<cr>$/
<Plug>RSendLAndOpenNewOne	ftplugin/r.vim	/^  inoremap <buffer> <Plug>RSendLAndOpenNewOne <Esc>:call SendLineToR("stay")<CR>o$/
<Plug>RSendLAndOpenNewOne	ftplugin/rhelp.vim	/^  inoremap <buffer> <Plug>RSendLAndOpenNewOne <Esc>:call SendLineToR("stay")<CR>o$/
<Plug>RSendLAndOpenNewOne	ftplugin/rnoweb.vim	/^  inoremap <buffer> <Plug>RSendLAndOpenNewOne <Esc>:call SendLineToR("stay")<CR>o$/
<Plug>RestoreWinPosn	:call	plugin/cecutil.vim	/^nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>$/
<Plug>SaveWinPosn		:call	plugin/cecutil.vim	/^nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>$/
<Plug>StartDrawIt	plugin/DrawItPlugin.vim	/^map <silent> <Plug>StartDrawIt  :set lz<cr>:call DrawIt#StartDrawIt()<cr>:set nolz<cr>$/
<Plug>StopDrawIt	plugin/DrawItPlugin.vim	/^map <silent> <Plug>StopDrawIt :set lz<cr>:call DrawIt#StopDrawIt()<cr>:set nolz<cr>$/
<Plug>TMiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>TMiniBufExplorer :call <SID>ToggleExplorer()<CR>:<BS>$/
<Plug>Tex_FastCommandChange	ftplugin/latex-suite/envmacros.vim	/^	inoremap <silent> <Plug>Tex_FastCommandChange  <C-O>:call Tex_ChangeCommand('no')<CR>$/
<Plug>Tex_FastCommandChange	ftplugin/latex-suite/envmacros.vim	/^	nnoremap <silent> <Plug>Tex_FastCommandChange  :call Tex_ChangeCommand('no')<CR>$/
<Plug>Tex_FastCommandInsert	ftplugin/latex-suite/envmacros.vim	/^	inoremap <silent> <Plug>Tex_FastCommandInsert  <C-r>=Tex_DoCommand('no')<cr>$/
<Plug>Tex_FastCommandInsert	ftplugin/latex-suite/envmacros.vim	/^	nnoremap <silent> <Plug>Tex_FastCommandInsert  i<C-r>=Tex_DoCommand('no')<cr>$/
<Plug>Tex_FastCommandInsert	ftplugin/latex-suite/envmacros.vim	/^	vnoremap <silent> <Plug>Tex_FastCommandInsert  <C-\\><C-N>:call Tex_DoCommand('yes')<CR>$/
<Plug>Tex_FastEnvironmentChange	ftplugin/latex-suite/envmacros.vim	/^	inoremap <silent> <Plug>Tex_FastEnvironmentChange  <C-O>:call Tex_ChangeEnvironments()<CR>$/
<Plug>Tex_FastEnvironmentChange	ftplugin/latex-suite/envmacros.vim	/^	nnoremap <silent> <Plug>Tex_FastEnvironmentChange  :call Tex_ChangeEnvironments()<CR>$/
<Plug>Tex_FastEnvironmentInsert	ftplugin/latex-suite/envmacros.vim	/^	inoremap <silent> <Plug>Tex_FastEnvironmentInsert  <C-r>=Tex_FastEnvironmentInsert("no")<cr>$/
<Plug>Tex_FastEnvironmentInsert	ftplugin/latex-suite/envmacros.vim	/^	nnoremap <silent> <Plug>Tex_FastEnvironmentInsert  i<C-r>=Tex_FastEnvironmentInsert("no")<cr>$/
<Plug>Tex_FastEnvironmentInsert	ftplugin/latex-suite/envmacros.vim	/^	vnoremap <silent> <Plug>Tex_FastEnvironmentInsert  <C-\\><C-N>:call Tex_FastEnvironmentInsert("yes")<CR>$/
<Plug>Tex_Help	ftplugin/latex-suite/wizardfuncs.vim	/^inoremap <silent> <Plug>Tex_Help <C-o>:call <SID>TexHelp()<CR>$/
<Plug>Tex_Help	ftplugin/latex-suite/wizardfuncs.vim	/^nnoremap <silent> <Plug>Tex_Help :call <SID>TexHelp()<CR>$/
<Plug>Tex_InsertItemOnNextLine	ftplugin/latex-suite/envmacros.vim	/^inoremap <script> <silent> <Plug>Tex_InsertItemOnNextLine <ESC>o<C-R>=Tex_InsertItem()<CR>$/
<Plug>Tex_InsertItemOnThisLine	ftplugin/latex-suite/envmacros.vim	/^inoremap <script> <silent> <Plug>Tex_InsertItemOnThisLine <C-r>=Tex_InsertItem()<CR>$/
<Plug>Tex_LeftRight	:call	ftplugin/latex-suite/brackets.vim	/^nnoremap <silent> <Plug>Tex_LeftRight	:call Tex_PutLeftRight()<CR>$/
<Plug>Tex_LeftRight	ftplugin/latex-suite/brackets.vim	/^inoremap <silent> <Plug>Tex_LeftRight   <C-r>=Tex_LeftRight()<CR>$/
<Plug>Tex_MathBF		<C-C>`>a}<Esc>`<i\mathbf{<Esc>	ftplugin/latex-suite/brackets.vim	/^vnoremap <silent> <Plug>Tex_MathBF		<C-C>`>a}<Esc>`<i\\mathbf{<Esc>$/
<Plug>Tex_MathBF	ftplugin/latex-suite/brackets.vim	/^inoremap <silent> <Plug>Tex_MathBF      <C-r>=Tex_MathBF()<CR>$/
<Plug>Tex_MathCal		<C-C>`>a}<Esc>`<i\mathcal{<Esc>	ftplugin/latex-suite/brackets.vim	/^vnoremap <silent> <Plug>Tex_MathCal		<C-C>`>a}<Esc>`<i\\mathcal{<Esc>$/
<Plug>Tex_MathCal	ftplugin/latex-suite/brackets.vim	/^inoremap <silent> <Plug>Tex_MathCal     <C-r>=Tex_MathCal()<CR>$/
<Plug>Tex_RefreshFolds	ftplugin/latex-suite/folding.vim	/^nnoremap <unique> <Plug>Tex_RefreshFolds :call MakeTexFolds(1)<cr>$/
<Plug>UMiniBufExplorer	plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>UMiniBufExplorer :call <SID>AutoUpdate(-1)<CR>:<BS>$/
<Plug>VSurround	plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc2(visualmode())<CR>$/
<Plug>Vsurround	plugin/surround.vim	/^vnoremap <silent> <Plug>Vsurround  :<C-U>call <SID>opfunc(visualmode())<CR>$/
<Plug>YSsurround	plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/
<Plug>YSurround	plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/
<Plug>Yssurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/
<Plug>Ysurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/
<S-F1>	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <S-F1>             :call Perl_perldoc()<CR><CR>$/
<S-F1>	ftplugin/perl.vim	/^  imap    <buffer>  <silent>  <S-F1>        <C-C>:call Perl_perldoc()<CR><CR>$/
<S-F9>	ftplugin/perl.vim	/^   map    <buffer>  <silent>  <S-F9>             :call Perl_Arguments()<CR>$/
<S-F9>	ftplugin/perl.vim	/^  imap    <buffer>  <silent>  <S-F9>        <C-C>:call Perl_Arguments()<CR>$/
<SID>	autoload/vspec.vim	/^nnoremap <SID>  <SID>$/
<SID>(count)	autoload/operator/user.vim	/^nnoremap <expr> <SID>(count)  v:count ? v:count : ''$/
<SID>(register)	autoload/operator/user.vim	/^nnoremap <expr> <SID>(register)  <SID>register_designation()$/
<SID>(register)	autoload/operator/user.vim	/^vnoremap <expr> <SID>(register)  <SID>register_designation()$/
<SID>0	autoload/exjumplist.vim	/^nnoremap <SID>0  0$/
<SID>1	autoload/exjumplist.vim	/^nnoremap <SID>1  1$/
<SID>2	autoload/exjumplist.vim	/^nnoremap <SID>2  2$/
<SID>3	autoload/exjumplist.vim	/^nnoremap <SID>3  3$/
<SID>4	autoload/exjumplist.vim	/^nnoremap <SID>4  4$/
<SID>5	autoload/exjumplist.vim	/^nnoremap <SID>5  5$/
<SID>6	autoload/exjumplist.vim	/^nnoremap <SID>6  6$/
<SID>7	autoload/exjumplist.vim	/^nnoremap <SID>7  7$/
<SID>8	autoload/exjumplist.vim	/^nnoremap <SID>8  8$/
<SID>9	autoload/exjumplist.vim	/^nnoremap <SID>9  9$/
<SID>WE	<Plug>AlignMapsWrapperEnd	plugin/AlignMapsPlugin.vim	/^ nmap <unique> <SID>WE	<Plug>AlignMapsWrapperEnd$/
<SID>WS	<Plug>AlignMapsWrapperStart	plugin/AlignMapsPlugin.vim	/^ map <unique> <SID>WS	<Plug>AlignMapsWrapperStart$/
<SID>xx	plugin/taglist.vim	/^    map <SID>xx <SID>xx$/
<Space>	ftplugin/latex-suite/smartspace.vim	/^inoremap <buffer> <silent> <Space> <Space><Esc>:call <SID>TexFill(b:tw)<CR>a$/
<c-m-f>	ftplugin/haskell_vimlib.vim	/^inoremap <buffer> <c-m-f> <c-o>:set omnifunc=vl#dev#haskell#modules_list_cache_jump#CompleteFunction<cr><c-x><c-o>$/
<c-m-m>	ftplugin/haskell_vimlib.vim	/^inoremap <buffer> <c-m-m> <c-r>=vl#lib#completion#useCustomFunctionNonInteracting#GetInsertModeMappingText('omnifunc','vl#dev#haskell#modules_list_cache_jump#CompleteModuleImportName',"\\<c-x>\\<c-o>")<cr>$/
<c-m-y>	ftplugin/haskell_vimlib.vim	/^inoremap <buffer> <c-m-y> <c-o>:set omnifunc=vl#dev#haskell#modules_list_cache_jump#CompleteType<cr><c-x><c-o>$/
<c-n>	plugin/supertab.vim	/^  inoremap <c-n> <c-r>=<SID>SuperTab('n')<cr>$/
<c-p>	plugin/supertab.vim	/^  inoremap <c-p> <c-r>=<SID>SuperTab('p')<cr>$/
<c-x>	plugin/supertab.vim	/^  imap <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/
<leader>cs	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^vmap <silent> <leader>cs :call vl#lib#completion#useCustomFunctionNonInteracting#NormalModeMapping('opfunc<CR<g@',function(vl#lib#completion#useCustomFunctionNonInteracting#CountSpaces(visualmode(), 1)),':<c-u>call vl#lib#completion#useCustomFunctionNonInteracting#CountSpaces(visualmode(),1)<cr>')<c-r>$/
<m-g><m-i>	ftplugin/haskell_vimlib.vim	/^map <m-g><m-i> :call search('\\<import\\>','b')<CR>$/
<plug>	ftplugin/latex-suite/elementmacros.vim	/^nmap <silent> <script> <plug> i$/
<plug>	ftplugin/latex-suite/envmacros.vim	/^nmap <silent> <script> <plug> i$/
<plug>	ftplugin/latex-suite/main.vim	/^nmap <silent> <script> <plug> i$/
<plug>	ftplugin/latex-suite/packages.vim	/^imap <silent> <plug> <Nop>$/
<plug>	ftplugin/latex-suite/packages.vim	/^nmap <silent> <plug> i$/
<plug><+SelectRegion+>	plugin/imaps.vim	/^nmap <silent> <script> <plug><+SelectRegion+> `<v`>$/
<plug>cleanHistory	ftplugin/latex-suite/main.vim	/^nmap <silent> <script> <plug>cleanHistory :call Tex_CleanSearchHistory()<CR>$/
AMAP	macros/menu-map.vim	/^command! -nargs=+           AMAP$/
ANOREMAP	macros/menu-map.vim	/^command! -nargs=+       ANOREMAP$/
Abs	autoload/DrawIt.vim	/^fun! s:Abs(val)$/
Action	autoload/lh/buffer/dialog.vim	/^function! Action(results)$/
AddCurrentDirToModulCache	ftplugin/haskell_vimlib.vim	/^command! -buffer -nargs=0 AddCurrentDirToModulCache :call vl#dev#haskell#modules_list_cache_jump#AddDirToModulCache(getcwd())<cr>$/
AddDirToModulCache	ftplugin/haskell_vimlib.vim	/^command! -buffer -nargs=1 -complete=file AddDirToModulCache :call vl#dev#haskell#modules_list_cache_jump#AddDirToModulCache(<f-args>)<cr>$/
AddFileInfo	plugin/winfileexplorer.vim	/^function! s:AddFileInfo()$/
AddHeader	plugin/winfileexplorer.vim	/^function! s:AddHeader()$/
AddItem	autoload/tovl/featureset.vim	/^fun! s:AddItem(i)$/
AddListItem	plugin/libList.vim	/^function AddListItem( array, newItem, index )$/
AddModulesInDirToCache	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! s:AddModulesInDirToCache(cache,dir)$/
AddSeparators	plugin/winfileexplorer.vim	/^function! s:AddSeparators()$/
AddSyntaxFoldItem	plugin/SyntaxFolds.vim	/^function! AddSyntaxFoldItem(start, end, startoff, endoff, ...)$/
AddToFavDir	plugin/winfileexplorer.vim	/^function! s:AddToFavDir()$/
Align	plugin/AlignPlugin.vim	/^com! -bang -range -nargs=* Align <line1>,<line2>call Align#Align(<bang>0,<q-args>)$/
Align#Align	autoload/Align.vim	/^fun! Align#Align(hasctrl,...) range$/
Align#AlignCtrl	autoload/Align.vim	/^fun! Align#AlignCtrl(...)$/
Align#AlignPop	autoload/Align.vim	/^fun! Align#AlignPop()$/
Align#AlignPush	autoload/Align.vim	/^fun! Align#AlignPush()$/
Align#AlignReplaceQuotedSpaces	autoload/Align.vim	/^fun! Align#AlignReplaceQuotedSpaces() $/
AlignCtrl	plugin/AlignPlugin.vim	/^com!              -nargs=* AlignCtrl call Align#AlignCtrl(<q-args>)$/
AlignMaps#Afnc	autoload/AlignMaps.vim	/^fun! AlignMaps#Afnc()$/
AlignMaps#CharJoiner	autoload/AlignMaps.vim	/^fun! AlignMaps#CharJoiner(chr)$/
AlignMaps#Equals	autoload/AlignMaps.vim	/^fun! AlignMaps#Equals() range$/
AlignMaps#FixMultiDec	autoload/AlignMaps.vim	/^fun! AlignMaps#FixMultiDec()$/
AlignMaps#StdAlign	autoload/AlignMaps.vim	/^fun! AlignMaps#StdAlign(mode) range$/
AlignMaps#WrapperEnd	autoload/AlignMaps.vim	/^fun! AlignMaps#WrapperEnd() range$/
AlignMaps#WrapperStart	autoload/AlignMaps.vim	/^fun! AlignMaps#WrapperStart(vis) range$/
AlignPop	plugin/AlignPlugin.vim	/^com!              -nargs=0 AlignPop  call Align#AlignPop()$/
AlignPush	plugin/AlignPlugin.vim	/^com!              -nargs=0 AlignPush call Align#AlignPush()$/
AlignReplaceQuotedSpaces	plugin/AlignPlugin.vim	/^com!       -range -nargs=0 AlignReplaceQuotedSpaces <line1>,<line2>call Align#AlignReplaceQuotedSpaces()$/
AlterCommand	plugin/altercmd.vim	/^command! -bar -complete=command -nargs=* AlterCommand$/
AltkwprgDefaultKeyMappings	plugin/altkwprg.vim	/^command! -bang -bar -nargs=0 AltkwprgDefaultKeyMappings$/
ArgsBundle	plugin/bundle.vim	/^command! -bang -bar -complete=customlist,bundle#complete -nargs=1 ArgsBundle$/
Arpeggio	plugin/arpeggio.vim	/^command! -bar -complete=command -nargs=+ Arpeggio  call arpeggio#_do(<q-args>)$/
Arrow	autoload/DrawIt.vim	/^fun! s:Arrow(x0, y0, x1, y1)$/
AskOneMenu	autoload/lh/askvim.vim	/^function! s:AskOneMenu(menuact, res)$/
AutoCanvas	autoload/DrawIt.vim	/^fun! s:AutoCanvas(linestart,linestop,cols)$/
AutoUpdate	plugin/minibufexpl.vim	/^function! <SID>AutoUpdate(delBufNum)$/
BEActivateBuffer	plugin/bufexplorer.vim	/^function! s:BEActivateBuffer()$/
BEAddBuffer	plugin/bufexplorer.vim	/^function! s:BEAddBuffer()$/
BEBuildBufferList	plugin/bufexplorer.vim	/^function! s:BEBuildBufferList()$/
BECleanup	plugin/bufexplorer.vim	/^function! s:BECleanup()$/
BEClose	plugin/bufexplorer.vim	/^function! s:BEClose()$/
BECreateHelp	plugin/bufexplorer.vim	/^function! s:BECreateHelp()$/
BEDeactivateBuffer	plugin/bufexplorer.vim	/^function! s:BEDeactivateBuffer(remove)$/
BEDeleteBuffer	plugin/bufexplorer.vim	/^function! s:BEDeleteBuffer(bufNbr, mode)$/
BEDeleteBufferListing	plugin/bufexplorer.vim	/^function! s:BEDeleteBufferListing(buf)$/
BEDisplayBufferList	plugin/bufexplorer.vim	/^function! s:BEDisplayBufferList()$/
BEError	plugin/bufexplorer.vim	/^function! s:BEError(msg)$/
BEGetBufferInfo	plugin/bufexplorer.vim	/^function! s:BEGetBufferInfo(bufnr)$/
BEGetHelpStatus	plugin/bufexplorer.vim	/^function! s:BEGetHelpStatus()$/
BEGetTabNbr	plugin/bufexplorer.vim	/^function! s:BEGetTabNbr(bufNbr)$/
BEGetWinNbr	plugin/bufexplorer.vim	/^function! s:BEGetWinNbr(tabNbr, bufNbr)$/
BEIgnoreBuffer	plugin/bufexplorer.vim	/^function! s:BEIgnoreBuffer(buf)$/
BEInitialize	plugin/bufexplorer.vim	/^function! s:BEInitialize()$/
BEMRUCmp	plugin/bufexplorer.vim	/^function! s:BEMRUCmp(line1, line2)$/
BEMRUListShow	plugin/bufexplorer.vim	/^function! s:BEMRUListShow()$/
BEMRUPop	plugin/bufexplorer.vim	/^function! s:BEMRUPop(buf)$/
BEMRUPush	plugin/bufexplorer.vim	/^function! s:BEMRUPush(buf)$/
BEMapKeys	plugin/bufexplorer.vim	/^function! s:BEMapKeys()$/
BEReSortListing	plugin/bufexplorer.vim	/^function! s:BEReSortListing()$/
BERebuildBufferList	plugin/bufexplorer.vim	/^function! s:BERebuildBufferList(...)$/
BERemoveBuffer	plugin/bufexplorer.vim	/^function! s:BERemoveBuffer(type, mode) range$/
BEReset	plugin/bufexplorer.vim	/^function! s:BEReset()$/
BEReverseSortSelect	plugin/bufexplorer.vim	/^function! s:BEReverseSortSelect()$/
BESelectBuffer	plugin/bufexplorer.vim	/^function! s:BESelectBuffer(...)$/
BESet	plugin/bufexplorer.vim	/^function! s:BESet(var, default)$/
BESetup	plugin/bufexplorer.vim	/^function! s:BESetup()$/
BESetupSyntax	plugin/bufexplorer.vim	/^function! s:BESetupSyntax()$/
BESortListing	plugin/bufexplorer.vim	/^function! s:BESortListing()$/
BESortReverse	plugin/bufexplorer.vim	/^function! s:BESortReverse()$/
BESortSelect	plugin/bufexplorer.vim	/^function! s:BESortSelect()$/
BETabEnter	plugin/bufexplorer.vim	/^function! s:BETabEnter()$/
BEToggleFindActive	plugin/bufexplorer.vim	/^function! s:BEToggleFindActive()$/
BEToggleHelp	plugin/bufexplorer.vim	/^function! s:BEToggleHelp()$/
BEToggleOnlyOneTab	plugin/bufexplorer.vim	/^function! s:BEToggleOnlyOneTab()$/
BEToggleShowRelativePath	plugin/bufexplorer.vim	/^function! s:BEToggleShowRelativePath()$/
BEToggleShowTabBuffer	plugin/bufexplorer.vim	/^function! s:BEToggleShowTabBuffer()$/
BEToggleShowUnlisted	plugin/bufexplorer.vim	/^function! s:BEToggleShowUnlisted()$/
BEToggleSplitOutPathName	plugin/bufexplorer.vim	/^function! s:BEToggleSplitOutPathName()$/
BEUpdateHelpStatus	plugin/bufexplorer.vim	/^function! s:BEUpdateHelpStatus()$/
BEWarning	plugin/bufexplorer.vim	/^function! s:BEWarning(msg)$/
BISort	plugin/system_utils.vim	/^function! s:BISort(start, end, cmp)              " {{{3$/
BISort2	plugin/system_utils.vim	/^function! s:BISort2(start, end)                  " {{{3$/
BISortWrap	plugin/system_utils.vim	/^function! s:BISortWrap(...) range                " {{{3$/
BMRU_Push	autoload/tlib/buffer.vim	/^function! s:BMRU_Push(bnr) "{{{3$/
BMenu	autoload/lh/menu.vim	/^function! s:BMenu(b)$/
BTW	autoload/lh/command.vim	/^function! s:BTW(command, ...)$/
BibFile	ftplugin/latex-suite/bibtools.py	/^class BibFile:$/
BibT	ftplugin/latex-suite/bibtex.vim	/^function BibT(type, options, prompt)$/
Bibliography	ftplugin/latex-suite/bibtools.py	/^class Bibliography(dict):$/
BinSearchToAppend	autoload/genutils.vim	/^function! s:BinSearchToAppend(start, end, line, cmp, direction)$/
BinSearchToAppend2	autoload/genutils.vim	/^function! s:BinSearchToAppend2(start, end, line, cmp, direction, accessor,$/
Bookmark.AddBookmark	plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/
Bookmark.BookmarkExistsFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/
Bookmark.BookmarkFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/
Bookmark.BookmarkNames	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/
Bookmark.Bookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/
Bookmark.CacheBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/
Bookmark.ClearAll	plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/
Bookmark.GetNodeForName	plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/
Bookmark.GetSelected	plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/
Bookmark.InvalidBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/
Bookmark.New	plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/
Bookmark.Sort	plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/
Bookmark.ToRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/
Bookmark.Write	plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/
Bookmark.activate	plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/
Bookmark.compareTo	plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/
Bookmark.delete	plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/
Bookmark.getNode	plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/
Bookmark.mustExist	plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/
Bookmark.openInNewTab	plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/
Bookmark.setPath	plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/
Bookmark.str	plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/
Bookmark.toRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/
Bookmark.validate	plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/
BottomExplorerWindow	plugin/winmanager.vim	/^	command -nargs=0 BottomExplorerWindow :silent call <SID>GotoExplorerWindow('$')$/
BrowserMaps	autoload/netrw.vim	/^fun! s:BrowserMaps(islocal)$/
BufExplorer	plugin/bufexplorer.vim	/^command! BufExplorer :call StartBufExplorer(has ("gui") ? "drop" : "hide edit")$/
BufExplorerHorizontalSplit	plugin/bufexplorer.vim	/^command! BufExplorerHorizontalSplit :call BufExplorerHorizontalSplit()$/
BufExplorerHorizontalSplit	plugin/bufexplorer.vim	/^function! BufExplorerHorizontalSplit()$/
BufExplorerVerticalSplit	plugin/bufexplorer.vim	/^command! BufExplorerVerticalSplit :call BufExplorerVerticalSplit()$/
BufExplorerVerticalSplit	plugin/bufexplorer.vim	/^function! BufExplorerVerticalSplit()$/
BufExplorerVimEnter	plugin/bufexplorer.vim	/^augroup BufExplorerVimEnter$/
BufExplorer_IsValid	plugin/bufexplorer.vim	/^function! BufExplorer_IsValid()$/
BufExplorer_ReSize	plugin/bufexplorer.vim	/^function! BufExplorer_ReSize()$/
BufExplorer_Refresh	plugin/bufexplorer.vim	/^function! BufExplorer_Refresh()$/
BufExplorer_Start	plugin/bufexplorer.vim	/^function! BufExplorer_Start()$/
BufLineAccessor	autoload/genutils.vim	/^function! s:BufLineAccessor(line, context)$/
BufLineMover	autoload/genutils.vim	/^function! s:BufLineMover(from, to, context)$/
BufLineSwapper	autoload/genutils.vim	/^function! s:BufLineSwapper(line1, line2, context)$/
BuildBufferList	plugin/minibufexpl.vim	/^function! <SID>BuildBufferList(delBufNum, updateBufList)$/
BuildRTags	ftplugin/r.vim	/^function! BuildRTags(globalenv)$/
BuildRTags	ftplugin/rhelp.vim	/^function! BuildRTags(globalenv)$/
BuildRTags	ftplugin/rnoweb.vim	/^function! BuildRTags(globalenv)$/
Build_CMD	autoload/lh/menu.vim	/^function! s:Build_CMD(prefix, cmd)$/
CHECK	plugin/ui-functions.vim	/^function! CHECK(prompt, ...)$/
CLeftDrag	autoload/DrawIt.vim	/^fun! s:CLeftDrag()$/
CLeftRelease	autoload/DrawIt.vim	/^fun! s:CLeftRelease()$/
CLeftStart	autoload/DrawIt.vim	/^fun! s:CLeftStart()$/
CMAP	macros/menu-map.vim	/^command! -nargs=+           CMAP     cmap       <args>$/
CMiniBufExplorer	plugin/minibufexpl.vim	/^  command! CMiniBufExplorer  call <SID>StopExplorer(1)$/
CNOREMAP	macros/menu-map.vim	/^command! -nargs=+       CNOREMAP cnoremap       <args>$/
COMBO	plugin/ui-functions.vim	/^function! COMBO(prompt, ...)$/
CONFIRM	plugin/ui-functions.vim	/^function! CONFIRM(text, ...)$/
CTRL_O	autoload/lh/menu.vim	/^function! s:CTRL_O(cmd)$/
CacheFileName	autoload/vl/lib/files/scan_and_cache_file.vim	/^function! s:CacheFileName(scan_func, file)$/
Calendar	plugin/calendar.vim	/^command! -nargs=* Calendar  call Calendar(0,<f-args>)$/
Calendar	plugin/calendar.vim	/^function! Calendar(...)$/
CalendarDiary	plugin/calendar.vim	/^function! s:CalendarDiary(day, month, year, week, dir)$/
CalendarDoAction	plugin/calendar.vim	/^function! s:CalendarDoAction(...)$/
CalendarH	plugin/calendar.vim	/^command! -nargs=* CalendarH call Calendar(1,<f-args>)$/
CalendarHelp	plugin/calendar.vim	/^function! s:CalendarHelp()$/
CalendarMakeDir	plugin/calendar.vim	/^function! s:CalendarMakeDir(dir)$/
CalendarSign	plugin/calendar.vim	/^function! s:CalendarSign(day, month, year)$/
CalendarVar	plugin/calendar.vim	/^function! s:CalendarVar(var)$/
Call	autoload/vspec.vim	/^function! Call(...)  "{{{2$/
CallBox	autoload/DrawIt.vim	/^fun! s:CallBox(func_name)$/
CallVimUsingSh	autoload/tovl/runtaskinbackground.vim	/^fun! s:CallVimUsingSh(vim,vimcmd)$/
CamelCase	ftplugin/haskell_doc.vim	/^function! CamelCase(shorthand,string)$/
Canvas	autoload/DrawIt.vim	/^fun! s:Canvas()$/
Change	ftplugin/latex-suite/envmacros.vim	/^	function! s:Change(env, label, delete, putInNonumber)$/
ChangeCommand	ftplugin/latex-suite/envmacros.vim	/^	function! s:ChangeCommand(newcom)$/
Char2Num	autoload/genutils.vim	/^function! s:Char2Num(c)$/
CheckAgentReturnValue	autoload/tlib/input.vim	/^function! s:CheckAgentReturnValue(name, value) "{{{3$/
ChgDir	autoload/vimball.vim	/^fun! s:ChgDir(newdir)$/
ChooseMacro	ftplugin/latex-suite/custommacros.vim	/^function! s:ChooseMacro(ask)$/
CleanUpHistory	plugin/winfileexplorer.vim	/^function! <SID>CleanUpHistory()$/
ClearMenu	autoload/lh/menu.vim	/^function! s:ClearMenu(Menu, text)$/
CloseWindowsManager	plugin/winmanager.vim	/^function! <SID>CloseWindowsManager()$/
CommandLineCompletion	plugin/supertab.vim	/^function! s:CommandLineCompletion()$/
CompareBufferNrByMRU	autoload/tlib/buffer.vim	/^function! s:CompareBufferNrByMRU(a, b) "{{{3$/
CompleteAux	ftplugin/haskell_doc.vim	/^function! CompleteAux(al,cl,cp)$/
CompleteFlagHeaders	ftplugin/haskell_doc.vim	/^  function! CompleteFlagHeaders(al,cl,cp)$/
CompleteHaddock	ftplugin/haskell_doc.vim	/^function! CompleteHaddock(findstart, base)$/
CompleteHaddockModules	ftplugin/haskell_doc.vim	/^function! CompleteHaddockModules(al,cl,cp)$/
CompleteModules	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^fun! s:CompleteModules(findstart, base)$/
ComposePath	autoload/netrw.vim	/^fun! s:ComposePath(base,subdir)$/
Compute	ftplugin/latex-suite/templates.vim	/^function! <SID>Compute(what)$/
ContextCompletion	plugin/supertab.vim	/^function! s:ContextCompletion()$/
ContextDiscover	plugin/supertab.vim	/^function! s:ContextDiscover()$/
ContextText	plugin/supertab.vim	/^function! s:ContextText()$/
CountBraces	ftplugin/r.vim	/^function! CountBraces(line)$/
CountBraces	ftplugin/rhelp.vim	/^function! CountBraces(line)$/
CountBraces	ftplugin/rnoweb.vim	/^function! CountBraces(line)$/
CountGroups	indent/r.vim	/^function! s:CountGroups(line)$/
CountHelper	autoload/tlib/string.vim	/^function! s:CountHelper() "{{{3$/
CriticOptions	ftplugin/perl.vim	/^command! -nargs=? CriticOptions         call Perl_PerlCriticOptions  (<f-args>)$/
CriticSeverity	ftplugin/perl.vim	/^command! -nargs=1 -complete=customlist,Perl_PerlCriticSeverityList   CriticSeverity   call Perl_PerlCriticSeverity (<f-args>)$/
CriticVerbosity	ftplugin/perl.vim	/^command! -nargs=1 -complete=customlist,Perl_PerlCriticVerbosityList  CriticVerbosity  call Perl_PerlCriticVerbosity(<f-args>)$/
CycleBuffer	plugin/minibufexpl.vim	/^function! <SID>CycleBuffer(forward)$/
DEBUG	plugin/minibufexpl.vim	/^function! <SID>DEBUG(msg, level)$/
DI_FillAdjacent	autoload/DrawIt.vim	/^fun! s:DI_FillAdjacent(frow,fcolL,fcolR)$/
DI_FillLeft	autoload/DrawIt.vim	/^fun! s:DI_FillLeft(frow,fcol)$/
DI_FillRight	autoload/DrawIt.vim	/^fun! s:DI_FillRight(frow,fcol)$/
DI_Flood	autoload/DrawIt.vim	/^fun! s:DI_Flood(frow,fcol)$/
DIstart	plugin/DrawItPlugin.vim	/^com! -nargs=0 DIstart set lz|call DrawIt#StartDrawIt()|set nolz$/
DIstop	plugin/DrawItPlugin.vim	/^com! -nargs=0 DIstop set lz|call DrawIt#StopDrawIt()|set nolz$/
DM	plugin/cecutil.vim	/^com! -bar -nargs=1 DM	call DestroyMark(<q-args>)$/
DeHTML	ftplugin/haskell_doc.vim	/^function! DeHTML(entry)$/
Dec	autoload/tovl/runtaskinbackground.vim	/^  let Dec = config#Get('plugins#tovl#runtaskinbackground#PluginRunTaskInBackground#process_obj_decorator_fun',$/
Decho	plugin/Decho.vim	/^com! -nargs=+ -complete=expression Decho	call Decho(<args>)$/
Decho	plugin/Decho.vim	/^fun! Decho(...)$/
DechoDepth	plugin/Decho.vim	/^fun! DechoDepth(depth)$/
DechoMsg	plugin/Decho.vim	/^fun! s:DechoMsg(onoff,...)$/
DechoMsgOff	plugin/Decho.vim	/^com! -nargs=0 DechoMsgOff					call s:DechoMsg(0)$/
DechoMsgOn	plugin/Decho.vim	/^com! -nargs=0 DechoMsgOn					call s:DechoMsg(1,expand("<sfile>"))$/
DechoOff	plugin/Decho.vim	/^com! -nargs=0 -range=% DechoOff				call DechoOff(<line1>,<line2>)$/
DechoOff	plugin/Decho.vim	/^fun! DechoOff(line1,line2)$/
DechoOn	plugin/Decho.vim	/^com! -nargs=0 -range=% DechoOn				call DechoOn(<line1>,<line2>)$/
DechoOn	plugin/Decho.vim	/^fun! DechoOn(line1,line2)$/
DechoPause	plugin/Decho.vim	/^com! -nargs=0 DechoPause					call DechoPause()$/
DechoPause	plugin/Decho.vim	/^fun! DechoPause()$/
DechoRemOff	plugin/Decho.vim	/^ com! -nargs=0 DechoRemOff					call s:DechoRemote(0)$/
DechoRemOn	plugin/Decho.vim	/^ com! -nargs=0 DechoRemOn					call s:DechoRemote(1,expand("<sfile>"))$/
DechoRemote	plugin/Decho.vim	/^ fun! s:DechoRemote(mode,...)$/
DechoSep	plugin/Decho.vim	/^com! -nargs=? DechoSep						call DechoSep(<args>)$/
DechoSep	plugin/Decho.vim	/^fun! DechoSep(...)$/
DechoTab	plugin/Decho.vim	/^ fun! s:DechoTab(mode,...)$/
DechoTabOff	plugin/Decho.vim	/^ com! -nargs=? DechoTabOff                  set lz|call s:DechoTab(0)|set nolz$/
DechoTabOn	plugin/Decho.vim	/^ com! -nargs=? DechoTabOn                   set lz|call s:DechoTab(1,expand("<sfile>"))|set nolz$/
DechoVarOff	plugin/Decho.vim	/^com! -nargs=0 DechoVarOff					call s:DechoVarOff()$/
DechoVarOff	plugin/Decho.vim	/^fun! s:DechoVarOff()$/
DechoVarOn	plugin/Decho.vim	/^com! -nargs=? DechoVarOn					call s:DechoVarOn(expand("<sfile>"),<args>)$/
DechoVarOn	plugin/Decho.vim	/^fun! s:DechoVarOn(...)$/
DefaultHandler	autoload/vl/ui/navigation/gfHandler.vim	/^function! s:DefaultHandler()$/
DefineCacheDir	autoload/config.vim	/^fun! s:DefineCacheDir()$/
DelItem	autoload/tovl/featureset.vim	/^fun! s:DelItem(i)$/
DeleteFile	plugin/winfileexplorer.vim	/^function! s:DeleteFile() range$/
DeleteMacro	ftplugin/latex-suite/custommacros.vim	/^function! <SID>DeleteMacro(...)$/
DeleteScreenRC	ftplugin/r.vim	/^function! DeleteScreenRC()$/
DeleteScreenRC	ftplugin/rhelp.vim	/^function! DeleteScreenRC()$/
DeleteScreenRC	ftplugin/rnoweb.vim	/^function! DeleteScreenRC()$/
DestroyMark	plugin/cecutil.vim	/^fun! DestroyMark(markname)$/
DetectSystem	plugin/system_utils.vim	/^function! s:DetectSystem()$/
Dfunc	plugin/Decho.vim	/^fun! Dfunc(...)$/
Dhide	plugin/Decho.vim	/^com! -nargs=0 Dhide    						call s:Dhide(1)$/
Dhide	plugin/Decho.vim	/^fun! <SID>Dhide(hide)$/
DictionaryHelper	autoload/config.vim	/^function! s:DictionaryHelper(ind, key, valueList)$/
Display	autoload/lh/buffer/dialog.vim	/^function! s:Display(dialog, atitle)$/
DisplayBuffers	plugin/minibufexpl.vim	/^function! <SID>DisplayBuffers(delBufNum)$/
DisplayError	plugin/wintagexplorer.vim	/^function! <SID>DisplayError()$/
DisplayTagsFile	plugin/wintagexplorer.vim	/^function! <SID>DisplayTagsFile()$/
DoBindList	autoload/lh/function.vim	/^function! s:DoBindList(formal, real)$/
DoBindString	autoload/lh/function.vim	/^function! s:DoBindString(expr, real)$/
Do_it_on_range	macros/let-modeline.vim	/^function! s:Do_it_on_range(first, last)$/
Doc	ftplugin/haskell_doc.vim	/^command! -nargs=+ Doc  call Doc('v',<f-args>)$/
Doc	ftplugin/haskell_doc.vim	/^function! Doc(kind,qualname,...) $/
DocBrowser	ftplugin/haskell_doc.vim	/^function! DocBrowser(url)$/
DocIndex	ftplugin/haskell_doc.vim	/^command! DocIndex call DocIndex()$/
DocIndex	ftplugin/haskell_doc.vim	/^function! DocIndex()$/
DocSettings	ftplugin/haskell_doc.vim	/^command! DocSettings call DocSettings()$/
DocSettings	ftplugin/haskell_doc.vim	/^function! DocSettings()$/
Doct	ftplugin/haskell_doc.vim	/^command! -nargs=+ Doct call Doc('t',<f-args>)$/
DoesFileExist	autoload/vl/ui/navigation/gfHandler.vim	/^function! s:DoesFileExist(value)$/
DoubleClick	plugin/winfileexplorer.vim	/^function s:DoubleClick()$/
DrawBox	autoload/DrawIt.vim	/^fun! s:DrawBox(x0, y0, x1, y1)$/
DrawDown	autoload/DrawIt.vim	/^fun! s:DrawDown()$/
DrawEllipse	autoload/DrawIt.vim	/^fun! s:DrawEllipse(x0,y0,x1,y1)$/
DrawErase	autoload/DrawIt.vim	/^fun! s:DrawErase()$/
DrawFatDArrow	autoload/DrawIt.vim	/^fun! s:DrawFatDArrow()$/
DrawFatLArrow	autoload/DrawIt.vim	/^fun! s:DrawFatLArrow()$/
DrawFatRArrow	autoload/DrawIt.vim	/^fun! s:DrawFatRArrow()$/
DrawFatUArrow	autoload/DrawIt.vim	/^fun! s:DrawFatUArrow()$/
DrawFour	autoload/DrawIt.vim	/^fun! s:DrawFour(x,y,xoff,yoff,a,b)$/
DrawIt#SetBrush	autoload/DrawIt.vim	/^fun! DrawIt#SetBrush(brush) range$/
DrawIt#StartDrawIt	autoload/DrawIt.vim	/^fun! DrawIt#StartDrawIt()$/
DrawIt#StopDrawIt	autoload/DrawIt.vim	/^fun! DrawIt#StopDrawIt()$/
DrawLeft	autoload/DrawIt.vim	/^fun! s:DrawLeft()$/
DrawLine	autoload/DrawIt.vim	/^fun! s:DrawLine(x0, y0, x1, y1, horiz)$/
DrawPlainLine	autoload/DrawIt.vim	/^fun! s:DrawPlainLine(x0,y0,x1,y1)$/
DrawRight	autoload/DrawIt.vim	/^fun! s:DrawRight()$/
DrawSlantDownLeft	autoload/DrawIt.vim	/^fun! s:DrawSlantDownLeft()$/
DrawSlantDownRight	autoload/DrawIt.vim	/^fun! s:DrawSlantDownRight()$/
DrawSlantUpLeft	autoload/DrawIt.vim	/^fun! s:DrawSlantUpLeft()$/
DrawSlantUpRight	autoload/DrawIt.vim	/^fun! s:DrawSlantUpRight()$/
DrawSpace	autoload/DrawIt.vim	/^fun! s:DrawSpace(chr,dir)$/
DrawUp	autoload/DrawIt.vim	/^fun! s:DrawUp()$/
Dredir	plugin/Decho.vim	/^com! -nargs=+ -complete=expression Dredir	call Dredir(<args>)$/
Dredir	plugin/Decho.vim	/^fun! Dredir(...)$/
Dret	plugin/Decho.vim	/^fun! Dret(...)$/
Dsep	plugin/Decho.vim	/^com! -nargs=? Dsep						    call DechoSep(<args>)$/
Dshow	plugin/Decho.vim	/^com! -nargs=0 Dshow    						call s:Dhide(0)$/
EditCallback	autoload/tlib/input.vim	/^function! s:EditCallback(...) "{{{3$/
EditDir	plugin/winfileexplorer.vim	/^function! s:EditDir(...)$/
EditDir	plugin/winmanager.vim	/^function! <SID>EditDir(event)$/
EditEntry	plugin/winfileexplorer.vim	/^function! s:EditEntry(movefirst,editcmd)$/
EditMacro	ftplugin/latex-suite/custommacros.vim	/^function! <SID>EditMacro(...)$/
EditNextVisibleExplorer	plugin/winmanager.vim	/^function! <SID>EditNextVisibleExplorer(grpn, memn, dir, editcmd)$/
Empty	autoload/lh/graph/tsort.vim	/^function! s:Empty(dag)$/
EmuleSort	plugin/system_utils.vim	/^function! EmuleSort(cmp) range$/
EmuleUniq	plugin/system_utils.vim	/^function! EmuleUniq() range$/
EmuleUniq0	plugin/system_utils.vim	/^function! EmuleUniq0() range$/
EnsurePath	plugin/system_utils.vim	/^command! -nargs=1 -complete=expression EnsurePath :call EnsurePath(<args>)$/
EnsurePath	plugin/system_utils.vim	/^function! EnsurePath(path)$/
EnsurePathLastDepth	plugin/system_utils.vim	/^function! s:EnsurePathLastDepth(path)$/
EnsurePath_core	plugin/system_utils.vim	/^function! s:EnsurePath_core(path)$/
ErrorMsg	plugin/system_utils.vim	/^function! s:ErrorMsg(msg)$/
EscapeFilename	plugin/winfileexplorer.vim	/^function! s:EscapeFilename(name)$/
ExchangeListItems	plugin/libList.vim	/^function ExchangeListItems( array, item1Index, item2Index )$/
Exec	ftplugin/latex-suite/templates.vim	/^function! <SID>Exec(what)$/
ExecMap	plugin/imaps.vim	/^function! ExecMap(prefix, mode)$/
ExecWinCmdNoEa	autoload/genutils.vim	/^function! s:ExecWinCmdNoEa(winCmd)$/
Execute	autoload/lh/function.vim	/^function! s:Execute(args) dict$/
Explore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Explore		call netrw#Explore(<count>,0,0+<bang>0,<q-args>)$/
Explore	plugin/winfileexplorer.vim	/^		command -n=? -complete=dir Explore :call s:StartExplorer(0, '<a>')$/
ExploreInCurrentWindow	plugin/winfileexplorer.vim	/^		command -n=? -complete=dir ExploreInCurrentWindow :call <SID>EditDir()$/
ExplorePatHls	autoload/netrw.vim	/^fun! s:ExplorePatHls(pattern)$/
ExportDocIndex	ftplugin/haskell_doc.vim	/^command! ExportDocIndex call ExportDocIndex()$/
ExportDocIndex	ftplugin/haskell_doc.vim	/^function! ExportDocIndex()$/
ExtractFileDate	plugin/winfileexplorer.vim	/^function! s:ExtractFileDate(line)$/
ExtractFileName	plugin/winfileexplorer.vim	/^function! s:ExtractFileName(line)$/
ExtractFileSize	plugin/winfileexplorer.vim	/^function! s:ExtractFileSize(line)$/
ExtractFullFileName	plugin/winfileexplorer.vim	/^function! s:ExtractFullFileName(line)$/
FB_DisplayFiles	plugin/filebrowser.vim	/^function! FB_DisplayFiles(dir)$/
FB_DisplayHelp	plugin/filebrowser.vim	/^function! <SID>FB_DisplayHelp()$/
FB_EditEntry	plugin/filebrowser.vim	/^function! <SID>FB_EditEntry()$/
FB_GetVar	plugin/filebrowser.vim	/^function! <SID>FB_GetVar(name, default)$/
FB_OpenFileBrowser	plugin/filebrowser.vim	/^function! FB_OpenFileBrowser(dir)$/
FB_ResetSilentSettings	plugin/filebrowser.vim	/^function! <SID>FB_ResetSilentSettings()$/
FB_SetHighlighting	plugin/filebrowser.vim	/^function! <SID>FB_SetHighlighting()$/
FB_SetMaps	plugin/filebrowser.vim	/^function! <SID>FB_SetMaps()$/
FB_SetScratchSettings	plugin/filebrowser.vim	/^function! <SID>FB_SetScratchSettings()$/
FB_SetSilentSettings	plugin/filebrowser.vim	/^function! <SID>FB_SetSilentSettings()$/
FB_SetVar	plugin/filebrowser.vim	/^function! FB_SetVar(varname, value)$/
FB_ToggleHelp	plugin/filebrowser.vim	/^function! <SID>FB_ToggleHelp()$/
FML_parse_line	macros/let-modeline.vim	/^function! FML_parse_line(mtch)$/
FakeclipDefaultKeyMappings	plugin/fakeclip.vim	/^command! -bang -bar -nargs=0 FakeclipDefaultKeyMappings$/
FastProfSort	ftplugin/perl.vim	/^  command! -nargs=1 -complete=customlist,perlsupportprofiling#Perl_FastProfSortList FastProfSort$/
Fetch	autoload/lh/menu.vim	/^function! s:Fetch(Data, key)$/
FileDateCmp	plugin/winfileexplorer.vim	/^function! s:FileDateCmp(line1, line2, direction)$/
FileExplorer	plugin/netrwPlugin.vim	/^augroup FileExplorer$/
FileExplorer_IsValid	plugin/winfileexplorer.vim	/^function! FileExplorer_IsValid()$/
FileExplorer_Start	plugin/winfileexplorer.vim	/^function! FileExplorer_Start()$/
FileExplorer_WrapUp	plugin/winfileexplorer.vim	/^function! FileExplorer_WrapUp()$/
FileModDate	plugin/winfileexplorer.vim	/^function! s:FileModDate(name)$/
FileNameCmp	plugin/winfileexplorer.vim	/^function! s:FileNameCmp(line1, line2, direction)$/
FileReadable	autoload/netrw.vim	/^fun! s:FileReadable(fname)$/
FileSizeCmp	plugin/winfileexplorer.vim	/^function! s:FileSizeCmp(line1, line2, direction)$/
FilterPackageMenuLHS	ftplugin/latex-suite/packages.vim	/^function! <SID>FilterPackageMenuLHS(command)$/
FindBufferForName	autoload/genutils.vim	/^function! s:FindBufferForName(fileName)$/
FindCreateWindow	plugin/minibufexpl.vim	/^function! <SID>FindCreateWindow(bufName, forceEdge, isExplorer, doDebug)$/
FindExplorerInGroup	plugin/winmanager.vim	/^function! <SID>FindExplorerInGroup(groupn, memn)$/
FindSubcommand	autoload/lh/command.vim	/^function! s:FindSubcommand(definition, subcommand)$/
FindWindow	plugin/minibufexpl.vim	/^function! <SID>FindWindow(bufName, doDebug)$/
FirstExplorerWindow	plugin/winmanager.vim	/^	command -nargs=0 FirstExplorerWindow :silent call <SID>GotoExplorerWindow('1')$/
FirstModeLine	macros/let-modeline.vim	/^function! FirstModeLine()$/
FixPathName	plugin/system_utils.vim	/^function! FixPathName(pathname,...) $/
FlagReference	ftplugin/haskell_doc.vim	/^  command! -nargs=1 -complete=customlist,CompleteFlagHeaders FlagReference call FlagReference(<f-args>)$/
FlagReference	ftplugin/haskell_doc.vim	/^  function! FlagReference(section)$/
Flood	autoload/DrawIt.vim	/^fun! s:Flood()$/
Flydiff	plugin/flydiff.vim	/^command -bar -nargs=? Flydiff  call flydiff#toggle(bufnr(''), <q-args>)$/
FoldRegionsWithNoSkip	plugin/SyntaxFolds.vim	/^function! FoldRegionsWithNoSkip(startpat, endpat, startoff, endoff, line1, line2, skippedRegions)$/
FoldRegionsWithSkip	plugin/SyntaxFolds.vim	/^function! FoldRegionsWithSkip(startpat, endpat, startoff, endoff, startskip, endskip, line1, line2)$/
FoldTags	plugin/wintagexplorer.vim	/^function! <SID>FoldTags()$/
FoundFunctionCall	macros/let-modeline.vim	/^function! s:FoundFunctionCall(value_str)$/
GHCReload	compiler/ghc.vim	/^command! GHCReload call GHC_BrowseAll()$/
GHCStaticOptions	compiler/ghc.vim	/^command! GHCStaticOptions call GHC_StaticOptions()$/
GHC_BrowseAll	compiler/ghc.vim	/^function! GHC_BrowseAll()$/
GHC_BrowseBangStar	compiler/ghc.vim	/^function! GHC_BrowseBangStar(module)$/
GHC_BrowseMultiple	compiler/ghc.vim	/^function! GHC_BrowseMultiple(imports,modules)$/
GHC_CompleteImports	compiler/ghc.vim	/^function! GHC_CompleteImports(findstart, base)$/
GHC_CountErrors	compiler/ghc.vim	/^function! GHC_CountErrors()$/
GHC_CreateTagfile	compiler/ghc.vim	/^function! GHC_CreateTagfile()$/
GHC_HaveTypes	compiler/ghc.vim	/^function! GHC_HaveTypes()$/
GHC_Info	compiler/ghc.vim	/^function! GHC_Info(what)$/
GHC_MkImportsExplicit	compiler/ghc.vim	/^function! GHC_MkImportsExplicit()$/
GHC_NameCurrent	compiler/ghc.vim	/^function! GHC_NameCurrent()$/
GHC_Process	compiler/ghc.vim	/^function! GHC_Process(imports,output)$/
GHC_ProcessBang	compiler/ghc.vim	/^function! GHC_ProcessBang(module,output)$/
GHC_ShowInfo	compiler/ghc.vim	/^function! GHC_ShowInfo()$/
GHC_ShowType	compiler/ghc.vim	/^function! GHC_ShowType(addTypeDecl)$/
GHC_StaticOptions	compiler/ghc.vim	/^function! GHC_StaticOptions()$/
GHC_TypeBalloon	compiler/ghc.vim	/^  function! GHC_TypeBalloon()$/
GHC_VersionGE	compiler/ghc.vim	/^function! GHC_VersionGE(target)$/
GHC_VersionGE	ftplugin/haskell_doc.vim	/^function! GHC_VersionGE(target)$/
GHCi	compiler/ghc.vim	/^command! -nargs=1 GHCi redraw | echo system(g:ghc. ' ' . b:ghc_staticoptions .' '.expand("%").' -e "'.escape(<f-args>,'"').'"')$/
GMI	autoload/tovl/plugins/mappings/various_surround.vim	/^function! g:GMI()$/
GUDebugEcho	autoload/genutils.vim	/^command! -complete=file -nargs=* GUDebugEcho :echo <q-args>$/
GetCurrentKeyword	plugin/words_tools.vim	/^function! GetCurrentKeyword()$/
GetCurrentWord	plugin/words_tools.vim	/^function! GetCurrentWord()$/
GetExposedFunctionsFromModule	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! s:GetExposedFunctionsFromModule(module, ignoreFiles, level)$/
GetFileFromList	autoload/vl/ui/navigation/gfHandler.vim	/^function! s:GetFileFromList(list)$/
GetFileName	plugin/winfileexplorer.vim	/^function! s:GetFileName()$/
GetFileNameEsc	plugin/winfileexplorer.vim	/^function! s:GetFileNameEsc()$/
GetFirstChar	ftplugin/r.vim	/^function! GetFirstChar(lin)$/
GetFirstChar	ftplugin/rhelp.vim	/^function! GetFirstChar(lin)$/
GetFirstChar	ftplugin/rnoweb.vim	/^function! GetFirstChar(lin)$/
GetFullFileName	plugin/winfileexplorer.vim	/^function! s:GetFullFileName()$/
GetFullFileNameEsc	plugin/winfileexplorer.vim	/^function! s:GetFullFileNameEsc()$/
GetHaskellIndent	indent/haskell.vim	/^function! GetHaskellIndent()$/
GetIDInfo	ftplugin/issue.vim	/^function! s:GetIDInfo()$/
GetLatestVimScripts	autoload/getscript.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/
GetLatestVimScripts	plugin/getscriptPlugin.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/
GetLikeCTRL_W	plugin/words_tools.vim	/^function! GetLikeCTRL_W()$/
GetListCount	plugin/libList.vim	/^function GetListCount( array )$/
GetListItem	plugin/libList.vim	/^function GetListItem( array, index )$/
GetListMatchItem	plugin/libList.vim	/^function GetListMatchItem( array, pattern )$/
GetMostInnerSurrounding	autoload/tovl/plugins/mappings/various_surround.vim	/^function! s:GetMostInnerSurrounding()$/
GetNearestKeyword	plugin/words_tools.vim	/^function! GetNearestKeyword()$/
GetNearestWord	plugin/words_tools.vim	/^function! GetNearestWord()$/
GetNextWinnrInStack	autoload/genutils.vim	/^function! s:GetNextWinnrInStack(dir)$/
GetNthElement	autoload/tlib/list.vim	/^function! s:GetNthElement(n, lists, default) "{{{3$/
GetOneScript	autoload/getscript.vim	/^fun! s:GetOneScript(...)$/
GetPairFromKeyboard	autoload/tovl/plugins/mappings/various_surround.vim	/^function! s:GetPairFromKeyboard()$/
GetPreviousWord	plugin/words_tools.vim	/^function! GetPreviousWord()$/
GetRIndent	indent/r.vim	/^function GetRIndent()$/
GetScript	autoload/getscript.vim	/^com!        -nargs=0 GetScript           call getscript#GetLatestVimScripts()$/
GetScripts	plugin/getscriptPlugin.vim	/^com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()$/
GetSection	plugin/winfileexplorer.vim	/^function! s:GetSection()$/
GetSelectedBuffer	plugin/minibufexpl.vim	/^function! <SID>GetSelectedBuffer()$/
GetTeXIndent	indent/tex.vim	/^function GetTeXIndent()$/
GetTempfile	autoload/netrw.vim	/^fun! s:GetTempfile(fname)$/
GetToken	plugin/calendar.vim	/^function! s:GetToken(src,dlm,cnt)$/
GetWinDim	autoload/genutils.vim	/^function! s:GetWinDim(dir, win)$/
Get_paren_balance	indent/r.vim	/^function! s:Get_paren_balance(line, o, c)$/
Get_prev_line	indent/r.vim	/^function! s:Get_prev_line( lineno )$/
GhciFile	plugin/shim.vim	/^command! GhciFile ruby ghci.ghciSourceFile$/
GhciRange	plugin/shim.vim	/^command! -range GhciRange ruby ghci.writeRangeToGhci(<line1>, <line2>)$/
GhciReload	plugin/shim.vim	/^command! GhciReload ruby ghci.reloadGhci$/
GlobAsList	autoload/lh/path.vim	/^function! s:GlobAsList(pathslist, expr)$/
GoBash	plugin/system_utils.vim	/^command! -nargs=0 GoBash :call s:Go_bash()$/
GoCmd	plugin/system_utils.vim	/^command! -nargs=0 GoCmd  :call s:Go_cmd()$/
GoDown	ftplugin/r.vim	/^function! GoDown()$/
GoDown	ftplugin/rhelp.vim	/^function! GoDown()$/
GoDown	ftplugin/rnoweb.vim	/^function! GoDown()$/
GoWinbufnr	plugin/cecutil.vim	/^fun! GoWinbufnr(bufnum)$/
GoZsh	plugin/system_utils.vim	/^command! -nargs=0 GoZsh  :call s:Go_zsh()$/
Go_bash	plugin/system_utils.vim	/^function! s:Go_bash() " {{{3$/
Go_cmd	plugin/system_utils.vim	/^function! s:Go_cmd() " {{{3$/
Go_zsh	plugin/system_utils.vim	/^function! s:Go_zsh() " {{{3$/
GotoExplorerWindow	plugin/winmanager.vim	/^function! <SID>GotoExplorerWindow(which)$/
GotoLocation	autoload/vl/ui/navigation/gfHandler.vim	/^function! s:GotoLocation(value)$/
GotoNextExplorerInGroup	plugin/winmanager.vim	/^function! <SID>GotoNextExplorerInGroup(name, ...)$/
GotoWindow	plugin/winmanager.vim	/^function! <SID>GotoWindow(reqdWinNum)$/
Gred	plugin/grex.vim	/^command! -bar -nargs=0 -range=% Gred  <line1>,<line2>call grex#delete()$/
Grey	plugin/grex.vim	/^command! -bar -nargs=0 -range=% Grey  <line1>,<line2>call grex#yank()$/
GroupPackageMenuItems	ftplugin/latex-suite/packages.vim	/^function! <SID>GroupPackageMenuItems(menuList, menuName, $/
GroupTags	plugin/wintagexplorer.vim	/^function! <SID>GroupTags() range$/
HEMan	plugin/manpageviewPlugin.vim	/^com! -nargs=* -count=0	HEMan let g:manpageview_winopen="hsplit="|call manpageview#ManPageView(0,<count>,<f-args>)$/
HLTest	syntax/Decho.vim	/^  fun! s:HLTest(hlname)$/
HMan	plugin/manpageviewPlugin.vim	/^com! -nargs=* -count=0	HMan  let g:manpageview_winopen="hsplit" |call manpageview#ManPageView(0,<count>,<f-args>)$/
HR	autoload/tovl/ft/vimscript/vimfile.vim	/^function! s:HR(result)$/
HR	autoload/vl/dev/vimscript/vimfile.vim	/^function! s:HR(result)$/
Haddock	ftplugin/haskell_doc.vim	/^function! Haddock()$/
HaddockIndexLookup	ftplugin/haskell_doc.vim	/^function! HaddockIndexLookup(name)$/
HasEligibleBuffers	plugin/minibufexpl.vim	/^function! <SID>HasEligibleBuffers(delBufNum)$/
HasIncomingEgde	autoload/lh/graph/tsort.vim	/^function! s:HasIncomingEgde(dag, node)$/
Hash	plugin/imaps.vim	/^fun! s:Hash(text)$/
HaskellSearchEngine	ftplugin/haskell_doc.vim	/^function! HaskellSearchEngine(engine)$/
HaveIndex	ftplugin/haskell_doc.vim	/^function! HaveIndex()$/
HaveModuleIndex	ftplugin/haskell_doc.vim	/^function! HaveModuleIndex()$/
Help_NbL	autoload/lh/buffer/dialog.vim	/^function! s:Help_NbL()$/
Hexplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Hexplore	call netrw#Explore(<count>,1,2+<bang>0,<q-args>)$/
HiLink	syntax/hla.vim	/^    command -nargs=+ HiLink hi def link <args>$/
HiLink	syntax/hla.vim	/^    command -nargs=+ HiLink hi link <args>$/
HiLink	syntax/lhaskell.vim	/^    command -nargs=+ HiLink hi def link <args>$/
HiLink	syntax/lhaskell.vim	/^    command -nargs=+ HiLink hi link <args>$/
HiLink	syntax/man.vim	/^com! -nargs=+ HiLink hi def link <args>$/
HiLink	syntax/mankey.vim	/^command! -nargs=+ HiLink hi default link <args>$/
HiLink	syntax/r.vim	/^    command -nargs=+ HiLink hi def link <args>$/
HiLink	syntax/r.vim	/^    command -nargs=+ HiLink hi link <args>$/
HiLink	syntax/rhelp.vim	/^    command -nargs=+ HiLink hi def link <args>$/
HiLink	syntax/rhelp.vim	/^    command -nargs=+ HiLink hi link <args>$/
HiLink	syntax/tex.vim	/^  command -nargs=+ HiLink hi def link <args>$/
HiLink	syntax/tex.vim	/^  command -nargs=+ HiLink hi link <args>$/
HpasteEditEntry	ftplugin/haskell_hpaste.vim	/^command! -nargs=1 HpasteEditEntry call HpasteEditEntry(<f-args>)$/
HpasteEditEntry	ftplugin/haskell_hpaste.vim	/^function! HpasteEditEntry(entry)$/
HpasteIndex	ftplugin/haskell_hpaste.vim	/^command! HpasteIndex call HpasteIndex()$/
HpasteIndex	ftplugin/haskell_hpaste.vim	/^function! HpasteIndex()$/
IDoc	ftplugin/haskell_doc.vim	/^command! -nargs=+ IDoc call IDoc(<f-args>)$/
IDoc	ftplugin/haskell_doc.vim	/^function! IDoc(name,...) $/
IF	plugin/ui-functions.vim	/^function! IF(var,then, else)$/
IMAP	macros/menu-map.vim	/^command! -nargs=+           IMAP     imap       <args>$/
IMAP	plugin/imaps.vim	/^function! IMAP(lhs, rhs, ft, ...)$/
IMAP_Debug	plugin/imaps.vim	/^function! IMAP_Debug(string, pattern)$/
IMAP_DebugClear	plugin/imaps.vim	/^function! IMAP_DebugClear(pattern)$/
IMAP_GetPlaceHolderEnd	plugin/imaps.vim	/^function! IMAP_GetPlaceHolderEnd()$/
IMAP_GetPlaceHolderStart	plugin/imaps.vim	/^function! IMAP_GetPlaceHolderStart()$/
IMAP_GetVal	plugin/imaps.vim	/^function! IMAP_GetVal(name, ...)$/
IMAP_Jumpfunc	plugin/imaps.vim	/^function! IMAP_Jumpfunc(direction, inclusive)$/
IMAP_Mark	plugin/imaps.vim	/^function! IMAP_Mark(action)$/
IMAP_PrintDebug	plugin/imaps.vim	/^function! IMAP_PrintDebug(pattern)$/
IMAP_PutTextWithMovement	plugin/imaps.vim	/^function! IMAP_PutTextWithMovement(str, ...)$/
IMAP_list	plugin/imaps.vim	/^function! IMAP_list(lhs)$/
INOREMAP	macros/menu-map.vim	/^command! -nargs=+       INOREMAP inoremap       <args>$/
INPUT	plugin/ui-functions.vim	/^function! INPUT(prompt, ...)$/
Iconv	plugin/imaps.vim	/^function! s:Iconv(text, mode)$/
IgnoreWarnings	compiler/tex.vim	/^function! <SID>IgnoreWarnings()$/
Import	ftplugin/haskell_doc.vim	/^function! Import(module,qualified)$/
ImportDocIndex	ftplugin/haskell_doc.vim	/^command! ImportDocIndex call ImportDocIndex()$/
ImportDocIndex	ftplugin/haskell_doc.vim	/^function! ImportDocIndex()$/
InfoIndexLink	autoload/manpageview.vim	/^fun! s:InfoIndexLink(cmd)$/
Init	autoload/tlib/input.vim	/^function! s:Init(world, cmd) "{{{3$/
Init	plugin/supertab.vim	/^function! s:Init()$/
InitBuffer	plugin/supertab.vim	/^function! s:InitBuffer()$/
InitStack	plugin/SyntaxFolds.vim	/^function! InitStack(name)$/
InitializeMRUList	plugin/winmanager.vim	/^function! <SID>InitializeMRUList()$/
Input	ftplugin/latex-suite/bibtex.vim	/^function! s:Input(prompt, ask) " {{{$/
InsertSelectedItems	autoload/tlib/World.vim	/^function! s:InsertSelectedItems(rv, current) "{{{3$/
Introduction	ftplugin/latex-suite/templates/IEEEtran.tex	/^\\end{keywords}$/
InvokeFuncs	autoload/genutils.vim	/^function! s:InvokeFuncs(funcList)$/
IsBoundary	autoload/DrawIt.vim	/^fun! s:IsBoundary(row,col)$/
IsEmpty	autoload/lh/option.vim	/^function! s:IsEmpty(variable)$/
IsExplorerBuffer	plugin/winmanager.vim	/^function! <SID>IsExplorerBuffer(num)$/
IsExplorerGroupVisible	plugin/winmanager.vim	/^function! <SID>IsExplorerGroupVisible(i, ...)$/
IsExplorerVisible	plugin/winmanager.vim	/^function! <SID>IsExplorerVisible(i)$/
IsInSkippedRegion	plugin/SyntaxFolds.vim	/^function! IsInSkippedRegion(lnum, regions)$/
IsOnlyVertical	plugin/winmanager.vim	/^function! <SID>IsOnlyVertical()$/
IsWinManagerVisible	plugin/winmanager.vim	/^function! IsWinManagerVisible()$/
It	autoload/vspec.vim	/^command! -nargs=+ It  call vspec#cmd_It(<q-args>)$/
Join	autoload/lh/function.vim	/^function! s:Join(args)$/
JumpToIssue	ftplugin/issue.vim	/^function! s:JumpToIssue()$/
KeyMap.All	plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/
KeyMap.BindAll	plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/
KeyMap.Create	plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/
KeyMap.bind	plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/
Ku	plugin/ku.vim	/^command! -bang -bar -complete=custom,ku#command_complete -nargs=1 Ku$/
KuDoAction	plugin/ku.vim	/^command! -bar -nargs=1 KuDoAction  call ku#do_action(<q-args>)$/
KuReload	plugin/ku.vim	/^command! -bar -nargs=0 KuReload  call ku#reload()$/
L	plugin/manpageviewPlugin.vim	/^  nmap <unique> L <Plug>ManPageView$/
LatexSuite	ftplugin/latex-suite/brackets.vim	/^augroup LatexSuite$/
LatexSuite	ftplugin/latex-suite/compiler.vim	/^augroup LatexSuite$/
LatexSuite	ftplugin/latex-suite/envmacros.vim	/^augroup LatexSuite$/
LatexSuite	ftplugin/latex-suite/folding.vim	/^augroup LatexSuite$/
LatexSuite	ftplugin/latex-suite/main.vim	/^augroup LatexSuite$/
LatexSuite	ftplugin/latex-suite/packages.vim	/^augroup LatexSuite$/
LatexSuite	ftplugin/latex-suite/texproject.vim	/^augroup LatexSuite$/
LatexSuite	ftplugin/latex-suite/texviewer.vim	/^augroup LatexSuite$/
LeftRelease	autoload/DrawIt.vim	/^fun! s:LeftRelease()$/
LeftStart	autoload/DrawIt.vim	/^fun! s:LeftStart()$/
ListHelper	autoload/config.vim	/^function! s:ListHelper(ind,valueList)$/
LoadBundle	plugin/bundle.vim	/^command! -bang -bar -complete=customlist,bundle#complete -nargs=1 LoadBundle$/
LoadView	plugin/wintagexplorer.vim	/^function! s:LoadView(foldInfo)$/
LocalBrowse	plugin/netrwPlugin.vim	/^fun! s:LocalBrowse(dirname)$/
LocalBrowseShellCmdRefresh	autoload/netrw.vim	/^fun! s:LocalBrowseShellCmdRefresh()$/
LocalFastBrowser	autoload/netrw.vim	/^fun! s:LocalFastBrowser()$/
LocalListing	autoload/netrw.vim	/^fun! s:LocalListing()$/
Log	autoload/config.vim	/^fun! s:Log(level, msg)$/
Log	autoload/tovl/featureset.vim	/^fun! s:Log(level, msg)$/
Log	autoload/tovl/plugin_management.vim	/^fun! s:Log(level, msg)$/
Log	autoload/tovl/runtaskinbackground.vim	/^fun! s:Log(...)$/
LogExec	autoload/tovl/featureset.vim	/^fun! s:LogExec(level, msg)$/
LogExec	autoload/tovl/plugin_management.vim	/^fun! s:LogExec(level, msg)$/
LookupCharacter	plugin/imaps.vim	/^function! s:LookupCharacter(char)$/
MAP	macros/menu-map.vim	/^command! -nargs=+ -bang      MAP      map<bang> <args>$/
MBEClick	plugin/minibufexpl.vim	/^function! s:MBEClick()$/
MBEDeleteBuffer	plugin/minibufexpl.vim	/^function! <SID>MBEDeleteBuffer()$/
MBEDoubleClick	plugin/minibufexpl.vim	/^function! s:MBEDoubleClick()$/
MBESelectBuffer	plugin/minibufexpl.vim	/^function! <SID>MBESelectBuffer()$/
MBEbn	plugin/minibufexpl.vim	/^  command! MBEbn call <SID>CycleBuffer(1)$/
MBEbp	plugin/minibufexpl.vim	/^  command! MBEbp call <SID>CycleBuffer(0)$/
MDoc	ftplugin/haskell_doc.vim	/^command! -nargs=1 -complete=customlist,CompleteHaddockModules MDoc call MDoc(<f-args>)$/
MDoc	ftplugin/haskell_doc.vim	/^function! MDoc(module)$/
MPVRestoreSettings	autoload/manpageview.vim	/^fun! s:MPVRestoreSettings()$/
MPVSaveSettings	autoload/manpageview.vim	/^fun! s:MPVSaveSettings()$/
MRU	plugin/MRU.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete MRU$/
MRUGet	plugin/winmanager.vim	/^function! <SID>MRUGet(slot)$/
MRUPop	plugin/winmanager.vim	/^function! <SID>MRUPop()$/
MRUPush	plugin/winmanager.vim	/^function! <SID>MRUPush()$/
MRU_AddFile	plugin/MRU.vim	/^function! s:MRU_AddFile(acmd_bufnr)$/
MRU_Add_Menu	plugin/MRU.vim	/^    let MRU_Add_Menu = 1$/
MRU_Auto_Close	plugin/MRU.vim	/^    let MRU_Auto_Close = 1$/
MRU_Cmd	plugin/MRU.vim	/^function! s:MRU_Cmd(pat)$/
MRU_Complete	plugin/MRU.vim	/^function! s:MRU_Complete(ArgLead, CmdLine, CursorPos)$/
MRU_Edit_File	plugin/MRU.vim	/^function! s:MRU_Edit_File(filename, sanitized)$/
MRU_Exclude_Files	plugin/MRU.vim	/^    let MRU_Exclude_Files = ''$/
MRU_File	plugin/MRU.vim	/^                let MRU_File = $USERPROFILE . '\\_vim_mru_files'$/
MRU_File	plugin/MRU.vim	/^        let MRU_File = $HOME . '\/.vim_mru_files'$/
MRU_File	plugin/MRU.vim	/^        let MRU_File = $VIM . '\/_vim_mru_files'$/
MRU_Include_Files	plugin/MRU.vim	/^    let MRU_Include_Files = ''$/
MRU_LoadList	plugin/MRU.vim	/^function! s:MRU_LoadList()$/
MRU_Max_Entries	plugin/MRU.vim	/^    let MRU_Max_Entries = 100$/
MRU_Max_Menu_Entries	plugin/MRU.vim	/^    let MRU_Max_Menu_Entries = 10$/
MRU_Max_Submenu_Entries	plugin/MRU.vim	/^    let MRU_Max_Submenu_Entries = 10$/
MRU_Open_Window	plugin/MRU.vim	/^function! s:MRU_Open_Window(...)$/
MRU_Refresh_Menu	plugin/MRU.vim	/^function! s:MRU_Refresh_Menu()$/
MRU_SaveList	plugin/MRU.vim	/^function! s:MRU_SaveList()$/
MRU_Select_File_Cmd	plugin/MRU.vim	/^function! s:MRU_Select_File_Cmd(opt) range$/
MRU_Use_Current_Window	plugin/MRU.vim	/^    let MRU_Use_Current_Window = 0$/
MRU_Warn_Msg	plugin/MRU.vim	/^function! s:MRU_Warn_Msg(msg)$/
MRU_Window_Edit_File	plugin/MRU.vim	/^function! s:MRU_Window_Edit_File(fname, multi, edit_type, open_type)$/
MRU_Window_Height	plugin/MRU.vim	/^    let MRU_Window_Height = 8$/
MRU_add_files_to_menu	plugin/MRU.vim	/^function! s:MRU_add_files_to_menu(prefix, file_list)$/
MRU_escape_filename	plugin/MRU.vim	/^function! s:MRU_escape_filename(fname)$/
MakeRMenu	ftplugin/r.vim	/^function! MakeRMenu()$/
MakeRMenu	ftplugin/rhelp.vim	/^function! MakeRMenu()$/
MakeRMenu	ftplugin/rnoweb.vim	/^function! MakeRMenu()$/
MakeSpace	autoload/Align.vim	/^fun! s:MakeSpace(spacecnt)$/
MakeSshCmd	autoload/netrw.vim	/^fun! s:MakeSshCmd(sshcmd)$/
MakeSyntaxFolds	plugin/SyntaxFolds.vim	/^function! MakeSyntaxFolds(force, ...)$/
MakeTexFolds	ftplugin/latex-suite/folding.vim	/^function! MakeTexFolds(force)$/
Man	plugin/manpageviewPlugin.vim	/^com! -nargs=* -count=0	Man   call manpageview#ManPageView(0,<count>,<f-args>)$/
ManPageInfo	autoload/manpageview.vim	/^fun! s:ManPageInfo(type)$/
ManPageInfoInit	autoload/manpageview.vim	/^fun! ManPageInfoInit()$/
ManPagePhp	autoload/manpageview.vim	/^fun! s:ManPagePhp()$/
ManPageTex	autoload/manpageview.vim	/^fun! s:ManPageTex()$/
ManPageTexLookup	autoload/manpageview.vim	/^fun! s:ManPageTexLookup(book,topic)$/
ManRestorePosn	autoload/manpageview.vim	/^fun! s:ManRestorePosn()$/
ManSavePosn	autoload/manpageview.vim	/^fun! s:ManSavePosn()$/
ManualCompletionEnter	plugin/supertab.vim	/^function! s:ManualCompletionEnter()$/
Mappings	autoload/lh/buffer/dialog.vim	/^function! s:Mappings(abuffer)$/
MarkDirs	plugin/winfileexplorer.vim	/^function! s:MarkDirs()$/
Match	autoload/genutils.vim	/^function! s:Match(expr, pat, start)$/
Max	plugin/minibufexpl.vim	/^function! <SID>Max(argOne, argTwo)$/
MenuController.New	plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/
MenuController._allIndexesFor	plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/
MenuController._current	plugin/NERD_tree.vim	/^function! s:MenuController._current()$/
MenuController._cursorDown	plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/
MenuController._cursorUp	plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/
MenuController._echoPrompt	plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/
MenuController._handleKeypress	plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/
MenuController._nextIndexFor	plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/
MenuController._restoreOptions	plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/
MenuController._saveOptions	plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/
MenuController._setCmdheight	plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/
MenuController.showMenu	plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/
MenuItem.All	plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/
MenuItem.AllEnabled	plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/
MenuItem.Create	plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/
MenuItem.CreateSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/
MenuItem.CreateSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/
MenuItem.enabled	plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/
MenuItem.execute	plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/
MenuItem.isSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/
MenuItem.isSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/
MenuKey	autoload/lh/menu.vim	/^function! s:MenuKey(Data)$/
MiniBufExplorer	plugin/minibufexpl.vim	/^  command! MiniBufExplorer  call <SID>StartExplorer(1, -1)$/
MiniBufExplorer	plugin/minibufexpl.vim	/^augroup MiniBufExplorer$/
MkHaddockModuleIndex	ftplugin/haskell_doc.vim	/^function! MkHaddockModuleIndex()$/
MkViewNoNestedFolds	plugin/wintagexplorer.vim	/^function! s:MkViewNoNestedFolds()$/
MkVimball	plugin/vimballPlugin.vim	/^com! -ra   -complete=file -na=+ -bang MkVimball call vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)$/
MoveDown	autoload/DrawIt.vim	/^fun! s:MoveDown()$/
MoveLeft	autoload/DrawIt.vim	/^fun! s:MoveLeft()$/
MoveRight	autoload/DrawIt.vim	/^fun! s:MoveRight()$/
MoveUp	autoload/DrawIt.vim	/^fun! s:MoveUp()$/
Mru	plugin/MRU.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete Mru$/
MySearch	plugin/SyntaxFolds.vim	/^function! <SID>MySearch(pat, opt)$/
NERDTree	plugin/NERD_tree.vim	/^augroup NERDTree$/
NERDTree	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/
NERDTreeAddKeyMap	plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/
NERDTreeAddMenuItem	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/
NERDTreeAddMenuSeparator	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/
NERDTreeAddSubmenu	plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/
NERDTreeClose	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/
NERDTreeFind	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/
NERDTreeFromBookmark	plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/
NERDTreeHijackNetrw	plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/
NERDTreeMirror	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/
NERDTreeRender	plugin/NERD_tree.vim	/^function! NERDTreeRender()$/
NERDTreeToggle	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/
NFH_bmp	autoload/netrwFileHandlers.vim	/^fun! s:NFH_bmp(bmpfile)$/
NFH_doc	autoload/netrwFileHandlers.vim	/^fun! s:NFH_doc(doc)$/
NFH_eps	autoload/netrwFileHandlers.vim	/^fun! s:NFH_eps(eps)$/
NFH_fig	autoload/netrwFileHandlers.vim	/^fun! s:NFH_fig(fig)$/
NFH_gif	autoload/netrwFileHandlers.vim	/^fun! s:NFH_gif(giffile)$/
NFH_htm	autoload/netrwFileHandlers.vim	/^fun! s:NFH_htm(pagefile)$/
NFH_html	autoload/netrwFileHandlers.vim	/^fun! s:NFH_html(pagefile)$/
NFH_jpg	autoload/netrwFileHandlers.vim	/^fun! s:NFH_jpg(jpgfile)$/
NFH_obj	autoload/netrwFileHandlers.vim	/^fun! s:NFH_obj(obj)$/
NFH_pdf	autoload/netrwFileHandlers.vim	/^fun! s:NFH_pdf(pdf)$/
NFH_png	autoload/netrwFileHandlers.vim	/^fun! s:NFH_png(pngfile)$/
NFH_pnm	autoload/netrwFileHandlers.vim	/^fun! s:NFH_pnm(pnmfile)$/
NFH_ps	autoload/netrwFileHandlers.vim	/^fun! s:NFH_ps(ps)$/
NFH_sxw	autoload/netrwFileHandlers.vim	/^fun! s:NFH_sxw(sxw)$/
NFH_xls	autoload/netrwFileHandlers.vim	/^fun! s:NFH_xls(xls)$/
NMAP	macros/menu-map.vim	/^command! -nargs=+           NMAP     nmap       <args>$/
NNOREMAP	macros/menu-map.vim	/^command! -nargs=+       NNOREMAP nnoremap       <args>$/
NOREMAP	macros/menu-map.vim	/^command! -nargs=+ -bang  NOREMAP  noremap<bang> <args>$/
NYTProfCSV	ftplugin/perl.vim	/^command! -nargs=0  NYTProfCSV call perlsupportprofiling#Perl_NYTprofReadCSV  ()$/
NYTProfHTML	ftplugin/perl.vim	/^command! -nargs=0  NYTProfHTML call perlsupportprofiling#Perl_NYTprofReadHtml  ()$/
NYTProfSort	ftplugin/perl.vim	/^command! -nargs=1 -complete=customlist,perlsupportprofiling#Perl_NYTProfSortList NYTProfSort$/
Narrow	plugin/narrow.vim	/^command -bar -range Narrow  call narrow#Narrow(<line1>, <line2>)$/
NetReadFixup	autoload/netrw.vim	/^ fun! NetReadFixup(method, line1, line2)$/
NetSortSequence	autoload/netrw.vim	/^fun! s:NetSortSequence(islocal)$/
NetUserPass	autoload/netrw.vim	/^fun! NetUserPass(...)$/
NetUserPass	plugin/netrwPlugin.vim	/^com! -nargs=*		NetUserPass	call NetUserPass(<f-args>)$/
NetUserPass	plugin/netrwPlugin.vim	/^fun! NetUserPass(...)$/
NetrwBMShow	autoload/netrw.vim	/^fun! s:NetrwBMShow()$/
NetrwBannerCtrl	autoload/netrw.vim	/^fun! s:NetrwBannerCtrl(islocal)$/
NetrwBookHistHandler	autoload/netrw.vim	/^fun! s:NetrwBookHistHandler(chg,curdir)$/
NetrwBookHistRead	autoload/netrw.vim	/^fun! s:NetrwBookHistRead()$/
NetrwBookHistSave	autoload/netrw.vim	/^fun! s:NetrwBookHistSave()$/
NetrwBookmarkMenu	autoload/netrw.vim	/^fun! s:NetrwBookmarkMenu()$/
NetrwBrowse	autoload/netrw.vim	/^fun! s:NetrwBrowse(islocal,dirname)$/
NetrwBrowseChgDir	autoload/netrw.vim	/^fun! s:NetrwBrowseChgDir(islocal,newdir,...)$/
NetrwChgPerm	autoload/netrw.vim	/^fun! s:NetrwChgPerm(islocal,curdir)$/
NetrwClean	plugin/netrwPlugin.vim	/^com! -bang	NetrwClean	call netrw#NetrwClean(<bang>0)$/
NetrwClearExplore	autoload/netrw.vim	/^fun! s:NetrwClearExplore()$/
NetrwDelete	autoload/netrw.vim	/^fun! s:NetrwDelete(path)$/
NetrwEnew	autoload/netrw.vim	/^fun! s:NetrwEnew(...)$/
NetrwExploreListUniq	autoload/netrw.vim	/^fun! s:NetrwExploreListUniq(explist)$/
NetrwFileInfo	autoload/netrw.vim	/^fun! s:NetrwFileInfo(islocal,fname)$/
NetrwGetBuffer	autoload/netrw.vim	/^fun! s:NetrwGetBuffer(islocal,dirname)$/
NetrwGetFile	autoload/netrw.vim	/^fun! s:NetrwGetFile(readcmd, tfile, method)$/
NetrwGetWord	autoload/netrw.vim	/^fun! s:NetrwGetWord()$/
NetrwGetcwd	autoload/netrw.vim	/^fun! s:NetrwGetcwd(doesc)$/
NetrwHidden	autoload/netrw.vim	/^fun! s:NetrwHidden(islocal)$/
NetrwHide	autoload/netrw.vim	/^fun! s:NetrwHide(islocal)$/
NetrwHideEdit	autoload/netrw.vim	/^fun! s:NetrwHideEdit(islocal)$/
NetrwHome	autoload/netrw.vim	/^fun! s:NetrwHome()$/
NetrwInit	autoload/netrw.vim	/^fun s:NetrwInit(varname,value)$/
NetrwLeftmouse	autoload/netrw.vim	/^fun! s:NetrwLeftmouse(islocal)$/
NetrwListHide	autoload/netrw.vim	/^fun! s:NetrwListHide()$/
NetrwListSettings	autoload/netrw.vim	/^fun! s:NetrwListSettings(islocal)$/
NetrwListStyle	autoload/netrw.vim	/^fun! s:NetrwListStyle(islocal)$/
NetrwLocalRename	autoload/netrw.vim	/^fun! s:NetrwLocalRename(path) range$/
NetrwLocalRm	autoload/netrw.vim	/^fun! s:NetrwLocalRm(path) range$/
NetrwLocalRmFile	autoload/netrw.vim	/^fun! s:NetrwLocalRmFile(path,fname,all)$/
NetrwMakeDir	autoload/netrw.vim	/^fun! s:NetrwMakeDir(usrhost)$/
NetrwMarkFile	autoload/netrw.vim	/^fun! s:NetrwMarkFile(islocal,fname)$/
NetrwMarkFileCompress	autoload/netrw.vim	/^fun! s:NetrwMarkFileCompress(islocal)$/
NetrwMarkFileCopy	autoload/netrw.vim	/^fun! s:NetrwMarkFileCopy(islocal)$/
NetrwMarkFileDiff	autoload/netrw.vim	/^fun! s:NetrwMarkFileDiff(islocal)$/
NetrwMarkFileEdit	autoload/netrw.vim	/^fun! s:NetrwMarkFileEdit(islocal)$/
NetrwMarkFileExe	autoload/netrw.vim	/^fun! s:NetrwMarkFileExe(islocal)$/
NetrwMarkFileGrep	autoload/netrw.vim	/^fun! s:NetrwMarkFileGrep(islocal)$/
NetrwMarkFileMove	autoload/netrw.vim	/^fun! s:NetrwMarkFileMove(islocal)$/
NetrwMarkFilePrint	autoload/netrw.vim	/^fun! s:NetrwMarkFilePrint(islocal)$/
NetrwMarkFileRegexp	autoload/netrw.vim	/^fun! s:NetrwMarkFileRegexp(islocal)$/
NetrwMarkFileSource	autoload/netrw.vim	/^fun! s:NetrwMarkFileSource(islocal)$/
NetrwMarkFileTag	autoload/netrw.vim	/^fun! s:NetrwMarkFileTag(islocal)$/
NetrwMarkFileTgt	autoload/netrw.vim	/^fun! s:NetrwMarkFileTgt(islocal)$/
NetrwMarkHideSfx	autoload/netrw.vim	/^fun! s:NetrwMarkHideSfx(islocal)$/
NetrwMenu	autoload/netrw.vim	/^fun! s:NetrwMenu(domenu)$/
NetrwMethod	autoload/netrw.vim	/^fun! s:NetrwMethod(choice)$/
NetrwObtain	autoload/netrw.vim	/^fun! s:NetrwObtain(islocal)$/
NetrwOpenFile	autoload/netrw.vim	/^fun! s:NetrwOpenFile(islocal)$/
NetrwOptionRestore	autoload/netrw.vim	/^fun! s:NetrwOptionRestore(vt)$/
NetrwOptionSave	autoload/netrw.vim	/^fun! s:NetrwOptionSave(vt)$/
NetrwPrevWinOpen	autoload/netrw.vim	/^fun! s:NetrwPrevWinOpen(islocal)$/
NetrwPreview	autoload/netrw.vim	/^fun! s:NetrwPreview(path) range$/
NetrwRefresh	autoload/netrw.vim	/^fun! s:NetrwRefresh(islocal,dirname)$/
NetrwRefreshDir	autoload/netrw.vim	/^fun! s:NetrwRefreshDir(islocal,dirname)$/
NetrwRemoteFtpCmd	autoload/netrw.vim	/^fun! s:NetrwRemoteFtpCmd(path,listcmd)$/
NetrwRemoteListing	autoload/netrw.vim	/^fun! s:NetrwRemoteListing()$/
NetrwRemoteRename	autoload/netrw.vim	/^fun! s:NetrwRemoteRename(usrhost,path) range$/
NetrwRemoteRm	autoload/netrw.vim	/^fun! s:NetrwRemoteRm(usrhost,path) range$/
NetrwRemoteRmFile	autoload/netrw.vim	/^fun! s:NetrwRemoteRmFile(path,rmfile,all)$/
NetrwRestoreWordPosn	autoload/netrw.vim	/^fun! s:NetrwRestoreWordPosn()$/
NetrwRexplore	autoload/netrw.vim	/^fun! s:NetrwRexplore(islocal,dirname)$/
NetrwSafeOptions	autoload/netrw.vim	/^fun! s:NetrwSafeOptions()$/
NetrwSaveWordPosn	autoload/netrw.vim	/^fun! s:NetrwSaveWordPosn()$/
NetrwSetSort	autoload/netrw.vim	/^fun! s:NetrwSetSort()$/
NetrwSettingHelp	autoload/netrwSettings.vim	/^fun! NetrwSettingHelp()$/
NetrwSettings	plugin/netrwPlugin.vim	/^com! -nargs=0	NetrwSettings	call netrwSettings#NetrwSettings()$/
NetrwSortStyle	autoload/netrw.vim	/^fun! s:NetrwSortStyle(islocal)$/
NetrwSplit	autoload/netrw.vim	/^fun! s:NetrwSplit(mode)$/
NetrwStatusLine	autoload/netrw.vim	/^fun! NetrwStatusLine()$/
NetrwStatusLine	plugin/netrwPlugin.vim	/^fun! NetrwStatusLine()$/
NetrwTreeDir	autoload/netrw.vim	/^fun! s:NetrwTreeDir()$/
NetrwTreeDisplay	autoload/netrw.vim	/^fun! s:NetrwTreeDisplay(dir,depth)$/
NetrwTreeListing	autoload/netrw.vim	/^fun! s:NetrwTreeListing(dirname)$/
NetrwUnMarkFile	autoload/netrw.vim	/^fun! s:NetrwUnMarkFile(islocal)$/
NetrwUnmarkAll	autoload/netrw.vim	/^fun! s:NetrwUnmarkAll()$/
NetrwUnmarkAll2	autoload/netrw.vim	/^fun! s:NetrwUnmarkAll2()$/
NetrwUnmarkList	autoload/netrw.vim	/^fun! s:NetrwUnmarkList(curbufnr,curdir)$/
NetrwUpload	autoload/netrw.vim	/^fun! s:NetrwUpload(fname,tgt,...)$/
NetrwWideListing	autoload/netrw.vim	/^fun! s:NetrwWideListing()$/
Network	plugin/netrwPlugin.vim	/^augroup Network$/
NewIssue	ftplugin/issue.vim	/^function! s:NewIssue()$/
NewMacro	ftplugin/latex-suite/custommacros.vim	/^function! <SID>NewMacro(...)$/
NewNote	ftplugin/issue.vim	/^function! s:NewNote()$/
Nexplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang			Nexplore	call netrw#Explore(-1,0,0,<q-args>)$/
NextChoice	autoload/lh/buffer/dialog.vim	/^function! s:NextChoice(direction)$/
NextInfoLink	autoload/manpageview.vim	/^fun! s:NextInfoLink()$/
NextValue	autoload/lh/menu.vim	/^function! s:NextValue(Data)$/
Nread	plugin/netrwPlugin.vim	/^com! -count=1 -nargs=*	Nread		call netrw#NetrwSavePosn()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call netrw#NetrwRestorePosn()$/
Nsource	plugin/netrwPlugin.vim	/^com! -nargs=*	        Nsource		call netrw#NetrwSavePosn()<bar>call netrw#NetSource(<f-args>)<bar>call netrw#NetrwRestorePosn()$/
Nwrite	plugin/netrwPlugin.vim	/^com! -range=% -nargs=*	Nwrite		call netrw#NetrwSavePosn()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call netrw#NetrwRestorePosn()$/
OMan	plugin/manpageviewPlugin.vim	/^com! -nargs=* -count=0	OMan  let g:manpageview_winopen="only"   |call manpageview#ManPageView(0,<count>,<f-args>)$/
OmniSyntaxList	autoload/syntaxcomplete.vim	/^function! OmniSyntaxList()$/
OnlyExplorerWindowsOpen	plugin/winmanager.vim	/^function! <SID>OnlyExplorerWindowsOpen()$/
OpenEntry	plugin/winfileexplorer.vim	/^function! s:OpenEntry()$/
OpenEntryPrevWindow	plugin/winfileexplorer.vim	/^function! s:OpenEntryPrevWindow()$/
OpenModuleByRegex	ftplugin/haskell_vimlib.vim	/^command! -buffer -nargs=1 OpenModuleByRegex :call vl#dev#haskell#modules_list_cache_jump#OpenModuleByRegex(<f-args>)<cr>$/
OpenTag	plugin/wintagexplorer.vim	/^function! <SID>OpenTag(split)$/
Opt_type	plugin/ui-functions.vim	/^function! s:Opt_type() " {{{2$/
Option	plugin/ui-functions.vim	/^function! s:Option(name, default) " {{{2$/
PATTERN	autoload/vspec.vim	/^  let PATTERN = '\\v^function \\zs(\\<SNR\\>\\d+_describe__\\w+)\\ze\\('$/
ParseItemStr	autoload/vl/ui/navigation/gfHandler.vim	/^function! s:ParseItemStr(value)$/
ParseKey	autoload/config.vim	/^function! s:ParseKey(line, ind)$/
Path	plugin/winfileexplorer.vim	/^function! s:Path(p)$/
Path	plugin/winmanager.vim	/^function! <SID>Path(p)$/
Path.AbsolutePathFor	plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/
Path.CopyingSupported	plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/
Path.Create	plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/
Path.JoinPathStrings	plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/
Path.New	plugin/NERD_tree.vim	/^function! s:Path.New(path)$/
Path.Slash	plugin/NERD_tree.vim	/^function! s:Path.Slash()$/
Path.WinToUnixPath	plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/
Path._str	plugin/NERD_tree.vim	/^function! s:Path._str()$/
Path._strForCd	plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/
Path._strForEdit	plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/
Path._strForGlob	plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/
Path._strForUI	plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/
Path.bookmarkNames	plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/
Path.cacheDisplayString	plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/
Path.changeToDir	plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/
Path.compareTo	plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/
Path.copy	plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/
Path.copyingWillOverwrite	plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/
Path.delete	plugin/NERD_tree.vim	/^function! s:Path.delete()$/
Path.displayString	plugin/NERD_tree.vim	/^function! s:Path.displayString()$/
Path.equals	plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/
Path.exists	plugin/NERD_tree.vim	/^function! s:Path.exists()$/
Path.extractDriveLetter	plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/
Path.getDir	plugin/NERD_tree.vim	/^function! s:Path.getDir()$/
Path.getLastPathComponent	plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/
Path.getParent	plugin/NERD_tree.vim	/^function! s:Path.getParent()$/
Path.getSortOrderIndex	plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/
Path.ignore	plugin/NERD_tree.vim	/^function! s:Path.ignore()$/
Path.isUnder	plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/
Path.readInfoFromDisk	plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/
Path.refresh	plugin/NERD_tree.vim	/^function! s:Path.refresh()$/
Path.rename	plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/
Path.str	plugin/NERD_tree.vim	/^function! s:Path.str(...)$/
Path.strTrunk	plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/
PerformListing	autoload/netrw.vim	/^fun! s:PerformListing(islocal)$/
PerlSetGlobalVariable	plugin/perl-support.vim	/^function! PerlSetGlobalVariable ( name, default )$/
PerlSetLocalVariable	plugin/perl-support.vim	/^function! PerlSetLocalVariable ( name )$/
Perl_AlignLineEndComm	plugin/perl-support.vim	/^function! Perl_AlignLineEndComm ( mode ) range$/
Perl_ApplyFlag	plugin/perl-support.vim	/^function! Perl_ApplyFlag ( val, flag )$/
Perl_Arguments	plugin/perl-support.vim	/^function! Perl_Arguments ()$/
Perl_BrowseTemplateFiles	plugin/perl-support.vim	/^function! Perl_BrowseTemplateFiles ( type )$/
Perl_CodeSnippet	plugin/perl-support.vim	/^function! Perl_CodeSnippet(mode)$/
Perl_CommentBlock	plugin/perl-support.vim	/^function! Perl_CommentBlock (mode)$/
Perl_CommentToggle	plugin/perl-support.vim	/^function! Perl_CommentToggle ()$/
Perl_CommentToggleRange	plugin/perl-support.vim	/^function! Perl_CommentToggleRange ()$/
Perl_CommentVimModeline	plugin/perl-support.vim	/^function! Perl_CommentVimModeline ()$/
Perl_CreateGuiMenus	plugin/perl-support.vim	/^function! Perl_CreateGuiMenus ()$/
Perl_DateAndTime	plugin/perl-support.vim	/^function! Perl_DateAndTime ( format )$/
Perl_Debugger	plugin/perl-support.vim	/^function! Perl_Debugger ()$/
Perl_EditTemplates	plugin/perl-support.vim	/^function! Perl_EditTemplates ( type )$/
Perl_ExpandSingleMacro	plugin/perl-support.vim	/^function! Perl_ExpandSingleMacro ( val, macroname, replacement )$/
Perl_ExpandUserMacros	plugin/perl-support.vim	/^function! Perl_ExpandUserMacros ( key )$/
Perl_GetLineEndCommCol	plugin/perl-support.vim	/^function! Perl_GetLineEndCommCol ()$/
Perl_Hardcopy	plugin/perl-support.vim	/^function! Perl_Hardcopy (mode)$/
Perl_HelpPerlsupport	plugin/perl-support.vim	/^function! Perl_HelpPerlsupport ()$/
Perl_HighlightJumpTargets	plugin/perl-support.vim	/^function! Perl_HighlightJumpTargets ()$/
Perl_InitializePerlInterface	plugin/perl-support.vim	/^function! Perl_InitializePerlInterface( )$/
Perl_Input	plugin/perl-support.vim	/^function! Perl_Input ( promp, text, ... )$/
Perl_InsertDateAndTime	plugin/perl-support.vim	/^function! Perl_InsertDateAndTime ( format )$/
Perl_InsertMacroValue	plugin/perl-support.vim	/^function! Perl_InsertMacroValue ( key )$/
Perl_InsertTemplate	plugin/perl-support.vim	/^function! Perl_InsertTemplate ( key, ... )$/
Perl_JumpCtrlJ	plugin/perl-support.vim	/^function! Perl_JumpCtrlJ ()$/
Perl_LineEndComment	plugin/perl-support.vim	/^function! Perl_LineEndComment ( comment )$/
Perl_Make	plugin/perl-support.vim	/^function! Perl_Make()$/
Perl_MakeArguments	plugin/perl-support.vim	/^function! Perl_MakeArguments ()$/
Perl_MakeScriptExecutable	plugin/perl-support.vim	/^function! Perl_MakeScriptExecutable ()$/
Perl_MultiLineEndComments	plugin/perl-support.vim	/^function! Perl_MultiLineEndComments ()$/
Perl_OpenFold	plugin/perl-support.vim	/^function! Perl_OpenFold ( mode )$/
Perl_POD	plugin/perl-support.vim	/^function! Perl_POD ( format )$/
Perl_PerlCriticOptions	plugin/perl-support.vim	/^function! Perl_PerlCriticOptions ( ... )$/
Perl_PerlCriticSeverity	plugin/perl-support.vim	/^function! Perl_PerlCriticSeverity ( severity )$/
Perl_PerlCriticSeverityList	plugin/perl-support.vim	/^function!	Perl_PerlCriticSeverityList ( ArgLead, CmdLine, CursorPos )$/
Perl_PerlCriticVerbosity	plugin/perl-support.vim	/^function! Perl_PerlCriticVerbosity ( verbosity )$/
Perl_PerlCriticVerbosityList	plugin/perl-support.vim	/^function!	Perl_PerlCriticVerbosityList ( ArgLead, CmdLine, CursorPos )$/
Perl_PerlSwitches	plugin/perl-support.vim	/^function! Perl_PerlSwitches ()$/
Perl_Perlcritic	plugin/perl-support.vim	/^function! Perl_Perlcritic ()$/
Perl_Perltidy	plugin/perl-support.vim	/^function! Perl_Perltidy (mode)$/
Perl_PodCheck	plugin/perl-support.vim	/^function! Perl_PodCheck ()$/
Perl_ReadTemplates	plugin/perl-support.vim	/^function! Perl_ReadTemplates ( templatefile )$/
Perl_RemoveGuiMenus	plugin/perl-support.vim	/^function! Perl_RemoveGuiMenus ()$/
Perl_RereadTemplates	plugin/perl-support.vim	/^function! Perl_RereadTemplates ()$/
Perl_Run	plugin/perl-support.vim	/^function! Perl_Run ()$/
Perl_SaveWithTimestamp	plugin/perl-support.vim	/^function! Perl_SaveWithTimestamp ()$/
Perl_Settings	plugin/perl-support.vim	/^function! Perl_Settings ()$/
Perl_SyntaxCheck	plugin/perl-support.vim	/^function! Perl_SyntaxCheck ()$/
Perl_Toggle_Gvim_Xterm	plugin/perl-support.vim	/^function! Perl_Toggle_Gvim_Xterm ()$/
Perl_ToolMenu	plugin/perl-support.vim	/^function! Perl_ToolMenu ()$/
Perl_UncommentBlock	plugin/perl-support.vim	/^function! Perl_UncommentBlock ()$/
Perl_XtermSize	plugin/perl-support.vim	/^function! Perl_XtermSize ()$/
Perl_do_tags	plugin/perl-support.vim	/^function! Perl_do_tags( filename, tagfile )$/
Perl_perldoc	plugin/perl-support.vim	/^function! Perl_perldoc()$/
Perl_perldoc_generate_module_list	plugin/perl-support.vim	/^function! Perl_perldoc_generate_module_list()$/
Perl_perldoc_show_module_list	plugin/perl-support.vim	/^function! Perl_perldoc_show_module_list()$/
PersistentVarName	autoload/genutils.vim	/^function! s:PersistentVarName(pluginName, persistentVar)$/
Pexplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang			Pexplore	call netrw#Explore(-2,0,0,<q-args>)$/
PluginsFromDict	autoload/tovl/plugin_management.vim	/^function! s:PluginsFromDict(path, dict, filter)$/
Pop	plugin/SyntaxFolds.vim	/^function! Pop(name)$/
PrefixMatch	autoload/config.vim	/^function! s:PrefixMatch(p,l)$/
PrepareDAG	autoload/lh/graph/tsort.vim	/^function! s:PrepareDAG(dag)$/
PrepareForSearchpair	autoload/tovl/plugins/mappings/various_surround.vim	/^function! s:PrepareForSearchpair(p)$/
PrintError	plugin/winmanager.vim	/^function! PrintError(eline)$/
PrintFavDirs	plugin/winfileexplorer.vim	/^function! s:PrintFavDirs()$/
PrintFormat	autoload/tlib/string.vim	/^function! s:PrintFormat(format, string) "{{{3$/
ProcessHaddockIndexes	ftplugin/haskell_doc.vim	/^function! ProcessHaddockIndexes(location,files)$/
ProcessHaddockIndexes2	ftplugin/haskell_doc.vim	/^function! ProcessHaddockIndexes2(location,files)$/
ProcessTemplate	ftplugin/latex-suite/templates.vim	/^function! <SID>ProcessTemplate()$/
PromptForCommand	ftplugin/latex-suite/envmacros.vim	/^function! PromptForCommand(ask)$/
PromptForEnvironment	ftplugin/latex-suite/envmacros.vim	/^function! PromptForEnvironment(ask)$/
ProtectLetters	ftplugin/latex-suite/main.vim	/^	function! s:ProtectLetters(first, last)$/
Push	plugin/SyntaxFolds.vim	/^function! Push(name, elem)$/
PutBlock	autoload/DrawIt.vim	/^fun! s:PutBlock(block,replace)$/
QArgSplitter	autoload/Align.vim	/^fun! s:QArgSplitter(qarg)$/
QArgSplitter	plugin/cecutil.vim	/^fun! QArgSplitter(qarg)$/
QSortR	autoload/genutils.vim	/^function! s:QSortR(start, end, cmp, direction, accessor, swapper, context)$/
Qualify	ftplugin/haskell_doc.vim	/^function! Qualify()$/
QuickSortList	plugin/libList.vim	/^function QuickSortList( array, beg, end )$/
RAction	ftplugin/r.vim	/^function! RAction(rcmd)$/
RAction	ftplugin/rhelp.vim	/^function! RAction(rcmd)$/
RAction	ftplugin/rnoweb.vim	/^function! RAction(rcmd)$/
RBuildSyntaxFile	ftplugin/r.vim	/^function! RBuildSyntaxFile()$/
RBuildSyntaxFile	ftplugin/rhelp.vim	/^function! RBuildSyntaxFile()$/
RBuildSyntaxFile	ftplugin/rnoweb.vim	/^function! RBuildSyntaxFile()$/
RClearAll	ftplugin/r.vim	/^function! RClearAll()$/
RClearAll	ftplugin/rhelp.vim	/^function! RClearAll()$/
RClearAll	ftplugin/rnoweb.vim	/^function! RClearAll()$/
RCreateMaps	ftplugin/r.vim	/^function! s:RCreateMaps(type, plug, combo, target)$/
RCreateMaps	ftplugin/rhelp.vim	/^function! s:RCreateMaps(type, plug, combo, target)$/
RCreateMaps	ftplugin/rnoweb.vim	/^function! s:RCreateMaps(type, plug, combo, target)$/
RCreateMenuItem	ftplugin/r.vim	/^function! s:RCreateMenuItem(type, label, plug, combo, target)$/
RCreateMenuItem	ftplugin/rhelp.vim	/^function! s:RCreateMenuItem(type, label, plug, combo, target)$/
RCreateMenuItem	ftplugin/rnoweb.vim	/^function! s:RCreateMenuItem(type, label, plug, combo, target)$/
RGetKeyWord	ftplugin/r.vim	/^function! RGetKeyWord()$/
RGetKeyWord	ftplugin/rhelp.vim	/^function! RGetKeyWord()$/
RGetKeyWord	ftplugin/rnoweb.vim	/^function! RGetKeyWord()$/
RM	plugin/cecutil.vim	/^com! -bar -nargs=1 RM	call RestoreMark(<q-args>)$/
RMakePDF	ftplugin/r.vim	/^function! RMakePDF()$/
RMakePDF	ftplugin/rhelp.vim	/^function! RMakePDF()$/
RMakePDF	ftplugin/rnoweb.vim	/^function! RMakePDF()$/
RMan	plugin/manpageviewPlugin.vim	/^com! -nargs=* -count=0	RMan  let g:manpageview_winopen="reuse"  |call manpageview#ManPageView(0,<count>,<f-args>)$/
RQuit	ftplugin/r.vim	/^function! RQuit(how)$/
RQuit	ftplugin/rhelp.vim	/^function! RQuit(how)$/
RQuit	ftplugin/rnoweb.vim	/^function! RQuit(how)$/
RSetWD	ftplugin/r.vim	/^function! RSetWD()$/
RSetWD	ftplugin/rhelp.vim	/^function! RSetWD()$/
RSetWD	ftplugin/rnoweb.vim	/^function! RSetWD()$/
RSourceLines	ftplugin/r.vim	/^function! RSourceLines(lines, e)$/
RSourceLines	ftplugin/rhelp.vim	/^function! RSourceLines(lines, e)$/
RSourceLines	ftplugin/rnoweb.vim	/^function! RSourceLines(lines, e)$/
RStartDebug	ftplugin/r.vim	/^function! RStartDebug()$/
RStartDebug	ftplugin/rhelp.vim	/^function! RStartDebug()$/
RStartDebug	ftplugin/rnoweb.vim	/^function! RStartDebug()$/
RSweave	ftplugin/r.vim	/^function! RSweave()$/
RSweave	ftplugin/rhelp.vim	/^function! RSweave()$/
RSweave	ftplugin/rnoweb.vim	/^function! RSweave()$/
RUpdateObjList	ftplugin/r.vim	/^command! RUpdateObjList :call RBuildSyntaxFile()$/
RUpdateObjList	ftplugin/rhelp.vim	/^command! RUpdateObjList :call RBuildSyntaxFile()$/
RUpdateObjList	ftplugin/rnoweb.vim	/^command! RUpdateObjList :call RBuildSyntaxFile()$/
RWP	plugin/cecutil.vim	/^com! -bar -nargs=0 RWP	call RestoreWinPosn()$/
RWarningMsg	ftplugin/r.vim	/^function! RWarningMsg(wmsg)$/
RWarningMsg	ftplugin/rhelp.vim	/^function! RWarningMsg(wmsg)$/
RWarningMsg	ftplugin/rnoweb.vim	/^function! RWarningMsg(wmsg)$/
RWriteScreenRC	ftplugin/r.vim	/^function! RWriteScreenRC()$/
RWriteScreenRC	ftplugin/rhelp.vim	/^function! RWriteScreenRC()$/
RWriteScreenRC	ftplugin/rnoweb.vim	/^function! RWriteScreenRC()$/
ReadMacro	ftplugin/latex-suite/custommacros.vim	/^function! <SID>ReadMacro(...)$/
ReadTemplate	ftplugin/latex-suite/templates.vim	/^function! <SID>ReadTemplate(...)$/
RecordInFile	autoload/vimball.vim	/^fun! s:RecordInFile(home)$/
RecordInVar	autoload/vimball.vim	/^fun! s:RecordInVar(home,cmd)$/
RecursiveDTSort	autoload/lh/graph/tsort.vim	/^function! s:RecursiveDTSort(dag, start_nodes, results, visited_nodes)$/
RedisplayHelp	autoload/lh/buffer/dialog.vim	/^function! s:RedisplayHelp(dialog)$/
RedrawMacro	ftplugin/latex-suite/custommacros.vim	/^function! RedrawMacro()$/
Ref	autoload/vspec.vim	/^function! Ref(...)  "{{{2$/
RefreshWinManager	plugin/winmanager.vim	/^function! <SID>RefreshWinManager(...)$/
RegexSubstitutions	ftplugin/perl.vim	/^command! -nargs=1 RegexSubstitutions    call perlsupportregex#Perl_PerlRegexSubstitutions(<f-args>)$/
RegisterExplorerGroup	plugin/winmanager.vim	/^function! <SID>RegisterExplorerGroup()$/
RegisteredOnce	autoload/lh/event.vim	/^function! s:RegisteredOnce(cmd, group)$/
RemoteInsert	plugin/remoteOpen.vim	/^function! RemoteInsert(...)$/
RemoteOpen	plugin/remoteOpen.vim	/^function! RemoteOpen(arglist)$/
RemotePathAnalysis	autoload/netrw.vim	/^fun! s:RemotePathAnalysis(dirname)$/
RemoteSystem	autoload/netrw.vim	/^fun! s:RemoteSystem(cmd)$/
RemoveDirectoryFromCache	ftplugin/haskell_vimlib.vim	/^command! -buffer -nargs=0 RemoveDirectoryFromCache :call vl#dev#haskell#modules_list_cache_jump#RemoveDirectoryFromCache()$/
RemoveEdgeFrom	autoload/lh/graph/tsort.vim	/^function! s:RemoveEdgeFrom(dag, node)$/
RemoveListItem	plugin/libList.vim	/^function RemoveListItem( array, index )$/
RemoveSeparators	plugin/winfileexplorer.vim	/^function! s:RemoveSeparators()$/
RenameFile	plugin/winfileexplorer.vim	/^function! s:RenameFile()$/
RepairAltRegister	plugin/winmanager.vim	/^function! <SID>RepairAltRegister()$/
RepeatDefaultKeyMappings	plugin/repeat.vim	/^command! -bang -bar -nargs=0 RepeatDefaultKeyMappings$/
ReplaceDownLeft	autoload/DrawIt.vim	/^fun! s:ReplaceDownLeft()$/
ReplaceDownRight	autoload/DrawIt.vim	/^fun! s:ReplaceDownRight()$/
ReplaceListItem	plugin/libList.vim	/^function ReplaceListItem( array, index, item )$/
ReplaceUnderS	ftplugin/r.vim	/^function! ReplaceUnderS()$/
ReplaceUnderS	ftplugin/rhelp.vim	/^function! ReplaceUnderS()$/
ReplaceUnderS	ftplugin/rnoweb.vim	/^function! ReplaceUnderS()$/
ResetContext	autoload/vspec.vim	/^command! -nargs=0 ResetContext  call vspec#cmd_ResetContext()$/
ResizeAllExplorers	plugin/winmanager.vim	/^function! <SID>ResizeAllExplorers()$/
ResizeWindow	plugin/minibufexpl.vim	/^function! <SID>ResizeWindow()$/
RestoreBufVars	autoload/netrw.vim	/^fun! s:RestoreBufVars()$/
RestoreFileDisplay	plugin/winfileexplorer.vim	/^function! s:RestoreFileDisplay()$/
RestoreMark	plugin/cecutil.vim	/^fun! RestoreMark(markname)$/
RestorePosn	autoload/DrawIt.vim	/^fun! s:RestorePosn()$/
RestoreUserMaps	plugin/cecutil.vim	/^fun! RestoreUserMaps(suffix)$/
RestoreWinPosn	plugin/cecutil.vim	/^fun! RestoreWinPosn(...)$/
RestoreWinVars	autoload/netrw.vim	/^fun! s:RestoreWinVars()$/
RestoreWindowSettings2	autoload/genutils.vim	/^function! s:RestoreWindowSettings2(id)$/
RewriteFormatString	autoload/tlib/string.vim	/^function! s:RewriteFormatString(format, pattern, string) "{{{3$/
RmVimball	plugin/vimballPlugin.vim	/^com! -na=* -complete=dir  RmVimball				call vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()$/
S	plugin/surround.vim	/^            vmap  S    <Plug>VSurround$/
SID	autoload/arpeggio.vim	/^function! s:SID()  "{{{2$/
SID_PREFIX	autoload/ku.vim	/^function! s:SID_PREFIX()$/
SID_PREFIX	autoload/ku/file.vim	/^function! s:SID_PREFIX()$/
SID_PREFIX	autoload/operator/user.vim	/^function! s:SID_PREFIX()$/
SID_PREFIX	autoload/wwwsearch.vim	/^function! s:SID_PREFIX()  $/
SLeftDrag	autoload/DrawIt.vim	/^fun! s:SLeftDrag()$/
SLeftRelease	autoload/DrawIt.vim	/^fun! s:SLeftRelease()$/
SLeftStart	autoload/DrawIt.vim	/^fun! s:SLeftStart()$/
SM	plugin/cecutil.vim	/^com! -bar -nargs=1 SM	call SaveMark(<q-args>)$/
SNR	autoload/genutils.vim	/^function! s:SNR()$/
SVarValueWinManager	plugin/winmanager.vim	/^	command -nargs=* SVarValueWinManager :call <SID>ShowVariableValue(<args>)$/
SWITCH	plugin/ui-functions.vim	/^function! SWITCH(var, ...)$/
SWP	plugin/cecutil.vim	/^com! -bar -nargs=0 SWP	call SaveWinPosn()$/
SanitizeRLine	indent/r.vim	/^function! s:SanitizeRLine(line)$/
SaveBufVars	autoload/netrw.vim	/^fun! s:SaveBufVars()$/
SaveContext	autoload/vspec.vim	/^command! -nargs=0 SaveContext  call vspec#cmd_SaveContext()$/
SaveData	autoload/lh/command.vim	/^function! s:SaveData(Data)$/
SaveData	autoload/lh/menu.vim	/^function! s:SaveData(Data)$/
SaveMark	plugin/cecutil.vim	/^fun! SaveMark(markname)$/
SavePosn	autoload/DrawIt.vim	/^fun! s:SavePosn()$/
SaveUserMaps	plugin/cecutil.vim	/^fun! SaveUserMaps(mapmode,maplead,mapchx,suffix)$/
SaveWinPosn	plugin/cecutil.vim	/^fun! SaveWinPosn(...)$/
SaveWinVars	autoload/netrw.vim	/^fun! s:SaveWinVars()$/
ScratchClose	plugin/scratch.vim	/^command! -bar -nargs=0 ScratchClose  call scratch#close()$/
ScratchEvaluate	plugin/scratch.vim	/^command! -bang -bar -nargs=0 -range ScratchEvaluate$/
ScratchOpen	plugin/scratch.vim	/^command! -bar -nargs=0 ScratchOpen  call scratch#open()$/
Search	autoload/lh/menu.vim	/^function! s:Search(Data, value)$/
SendCmdToScreen	ftplugin/r.vim	/^function! SendCmdToScreen(cmd)$/
SendCmdToScreen	ftplugin/rhelp.vim	/^function! SendCmdToScreen(cmd)$/
SendCmdToScreen	ftplugin/rnoweb.vim	/^function! SendCmdToScreen(cmd)$/
SendFileToR	ftplugin/r.vim	/^function! SendFileToR(e)$/
SendFileToR	ftplugin/rhelp.vim	/^function! SendFileToR(e)$/
SendFileToR	ftplugin/rnoweb.vim	/^function! SendFileToR(e)$/
SendFunctionToR	ftplugin/r.vim	/^function! SendFunctionToR(e, m)$/
SendFunctionToR	ftplugin/rhelp.vim	/^function! SendFunctionToR(e, m)$/
SendFunctionToR	ftplugin/rnoweb.vim	/^function! SendFunctionToR(e, m)$/
SendLineToR	ftplugin/r.vim	/^function! SendLineToR(godown)$/
SendLineToR	ftplugin/rhelp.vim	/^function! SendLineToR(godown)$/
SendLineToR	ftplugin/rnoweb.vim	/^function! SendLineToR(godown)$/
SendMBlockToR	ftplugin/r.vim	/^function! SendMBlockToR(e, m)$/
SendMBlockToR	ftplugin/rhelp.vim	/^function! SendMBlockToR(e, m)$/
SendMBlockToR	ftplugin/rnoweb.vim	/^function! SendMBlockToR(e, m)$/
SendParagraphToR	ftplugin/r.vim	/^function! SendParagraphToR(e, m)$/
SendParagraphToR	ftplugin/rhelp.vim	/^function! SendParagraphToR(e, m)$/
SendParagraphToR	ftplugin/rnoweb.vim	/^function! SendParagraphToR(e, m)$/
SendSelectionToR	ftplugin/r.vim	/^function! SendSelectionToR(e, m)$/
SendSelectionToR	ftplugin/rhelp.vim	/^function! SendSelectionToR(e, m)$/
SendSelectionToR	ftplugin/rnoweb.vim	/^function! SendSelectionToR(e, m)$/
Set	autoload/lh/menu.vim	/^function! s:Set(Data)$/
Set	autoload/vspec.vim	/^function! Set(...)  "{{{2$/
SetBufWinVars	autoload/netrw.vim	/^fun! s:SetBufWinVars()$/
SetCharAt	autoload/DrawIt.vim	/^fun! s:SetCharAt(char, x, y)$/
SetCompletionType	plugin/supertab.vim	/^function! s:SetCompletionType()$/
SetCustomMacrosMenu	ftplugin/latex-suite/custommacros.vim	/^function! <SID>SetCustomMacrosMenu()$/
SetDefaultCompletionType	plugin/supertab.vim	/^function! s:SetDefaultCompletionType()$/
SetDrawIt	autoload/DrawIt.vim	/^fun! SetDrawIt(di_vert,di_horiz,di_plus,di_upleft,di_upright,di_cross,di_ellipse)$/
SetEnvMacrosOptions	ftplugin/latex-suite/envmacros.vim	/^function! <SID>SetEnvMacrosOptions()$/
SetLatexEfm	compiler/tex.vim	/^function! <SID>SetLatexEfm()$/
SetPosn	autoload/DrawIt.vim	/^fun! s:SetPosn(row,col)$/
SetRexDir	autoload/netrw.vim	/^fun! s:SetRexDir(islocal,dirname)$/
SetScrollBind	autoload/tlib/file.vim	/^function! s:SetScrollBind(world) "{{{3$/
SetSuffixesLast	plugin/winfileexplorer.vim	/^function! s:SetSuffixesLast()$/
SetTeXOptions	ftplugin/latex-suite/main.vim	/^function! <SID>SetTeXOptions()$/
SetTeXTarget	ftplugin/latex-suite/compiler.vim	/^function! SetTeXTarget(...)$/
SetTemplateMenu	ftplugin/latex-suite/templates.vim	/^function! <SID>SetTemplateMenu()$/
SetTexCompilerLevel	compiler/tex.vim	/^function! <SID>SetTexCompilerLevel(...)$/
SetUpHotKeys	ftplugin/latex-suite/envmacros.vim	/^	function! <SID>SetUpHotKeys()$/
SetupNetrwStatusLine	autoload/netrw.vim	/^fun! s:SetupNetrwStatusLine(statline)$/
Sexplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Sexplore	call netrw#Explore(<count>,1,0+<bang>0,<q-args>)$/
Sexplore	plugin/winfileexplorer.vim	/^		command -n=? -complete=dir Sexplore :call s:StartExplorer(1, '<a>')$/
Should	autoload/vspec.vim	/^command! -nargs=+ Should$/
ShowAllFiles	plugin/winfileexplorer.vim	/^function! s:ShowAllFiles()$/
ShowBuffers	plugin/minibufexpl.vim	/^function! <SID>ShowBuffers(delBufNum)$/
ShowDirectory	plugin/winfileexplorer.vim	/^function! s:ShowDirectory()$/
ShowStatus	ftplugin/issue.vim	/^function! s:ShowStatus()$/
ShowVariableValue	plugin/winmanager.vim	/^function! <SID>ShowVariableValue(...)$/
SignId	autoload/tlib/signs.vim	/^function! s:SignId(item) "{{{3$/
SkeletonLoad	plugin/skeleton.vim	/^\\ SkeletonLoad$/
SmallProfSort	ftplugin/perl.vim	/^command! -nargs=1 -complete=customlist,perlsupportprofiling#Perl_SmallProfSortList SmallProfSort$/
SmartBS	ftplugin/latex-suite/main.vim	/^	function! s:SmartBS(pat)$/
SmartBS_pat	ftplugin/latex-suite/main.vim	/^	fun! s:SmartBS_pat()$/
SmartDots	ftplugin/latex-suite/main.vim	/^	function! <SID>SmartDots()$/
Snip	plugin/imaps.vim	/^com! -nargs=0 -range Snip :<line1>,<line2>call <SID>Snip()$/
Snip	plugin/imaps.vim	/^function! <SID>Snip() range$/
Sort	plugin/system_utils.vim	/^command! -range=% -nargs=* -complete=function Sort	$/
Sort	plugin/winfileexplorer.vim	/^function! s:Sort(cmp,direction) range$/
SortListing	plugin/winfileexplorer.vim	/^function! s:SortListing(msg)$/
SortR	plugin/system_utils.vim	/^func! s:SortR(start, end, cmp)$/
SortR	plugin/winfileexplorer.vim	/^function! s:SortR(start, end, cmp, direction)$/
SortReverse	plugin/winfileexplorer.vim	/^function! s:SortReverse()$/
SortSelect	plugin/winfileexplorer.vim	/^function! s:SortSelect()$/
Spacer	autoload/DrawIt.vim	/^fun! s:Spacer(debut, fin, cols) range$/
StartBufExplorer	plugin/bufexplorer.vim	/^function! StartBufExplorer(open)$/
StartExplorer	plugin/minibufexpl.vim	/^function! <SID>StartExplorer(sticky, delBufNum)$/
StartExplorer	plugin/winfileexplorer.vim	/^function! s:StartExplorer(split, start_dir)$/
StartR	ftplugin/r.vim	/^function! StartR(whatr)$/
StartR	ftplugin/rhelp.vim	/^function! StartR(whatr)$/
StartR	ftplugin/rnoweb.vim	/^function! StartR(whatr)$/
StartTagsFileDisplay	plugin/wintagexplorer.vim	/^function! <SID>StartTagsFileDisplay()$/
StartWindowsManager	plugin/winmanager.vim	/^function! <SID>StartWindowsManager()$/
StopExplorer	plugin/minibufexpl.vim	/^function! <SID>StopExplorer(sticky)$/
StrCmp	plugin/winfileexplorer.vim	/^function! s:StrCmp(line1, line2, direction)$/
Strcmp	plugin/system_utils.vim	/^func! Strcmp(str1, str2)$/
StringIO	ftplugin/latex-suite/outline.py	/^import StringIO$/
Strlen	autoload/Align.vim	/^fun! s:Strlen(x)$/
Strlen	autoload/netrw.vim	/^fun! s:Strlen(x)$/
Strntok	compiler/tex.vim	/^fun! <SID>Strntok(s, tok, n)$/
Strntok	plugin/SyntaxFolds.vim	/^fun! <SID>Strntok(s, tok, n)$/
Strntok	plugin/imaps.vim	/^fun! <SID>Strntok(s, tok, n)$/
Strntok	plugin/remoteOpen.vim	/^fun! <SID>Strntok(s, tok, n)$/
Strntok	plugin/winmanager.vim	/^fun! <SID>Strntok(s, tok, n)$/
Strntok	plugin/wintagexplorer.vim	/^fun! <SID>Strntok(s, tok, n)$/
Strntok2	plugin/winmanager.vim	/^fun! <SID>Strntok2(s, tok, n)$/
SubmodeRestoreOptions	autoload/submode.vim	/^command! -bar -nargs=0 SubmodeRestoreOptions  call submode#restore_options()$/
Successors_fully_defined	autoload/lh/graph/tsort.vim	/^function! s:Successors_fully_defined(node) dict$/
Successors_lazy	autoload/lh/graph/tsort.vim	/^function! s:Successors_lazy(node) dict$/
SuperTab	plugin/supertab.vim	/^function! s:SuperTab(command)$/
SuperTabAlternateCompletion	plugin/supertab.vim	/^function! SuperTabAlternateCompletion(type)$/
SuperTabHelp	plugin/supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/
SuperTabHelp	plugin/supertab.vim	/^function! s:SuperTabHelp()$/
SuperTabSetCompletionType	plugin/supertab.vim	/^function! SuperTabSetCompletionType(type)$/
SuperTabSetDefaultCompletionType	plugin/supertab.vim	/^function! SuperTabSetDefaultCompletionType(type)$/
SynShow	autoload/lh/syntax.vim	/^command! SynShow echo 'hi<'.lh#syntax#NameAtMark('.',1).'> trans<'$/
SyntaxCSyntaxGroupItems	autoload/syntaxcomplete.vim	/^function! s:SyntaxCSyntaxGroupItems( group_name, syntax_full )$/
SysCopy	plugin/system_utils.vim	/^function! SysCopy(...)$/
SysMkdir	plugin/system_utils.vim	/^function! SysMkdir(...)$/
SysMove	plugin/system_utils.vim	/^function! SysMove(...)$/
SysPrint	plugin/system_utils.vim	/^function! SysPrint(...)$/
SysRemove	plugin/system_utils.vim	/^function! SysRemove(...)$/
SysRmdir	plugin/system_utils.vim	/^function! SysRmdir(...)$/
SysSort	plugin/system_utils.vim	/^function! SysSort(...)$/
SysTouch	plugin/system_utils.vim	/^function! SysTouch(...)$/
SystemDetected	plugin/system_utils.vim	/^function! SystemDetected()$/
TBrowseOutput	plugin/02tlib.vim	/^command! -nargs=1 -complete=command TBrowseOutput call tlib#cmd#BrowseOutput(<q-args>)$/
TCLevel	compiler/tex.vim	/^com! -nargs=? TCLevel :call <SID>SetTexCompilerLevel(<f-args>)$/
TCTarget	ftplugin/latex-suite/compiler.vim	/^com! -nargs=1 TCTarget :call Tex_SetTeXCompilerTarget('Compile', <f-args>)$/
TClearCiteHist	ftplugin/latex-suite/texviewer.vim	/^com! -nargs=0 TClearCiteHist unlet! s:citeSearchHistory$/
TCompileMainFile	ftplugin/latex-suite/compiler.vim	/^command! -nargs=0 TCompileMainFile let b:fragmentFile = 0$/
TCompileThis	ftplugin/latex-suite/compiler.vim	/^command! -nargs=0 TCompileThis let b:fragmentFile = 1$/
TE_ShowVariableValue	plugin/wintagexplorer.vim	/^function! TE_ShowVariableValue(...)$/
THelp	ftplugin/latex-suite/wizardfuncs.vim	/^command! -nargs=0 THelp call <SID>TexHelp()$/
TKeyArg	plugin/02tlib.vim	/^command! -nargs=+ TKeyArg exec tlib#arg#Key([<args>])$/
TLet	plugin/02tlib.vim	/^command! -nargs=+ TLet if !exists(matchstr(<q-args>, '^[^=[:space:]]\\+')) | exec 'let '. <q-args> | endif$/
TLib	autoload/tlib/autocmdgroup.vim	/^augroup TLib$/
TLook	ftplugin/latex-suite/texviewer.vim	/^command -nargs=1 TLook    call Tex_Complete(<q-args>, 'tex')$/
TLookAll	ftplugin/latex-suite/texviewer.vim	/^command -nargs=1 TLookAll call Tex_Complete(<q-args>, 'all')$/
TLookBib	ftplugin/latex-suite/texviewer.vim	/^command -nargs=1 TLookBib call Tex_Complete(<q-args>, 'bib')$/
TMacro	ftplugin/latex-suite/custommacros.vim	/^	com! -complete=custom,Tex_CompleteMacroName -nargs=? TMacro$/
TMacro	ftplugin/latex-suite/custommacros.vim	/^	com! -nargs=? TMacro$/
TMacroDelete	ftplugin/latex-suite/custommacros.vim	/^	com! -complete=custom,Tex_CompleteMacroName -nargs=? TMacroDelete$/
TMacroDelete	ftplugin/latex-suite/custommacros.vim	/^	com! -nargs=? TMacroDelete :call <SID>DeleteMacro(<f-args>)$/
TMacroEdit	ftplugin/latex-suite/custommacros.vim	/^	com! -complete=custom,Tex_CompleteMacroName -nargs=? TMacroEdit$/
TMacroEdit	ftplugin/latex-suite/custommacros.vim	/^	com! -nargs=? TMacroEdit   :call <SID>EditMacro(<f-args>)$/
TMacroNew	ftplugin/latex-suite/custommacros.vim	/^com! -nargs=? TMacroNew :call <SID>NewMacro(<f-args>)$/
TMiniBufExplorer	plugin/minibufexpl.vim	/^  command! TMiniBufExplorer  call <SID>ToggleExplorer()$/
TOVLWrite	autoload/config.vim	/^augroup TOVLWrite$/
TPackage	ftplugin/latex-suite/packages.vim	/^	com! -complete=custom,Tex_CompletePackageName -nargs=* TPackage let s:retVal = Tex_pack_one(<f-args>) <bar> normal! i<C-r>=s:retVal<CR>$/
TPackage	ftplugin/latex-suite/packages.vim	/^	com! -nargs=* TPackage let s:retVal = Tex_pack_one(<f-args>) <bar> normal! i<C-r>=s:retVal<CR>$/
TPackageUpdate	ftplugin/latex-suite/packages.vim	/^com! -nargs=0 TPackageUpdate :silent! call Tex_pack_updateall(1)$/
TPackageUpdateAll	ftplugin/latex-suite/packages.vim	/^com! -nargs=0 TPackageUpdateAll :silent! call Tex_pack_updateall(1)$/
TPartCompile	ftplugin/latex-suite/compiler.vim	/^command! -nargs=0 -range=% TPartCompile :<line1>, <line2> silent! call Tex_PartCompile()$/
TProjectEdit	ftplugin/latex-suite/texproject.vim	/^command! -nargs=0 TProjectEdit  :call <SID>Tex_ProjectEdit()$/
TRequire	plugin/02tlib.vim	/^command! -nargs=+ TRequire let s:require = [<f-args>]$/
TScratch	plugin/02tlib.vim	/^command! -bar -nargs=* -bang TScratch call tlib#scratch#UseScratch({'scratch_split': '<bang>' != '!', <args>})$/
TSection	ftplugin/latex-suite/wizardfuncs.vim	/^com! -nargs=? TSection call Tex_section(<f-args>)$/
TSectionAdvanced	ftplugin/latex-suite/wizardfuncs.vim	/^com! -nargs=? TSectionAdvanced call Tex_section_adv(<f-args>)$/
TTarget	ftplugin/latex-suite/compiler.vim	/^com! -nargs=? TTarget :call SetTeXTarget(<f-args>)$/
TTemplate	ftplugin/latex-suite/templates.vim	/^	com! -complete=custom,Tex_CompleteTemplateName -nargs=? TTemplate :call <SID>ReadTemplate(<f-args>)$/
TTemplate	ftplugin/latex-suite/templates.vim	/^	com! -nargs=? TTemplate :call <SID>ReadTemplate(<f-args>)$/
TVTarget	ftplugin/latex-suite/compiler.vim	/^com! -nargs=1 TVTarget :call Tex_SetTeXCompilerTarget('View', <f-args>)$/
TVarArg	plugin/02tlib.vim	/^command! -nargs=+ TVarArg exec tlib#arg#Let([<args>])$/
TVersion	ftplugin/latex-suite/version.vim	/^com! -nargs=0 TVersion echo Tex_Version()$/
TagList_IsValid	plugin/taglist.vim	/^function! TagList_IsValid()$/
TagList_Start	plugin/taglist.vim	/^function! TagList_Start()$/
TagList_WrapUp	plugin/taglist.vim	/^function! TagList_WrapUp()$/
TagList_title	plugin/taglist.vim	/^    let TagList_title = "__Tag_List__"$/
TagsExplorer_IsPossible	plugin/wintagexplorer.vim	/^function! TagsExplorer_IsPossible()$/
TagsExplorer_IsValid	plugin/wintagexplorer.vim	/^function! TagsExplorer_IsValid()$/
TagsExplorer_Start	plugin/wintagexplorer.vim	/^function! TagsExplorer_Start()$/
TagsExplorer_WrapUp	plugin/wintagexplorer.vim	/^function! TagsExplorer_WrapUp()$/
TeXModeLine_CallBack	macros/let-modeline.vim	/^  function! TeXModeLine_CallBack(var,val)$/
TexFill	ftplugin/latex-suite/smartspace.vim	/^function! s:TexFill(width) $/
TexFoldTextFunction	ftplugin/latex-suite/folding.vim	/^function! TexFoldTextFunction()$/
TexFormatLine	ftplugin/latex-suite/smartspace.vim	/^function! s:TexFormatLine(width, current_line, current_column)    " {{{$/
TexHelp	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:TexHelp()$/
TexNewMathZone	syntax/tex.vim	/^ fun! TexNewMathZone(sfx,mathzone,starform)$/
TexQuotes	ftplugin/latex-suite/main.vim	/^	function! s:TexQuotes()$/
Tex_CD	ftplugin/latex-suite/main.vim	/^function! Tex_CD(dirname)$/
Tex_CatFile	ftplugin/latex-suite/main.vim	/^	function! Tex_CatFile(filename)$/
Tex_ChangeCommand	ftplugin/latex-suite/envmacros.vim	/^	function! Tex_ChangeCommand(isvisual) $/
Tex_ChangeEnvironments	ftplugin/latex-suite/envmacros.vim	/^	function! Tex_ChangeEnvironments() $/
Tex_ChooseFile	ftplugin/latex-suite/main.vim	/^function! Tex_ChooseFile(dialog)$/
Tex_ChooseFromPrompt	ftplugin/latex-suite/main.vim	/^function! Tex_ChooseFromPrompt(dialog, list, sep)$/
Tex_CleanSearchHistory	ftplugin/latex-suite/main.vim	/^function! Tex_CleanSearchHistory()$/
Tex_ClearDebug	ftplugin/latex-suite/main.vim	/^function! Tex_ClearDebug(...)$/
Tex_CloseSmallWindows	ftplugin/latex-suite/texviewer.vim	/^function! Tex_CloseSmallWindows()$/
Tex_Common	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_Common(path1, path2)$/
Tex_CompileLatex	ftplugin/latex-suite/compiler.vim	/^function! Tex_CompileLatex()$/
Tex_CompileMultipleTimes	ftplugin/latex-suite/compiler.vim	/^function! Tex_CompileMultipleTimes()$/
Tex_Complete	ftplugin/latex-suite/texviewer.vim	/^function! Tex_Complete(what, where)$/
Tex_CompleteCiteEntry	ftplugin/latex-suite/texviewer.vim	/^function! Tex_CompleteCiteEntry()$/
Tex_CompleteFileName	ftplugin/latex-suite/texviewer.vim	/^function! Tex_CompleteFileName(filename, ext, root)$/
Tex_CompleteMacroName	ftplugin/latex-suite/custommacros.vim	/^	function! Tex_CompleteMacroName(A,P,L)$/
Tex_CompletePackageName	ftplugin/latex-suite/packages.vim	/^	function! Tex_CompletePackageName(A,P,L)$/
Tex_CompleteRefCiteCustom	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_CompleteRefCiteCustom(type)$/
Tex_CompleteTemplateName	ftplugin/latex-suite/templates.vim	/^	function! Tex_CompleteTemplateName(A,P,L)$/
Tex_CompleteWord	ftplugin/latex-suite/texviewer.vim	/^function! Tex_CompleteWord(completeword)$/
Tex_CounterMenus	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_CounterMenus(submenu, rhs)$/
Tex_CreatePrompt	ftplugin/latex-suite/main.vim	/^function! Tex_CreatePrompt(promptList, cols, sep)$/
Tex_Debug	compiler/tex.vim	/^	function! Tex_Debug(...)$/
Tex_Debug	ftplugin/latex-suite/main.vim	/^function! Tex_Debug(str, ...)$/
Tex_DeleteFile	ftplugin/latex-suite/main.vim	/^	function! Tex_DeleteFile(filename)$/
Tex_DimMenus	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_DimMenus(submenu, rhs)$/
Tex_DisplayBibList	ftplugin/latex-suite/texviewer.vim	/^function! Tex_DisplayBibList()$/
Tex_DoCommand	ftplugin/latex-suite/envmacros.vim	/^function! Tex_DoCommand(isvisual)$/
Tex_DoCompletion	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_DoCompletion(texcommand)$/
Tex_DoEnvironment	ftplugin/latex-suite/envmacros.vim	/^function! Tex_DoEnvironment(...)$/
Tex_EchoBibShortcuts	ftplugin/latex-suite/texviewer.vim	/^function! Tex_EchoBibShortcuts()$/
Tex_EnvMacros	ftplugin/latex-suite/envmacros.vim	/^function! <SID>Tex_EnvMacros(lhs, submenu, name)$/
Tex_EscapeForGrep	ftplugin/latex-suite/main.vim	/^function! Tex_EscapeForGrep(string)$/
Tex_EscapeSpaces	ftplugin/latex-suite/main.vim	/^function! Tex_EscapeSpaces(path)$/
Tex_FastEnvironmentInsert	ftplugin/latex-suite/envmacros.vim	/^	function! Tex_FastEnvironmentInsert(isvisual)$/
Tex_FindBibFiles	ftplugin/latex-suite/texviewer.vim	/^function! Tex_FindBibFiles()$/
Tex_FindFile	ftplugin/latex-suite/main.vim	/^function! Tex_FindFile(fname, path, suffixesadd)$/
Tex_FindInRtp	ftplugin/latex-suite/main.vim	/^function! Tex_FindInRtp(filename, directory, ...)$/
Tex_FinishOutlineCompletion	ftplugin/latex-suite/texviewer.vim	/^function! Tex_FinishOutlineCompletion()$/
Tex_FoldSections	ftplugin/latex-suite/folding.vim	/^function! Tex_FoldSections(lst, endpat)$/
Tex_FontDiacritics	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_FontDiacritics(name, rhs)$/
Tex_FontFamily	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_FontFamily(font,fam)$/
Tex_FontSize	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_FontSize(name)$/
Tex_Fontfont	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_Fontfont(desc, lhs)$/
Tex_ForwardSearchLaTeX	ftplugin/latex-suite/compiler.vim	/^function! Tex_ForwardSearchLaTeX()$/
Tex_GetAuxFile	ftplugin/latex-suite/compiler.vim	/^function! Tex_GetAuxFile(auxFile)$/
Tex_GetCurrentEnv	ftplugin/latex-suite/envmacros.vim	/^function! Tex_GetCurrentEnv()$/
Tex_GetErrorList	ftplugin/latex-suite/main.vim	/^function! Tex_GetErrorList()$/
Tex_GetMainFileName	ftplugin/latex-suite/main.vim	/^function! Tex_GetMainFileName(...)$/
Tex_GetPos	ftplugin/latex-suite/main.vim	/^function! Tex_GetPos()$/
Tex_GetTempName	ftplugin/latex-suite/main.vim	/^function! Tex_GetTempName(dirname)$/
Tex_GetVarValue	ftplugin/latex-suite/main.vim	/^function! Tex_GetVarValue(varname, ...)$/
Tex_GoToLocation	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_GoToLocation()$/
Tex_GotoErrorLocation	ftplugin/latex-suite/compiler.vim	/^function! Tex_GotoErrorLocation(filename)$/
Tex_GotoTempFile	ftplugin/latex-suite/main.vim	/^function! Tex_GotoTempFile()$/
Tex_Grep	ftplugin/latex-suite/main.vim	/^function! Tex_Grep(string, where)$/
Tex_GrepHelper	ftplugin/latex-suite/texviewer.vim	/^function! Tex_GrepHelper(prefix, what)$/
Tex_Grepadd	ftplugin/latex-suite/main.vim	/^function! Tex_Grepadd(string, where)$/
Tex_HandleBibShortcuts	ftplugin/latex-suite/texviewer.vim	/^function! Tex_HandleBibShortcuts(command)$/
Tex_IncrementNumber	ftplugin/latex-suite/main.vim	/^function! Tex_IncrementNumber(increm)$/
Tex_InsSecAdv	ftplugin/latex-suite/wizardfuncs.vim	/^function! Tex_InsSecAdv(structure)$/
Tex_InsertItem	ftplugin/latex-suite/envmacros.vim	/^function! Tex_InsertItem()$/
Tex_IsPresentInFile	ftplugin/latex-suite/main.vim	/^	function! Tex_IsPresentInFile(regexp, filename)$/
Tex_LeftRight	ftplugin/latex-suite/brackets.vim	/^function! Tex_LeftRight()$/
Tex_MakeMap	ftplugin/latex-suite/main.vim	/^function! Tex_MakeMap(lhs, rhs, mode, extraargs)$/
Tex_MakeSubmenu	ftplugin/latex-suite/packages.vim	/^function! Tex_MakeSubmenu(menuList, mainMenuName, $/
Tex_MathBF	ftplugin/latex-suite/brackets.vim	/^function! Tex_MathBF()$/
Tex_MathCal	ftplugin/latex-suite/brackets.vim	/^function! Tex_MathCal()$/
Tex_MathMenuRemove	ftplugin/latex-suite/mathmacros-utf.vim	/^function! Tex_MathMenuRemove()$/
Tex_MathMenuRemove	ftplugin/latex-suite/mathmacros.vim	/^function! Tex_MathMenuRemove()$/
Tex_MenuConfigure	ftplugin/latex-suite/texmenuconf.vim	/^function! Tex_MenuConfigure(type, action) " {{{$/
Tex_NormalizePath	ftplugin/latex-suite/texviewer.vim	/^function! Tex_NormalizePath(path)$/
Tex_PartCompile	ftplugin/latex-suite/compiler.vim	/^function! Tex_PartCompile() range$/
Tex_PositionPreviewWindow	ftplugin/latex-suite/compiler.vim	/^function! Tex_PositionPreviewWindow(filename)$/
Tex_PrintDebug	ftplugin/latex-suite/main.vim	/^function! Tex_PrintDebug(...)$/
Tex_ProcessPackageCommand	ftplugin/latex-suite/packages.vim	/^function! Tex_ProcessPackageCommand(command)$/
Tex_ProjectEdit	ftplugin/latex-suite/texproject.vim	/^function! s:Tex_ProjectEdit()$/
Tex_ProjectLoad	ftplugin/latex-suite/texproject.vim	/^function! Tex_ProjectLoad()$/
Tex_PromptForCompletion	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_PromptForCompletion(texcommand,ask)$/
Tex_PutCommand	ftplugin/latex-suite/envmacros.vim	/^function! Tex_PutCommand(com, isvisual)$/
Tex_PutEnvironment	ftplugin/latex-suite/envmacros.vim	/^function! Tex_PutEnvironment(env)$/
Tex_PutLeftRight	ftplugin/latex-suite/brackets.vim	/^function! Tex_PutLeftRight()$/
Tex_RelPath	ftplugin/latex-suite/texviewer.vim	/^function! Tex_RelPath(explfilename,texfilename)$/
Tex_RemoveElementMenus	ftplugin/latex-suite/elementmacros.vim	/^	function! Tex_RemoveElementMenus()$/
Tex_RemoveTempFiles	ftplugin/latex-suite/compiler.vim	/^function! Tex_RemoveTempFiles()$/
Tex_ResetIncrementNumber	ftplugin/latex-suite/main.vim	/^function! Tex_ResetIncrementNumber(val)$/
Tex_RunLaTeX	ftplugin/latex-suite/compiler.vim	/^function! Tex_RunLaTeX()$/
Tex_ScanFileForCite	ftplugin/latex-suite/texviewer.vim	/^function! Tex_ScanFileForCite(prefix)$/
Tex_ScanFileForLabels	ftplugin/latex-suite/texviewer.vim	/^function! Tex_ScanFileForLabels(prefix)$/
Tex_ScanForPackages	ftplugin/latex-suite/packages.vim	/^function! Tex_ScanForPackages(...)$/
Tex_SectionMacros	ftplugin/latex-suite/envmacros.vim	/^function! <SID>Tex_SectionMacros(lhs, name)$/
Tex_SetBracketingMaps	ftplugin/latex-suite/brackets.vim	/^function! <SID>Tex_SetBracketingMaps()$/
Tex_SetCompilerMaps	ftplugin/latex-suite/compiler.vim	/^function! <SID>Tex_SetCompilerMaps()$/
Tex_SetFastCommandMaps	ftplugin/latex-suite/envmacros.vim	/^function! Tex_SetFastCommandMaps()$/
Tex_SetFastEnvironmentMaps	ftplugin/latex-suite/envmacros.vim	/^function! Tex_SetFastEnvironmentMaps()$/
Tex_SetFoldOptions	ftplugin/latex-suite/folding.vim	/^function! Tex_SetFoldOptions()$/
Tex_SetItemMaps	ftplugin/latex-suite/envmacros.vim	/^function! Tex_SetItemMaps()$/
Tex_SetPos	ftplugin/latex-suite/main.vim	/^function! Tex_SetPos(pos)$/
Tex_SetTeXCompilerTarget	ftplugin/latex-suite/compiler.vim	/^function! Tex_SetTeXCompilerTarget(type, target)$/
Tex_SetTexViewerMaps	ftplugin/latex-suite/texviewer.vim	/^function! Tex_SetTexViewerMaps()$/
Tex_SetupBibSyntax	ftplugin/latex-suite/texviewer.vim	/^function! Tex_SetupBibSyntax()$/
Tex_SetupCWindow	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_SetupCWindow(...)$/
Tex_SetupErrorWindow	ftplugin/latex-suite/compiler.vim	/^function! Tex_SetupErrorWindow()$/
Tex_SetupFileCompletion	ftplugin/latex-suite/texviewer.vim	/^function! Tex_SetupFileCompletion(accept, reject, ext, dir, root)$/
Tex_SetupOutlineSyntax	ftplugin/latex-suite/texviewer.vim	/^function! Tex_SetupOutlineSyntax()$/
Tex_ShowVariableValue	ftplugin/latex-suite/main.vim	/^function! Tex_ShowVariableValue(...)$/
Tex_SpecialMacros	ftplugin/latex-suite/envmacros.vim	/^function! <SID>Tex_SpecialMacros(lhs, submenu, name, irhs, ...)$/
Tex_StartCiteCompletion	ftplugin/latex-suite/texviewer.vim	/^function! Tex_StartCiteCompletion()$/
Tex_StartOutlineCompletion	ftplugin/latex-suite/texviewer.vim	/^function! Tex_StartOutlineCompletion()$/
Tex_Strntok	ftplugin/latex-suite/main.vim	/^fun! Tex_Strntok(s, tok, n)$/
Tex_SyncPreviewWindow	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_SyncPreviewWindow()$/
Tex_UpdatePreviewWindow	ftplugin/latex-suite/compiler.vim	/^function! Tex_UpdatePreviewWindow(filename)$/
Tex_VariousMenus	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_VariousMenus(desc, lhs)$/
Tex_Version	ftplugin/latex-suite/version.vim	/^function! Tex_Version()$/
Tex_ViewLaTeX	ftplugin/latex-suite/compiler.vim	/^function! Tex_ViewLaTeX()$/
Tex_VisSecAdv	ftplugin/latex-suite/wizardfuncs.vim	/^function! Tex_VisSecAdv(section)$/
Tex_description	ftplugin/latex-suite/envmacros.vim	/^function! Tex_description(env)$/
Tex_document	ftplugin/latex-suite/envmacros.vim	/^function! Tex_document(env)$/
Tex_eqnarray	ftplugin/latex-suite/envmacros.vim	/^function! Tex_eqnarray(env)$/
Tex_figure	ftplugin/latex-suite/envmacros.vim	/^function! Tex_figure(env)$/
Tex_itemize	ftplugin/latex-suite/envmacros.vim	/^function! Tex_itemize(env)$/
Tex_list	ftplugin/latex-suite/envmacros.vim	/^function! Tex_list(env)$/
Tex_minipage	ftplugin/latex-suite/envmacros.vim	/^function! Tex_minipage(env)$/
Tex_pack	ftplugin/latex-suite/packages.vim	/^function! Tex_pack(pack)$/
Tex_pack_check	ftplugin/latex-suite/packages.vim	/^function! Tex_pack_check(package)$/
Tex_pack_one	ftplugin/latex-suite/packages.vim	/^function! Tex_pack_one(...)$/
Tex_pack_supp_menu	ftplugin/latex-suite/packages.vim	/^function! Tex_pack_supp_menu()$/
Tex_pack_uncheck	ftplugin/latex-suite/packages.vim	/^function! Tex_pack_uncheck(package)$/
Tex_pack_updateall	ftplugin/latex-suite/packages.vim	/^function! Tex_pack_updateall(force)$/
Tex_package_from_line	ftplugin/latex-suite/envmacros.vim	/^	function! Tex_package_from_line()$/
Tex_section	ftplugin/latex-suite/wizardfuncs.vim	/^function! Tex_section(...) "{{{$/
Tex_section_adv	ftplugin/latex-suite/wizardfuncs.vim	/^function! Tex_section_adv(...) "{{{$/
Tex_section_call	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:Tex_section_call(section_name) "{{{$/
Tex_section_curr_rel_value	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:Tex_section_curr_rel_value(sec_arg, last_section_value) "{{{$/
Tex_section_curr_value	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:Tex_section_curr_value(sec_arg) "{{{$/
Tex_section_detection	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:Tex_section_detection() "{{{$/
Tex_section_name	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:Tex_section_name(section_value) "{{{$/
Tex_shortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^function! Tex_shortcuts(...)$/
Tex_table	ftplugin/latex-suite/envmacros.vim	/^function! Tex_table(env)$/
Tex_tabular	ftplugin/latex-suite/envmacros.vim	/^function! Tex_tabular(env)$/
Tex_thebibliography	ftplugin/latex-suite/envmacros.vim	/^function! Tex_thebibliography(env)$/
Texplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar       -count=0 -complete=dir	Texplore	call netrw#Explore(<count>,0,6        ,<q-args>)$/
Tlist	plugin/taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/
TlistAddFiles	plugin/taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/
TlistAddFilesRecursive	plugin/taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/
TlistClose	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/
TlistDebug	plugin/taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/
TlistHighlightTag	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/
TlistLock	plugin/taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/
TlistMessages	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/
TlistOpen	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/
TlistSessionLoad	plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/
TlistSessionSave	plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/
TlistShowPrototype	plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/
TlistShowTag	plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/
TlistSync	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/
TlistToggle	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/
TlistUndebug	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/
TlistUnlock	plugin/taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/
TlistUpdate	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/
Tlist_Add_Files	plugin/taglist.vim	/^function! s:Tlist_Add_Files(...)$/
Tlist_Add_Files_Recursive	plugin/taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/
Tlist_Auto_Highlight_Tag	plugin/taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/
Tlist_Auto_Open	plugin/taglist.vim	/^        let Tlist_Auto_Open = 0$/
Tlist_Auto_Update	plugin/taglist.vim	/^        let Tlist_Auto_Update = 1$/
Tlist_Ballon_Expr	plugin/taglist.vim	/^function! Tlist_Ballon_Expr()$/
Tlist_Buffer_Removed	plugin/taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/
Tlist_Change_Sort	plugin/taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/
Tlist_Close_On_Select	plugin/taglist.vim	/^        let Tlist_Close_On_Select = 0$/
Tlist_Compact_Format	plugin/taglist.vim	/^        let Tlist_Compact_Format = 0$/
Tlist_Ctags_Cmd	ftplugin/latex-suite/main.vim	/^		let Tlist_Ctags_Cmd = s:tex_ctags ." --langdef=tex --langmap=tex:.tex.ltx.latex"$/
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/
Tlist_Debug_Disable	plugin/taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/
Tlist_Debug_Enable	plugin/taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/
Tlist_Debug_Show	plugin/taglist.vim	/^function! s:Tlist_Debug_Show()$/
Tlist_Detect_Filetype	plugin/taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/
Tlist_Discard_FileInfo	plugin/taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/
Tlist_Discard_TagInfo	plugin/taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/
Tlist_Display_Prototype	plugin/taglist.vim	/^        let Tlist_Display_Prototype = 0$/
Tlist_Display_Tag_Scope	plugin/taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/
Tlist_Enable_Fold_Column	plugin/taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/
Tlist_Exe_Cmd_No_Acmds	plugin/taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/
Tlist_Exit_OnlyWindow	plugin/taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/
Tlist_Extract_Tag_Scope	plugin/taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/
Tlist_Extract_Tagtype	plugin/taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/
Tlist_FileType_Init	plugin/taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/
Tlist_File_Fold_Auto_Close	plugin/taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/
Tlist_Find_Nearest_Tag_Idx	plugin/taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/
Tlist_GainFocus_On_ToggleOpen	plugin/taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/
Tlist_Get_Buffer_Filetype	plugin/taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/
Tlist_Get_File_Index	plugin/taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/
Tlist_Get_Tag_Linenum	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/
Tlist_Get_Tag_Prototype	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/
Tlist_Get_Tag_Prototype_By_Line	plugin/taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/
Tlist_Get_Tag_SearchPat	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/
Tlist_Get_Tag_Type_By_Tag	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/
Tlist_Get_Tagname_By_Line	plugin/taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/
Tlist_Highlight_Tag_On_BufEnter	plugin/taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/
Tlist_Inc_Winwidth	plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/
Tlist_Inc_Winwidth	plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/
Tlist_Init_File	plugin/taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/
Tlist_Log_Msg	plugin/taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/
Tlist_Max_Submenu_Items	plugin/taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/
Tlist_Max_Tag_Length	plugin/taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/
Tlist_Menu_Add_Base_Menu	plugin/taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/
Tlist_Menu_File_Refresh	plugin/taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/
Tlist_Menu_Get_Tag_Type_Cmd	plugin/taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/
Tlist_Menu_Init	plugin/taglist.vim	/^function! s:Tlist_Menu_Init()$/
Tlist_Menu_Jump_To_Tag	plugin/taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/
Tlist_Menu_Refresh	plugin/taglist.vim	/^function! s:Tlist_Menu_Refresh()$/
Tlist_Menu_Remove_File	plugin/taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/
Tlist_Menu_Update_File	plugin/taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/
Tlist_Parse_Tagline	plugin/taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/
Tlist_Post_Close_Cleanup	plugin/taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/
Tlist_Process_Dir	plugin/taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/
Tlist_Process_File	plugin/taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/
Tlist_Process_File_Always	plugin/taglist.vim	/^        let Tlist_Process_File_Always = 0$/
Tlist_Process_Filelist	plugin/taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/
Tlist_Refresh	plugin/taglist.vim	/^function! s:Tlist_Refresh()$/
Tlist_Refresh_Folds	plugin/taglist.vim	/^function! s:Tlist_Refresh_Folds()$/
Tlist_Remove_File	plugin/taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/
Tlist_Session_Load	plugin/taglist.vim	/^function! s:Tlist_Session_Load(...)$/
Tlist_Session_Save	plugin/taglist.vim	/^function! s:Tlist_Session_Save(...)$/
Tlist_Set_App	plugin/taglist.vim	/^function! Tlist_Set_App(name)$/
Tlist_Show_Menu	plugin/taglist.vim	/^        let Tlist_Show_Menu = 0$/
Tlist_Show_One_File	plugin/taglist.vim	/^        let Tlist_Show_One_File = 0$/
Tlist_Skip_File	plugin/taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/
Tlist_Sort_Type	plugin/taglist.vim	/^        let Tlist_Sort_Type = 'order'$/
Tlist_Update_Current_File	plugin/taglist.vim	/^function! s:Tlist_Update_Current_File()$/
Tlist_Update_File	plugin/taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/
Tlist_Update_Remove_List	plugin/taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/
Tlist_Use_Horiz_Window	plugin/taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/
Tlist_Use_Right_Window	plugin/taglist.vim	/^        let Tlist_Use_Right_Window = 0$/
Tlist_Use_SingleClick	plugin/taglist.vim	/^        let Tlist_Use_SingleClick = 0$/
Tlist_User_Removed_File	plugin/taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/
Tlist_Vim_Session_Load	plugin/taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/
Tlist_Warning_Msg	plugin/taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/
Tlist_WinHeight	plugin/taglist.vim	/^        let Tlist_WinHeight = 10$/
Tlist_WinWidth	plugin/taglist.vim	/^        let Tlist_WinWidth = 30$/
Tlist_Window_Check_Auto_Open	plugin/taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/
Tlist_Window_Check_Width	plugin/taglist.vim	/^function! s:Tlist_Window_Check_Width()$/
Tlist_Window_Close	plugin/taglist.vim	/^function! s:Tlist_Window_Close()$/
Tlist_Window_Create	plugin/taglist.vim	/^function! s:Tlist_Window_Create()$/
Tlist_Window_Display_Help	plugin/taglist.vim	/^function! s:Tlist_Window_Display_Help()$/
Tlist_Window_Exit_Only_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/
Tlist_Window_Get_File_Index_By_Linenum	plugin/taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/
Tlist_Window_Get_Tag_Index	plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/
Tlist_Window_Get_Tag_Type_By_Linenum	plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/
Tlist_Window_Goto_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/
Tlist_Window_Highlight_Line	plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/
Tlist_Window_Highlight_Tag	plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/
Tlist_Window_Init	plugin/taglist.vim	/^function! s:Tlist_Window_Init()$/
Tlist_Window_Jump_To_Tag	plugin/taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/
Tlist_Window_Mark_File_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/
Tlist_Window_Move_To_File	plugin/taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/
Tlist_Window_Open	plugin/taglist.vim	/^function! s:Tlist_Window_Open()$/
Tlist_Window_Open_File	plugin/taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/
Tlist_Window_Open_File_Fold	plugin/taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/
Tlist_Window_Refresh	plugin/taglist.vim	/^function! s:Tlist_Window_Refresh()$/
Tlist_Window_Refresh_File	plugin/taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/
Tlist_Window_Remove_File_From_Display	plugin/taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/
Tlist_Window_Show_Info	plugin/taglist.vim	/^function! s:Tlist_Window_Show_Info()$/
Tlist_Window_Toggle	plugin/taglist.vim	/^function! s:Tlist_Window_Toggle()$/
Tlist_Window_Toggle_Help_Text	plugin/taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/
Tlist_Window_Update_File	plugin/taglist.vim	/^function! s:Tlist_Window_Update_File()$/
Tlist_Window_Update_Line_Offsets	plugin/taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/
Tlist_Window_Zoom	plugin/taglist.vim	/^function! s:Tlist_Window_Zoom()$/
ToItemStr	autoload/vl/ui/navigation/gfHandler.vim	/^function! s:ToItemStr(value)$/
ToggleExplorer	plugin/minibufexpl.vim	/^function! <SID>ToggleExplorer()$/
ToggleHelp	autoload/lh/buffer/dialog.vim	/^function! s:ToggleHelp(bufferId)$/
ToggleHelp	plugin/winfileexplorer.vim	/^function! s:ToggleHelp()$/
ToggleLongList	plugin/winfileexplorer.vim	/^function! s:ToggleLongList()$/
ToggleTag	autoload/lh/buffer/dialog.vim	/^function! s:ToggleTag(lineNum)$/
ToggleWindowsManager	plugin/winmanager.vim	/^function! <SID>ToggleWindowsManager()$/
TreeDirNode.AbsoluteTreeRoot	plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/
TreeDirNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/
TreeDirNode.New	plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/
TreeDirNode._initChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/
TreeDirNode._openRecursively2	plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/
TreeDirNode.activate	plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/
TreeDirNode.addChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/
TreeDirNode.close	plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/
TreeDirNode.closeChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/
TreeDirNode.createChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/
TreeDirNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/
TreeDirNode.getChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/
TreeDirNode.getChildByIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/
TreeDirNode.getChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/
TreeDirNode.getChildIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/
TreeDirNode.getVisibleChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/
TreeDirNode.getVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/
TreeDirNode.hasVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/
TreeDirNode.open	plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/
TreeDirNode.openExplorer	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/
TreeDirNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/
TreeDirNode.openRecursively	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/
TreeDirNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/
TreeDirNode.removeChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/
TreeDirNode.reveal	plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/
TreeDirNode.sortChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/
TreeDirNode.toggleOpen	plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/
TreeDirNode.transplantChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/
TreeFileNode.GetRootForTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/
TreeFileNode.GetRootLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/
TreeFileNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/
TreeFileNode.New	plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/
TreeFileNode._renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/
TreeFileNode.activate	plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/
TreeFileNode.bookmark	plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/
TreeFileNode.cacheParent	plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/
TreeFileNode.clearBoomarks	plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/
TreeFileNode.copy	plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/
TreeFileNode.delete	plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/
TreeFileNode.displayString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/
TreeFileNode.equals	plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/
TreeFileNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/
TreeFileNode.findOpenDirSiblingWithVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/
TreeFileNode.findSibling	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/
TreeFileNode.getLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/
TreeFileNode.isRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/
TreeFileNode.isVisible	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/
TreeFileNode.makeRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/
TreeFileNode.open	plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/
TreeFileNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/
TreeFileNode.openSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/
TreeFileNode.openVSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/
TreeFileNode.putCursorHere	plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/
TreeFileNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/
TreeFileNode.rename	plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/
TreeFileNode.renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/
TreeListMove	autoload/netrw.vim	/^fun! s:TreeListMove(dir)$/
Tshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^command! -nargs=? Tshortcuts call Tex_shortcuts(<f-args>)<CR>$/
UMiniBufExplorer	plugin/minibufexpl.vim	/^  command! UMiniBufExplorer  call <SID>AutoUpdate(-1)$/
UnMakeRMenu	ftplugin/r.vim	/^function! UnMakeRMenu()$/
UnMakeRMenu	ftplugin/rhelp.vim	/^function! UnMakeRMenu()$/
UnMakeRMenu	ftplugin/rnoweb.vim	/^function! UnMakeRMenu()$/
Uniq	plugin/system_utils.vim	/^command! -range=% -nargs=0 Uniq	<line1>,<line2>call EmuleUniq()$/
UniqValue	autoload/tlib/list.vim	/^function! s:UniqValue(value) "{{{3$/
UnixLayerInstalled	plugin/system_utils.vim	/^function! UnixLayerInstalled()$/
UpdateBuffersMenu	autoload/netrw.vim	/^fun! s:UpdateBuffersMenu()$/
UpdateHeader	plugin/winfileexplorer.vim	/^function! s:UpdateHeader()$/
UpdateMenu	autoload/lh/menu.vim	/^function! s:UpdateMenu(Menu, text, command)$/
UpdateModuleCacheAll	ftplugin/haskell_vimlib.vim	/^command! -buffer -nargs=0 UpdateModuleCacheAll :call vl#dev#haskell#modules_list_cache_jump#RescanAll()<cr>$/
UpdateWithLastMod	plugin/ferallastchange.vim	/^function s:UpdateWithLastMod() " {{{$/
UseBufWinVars	autoload/netrw.vim	/^fun! s:UseBufWinVars()$/
UseVimball	plugin/vimballPlugin.vim	/^com! -na=? -complete=dir  UseVimball			call vimball#Vimball(1,<f-args>)$/
VEMan	plugin/manpageviewPlugin.vim	/^com! -nargs=* -count=0	VEMan let g:manpageview_winopen="vsplit" |call manpageview#ManPageView(0,<count>,<f-args>)$/
VEnclose	plugin/imaps.vim	/^function! VEnclose(vstart, vend, VStart, VEnd)$/
VMAP	macros/menu-map.vim	/^command! -nargs=+           VMAP     vmap       <args>$/
VMan	plugin/manpageviewPlugin.vim	/^com! -nargs=* -count=0	VMan  let g:manpageview_winopen="vsplit="|call manpageview#ManPageView(0,<count>,<f-args>)$/
VNOREMAP	macros/menu-map.vim	/^command! -nargs=+       VNOREMAP vnoremap       <args>$/
VcsiAdd	plugin/vcsi.vim	/^command! -bar -complete=file -count=0 -nargs=* VcsiAdd$/
VcsiAmend	plugin/vcsi.vim	/^command! -bar -complete=file -count=0 -nargs=* VcsiAmend$/
VcsiCommit	plugin/vcsi.vim	/^command! -bar -complete=file -count=0 -nargs=* VcsiCommit$/
VcsiDefaultKeyMappings	plugin/vcsi.vim	/^command! -bang -bar -nargs=0 VcsiDefaultKeyMappings$/
VcsiDiff	plugin/vcsi.vim	/^command! -bar -complete=file -count=0 -nargs=* VcsiDiff$/
VcsiLog	plugin/vcsi.vim	/^command! -bar -complete=file -count=0 -nargs=* VcsiLog$/
VcsiRemove	plugin/vcsi.vim	/^command! -bang -bar -complete=file -count=0 -nargs=* VcsiRemove$/
VcsiRevert	plugin/vcsi.vim	/^command! -bar -complete=file -count=0 -nargs=* VcsiRevert$/
VcsiStatus	plugin/vcsi.vim	/^command! -bar -complete=file -count=0 -nargs=* VcsiStatus$/
Verbose	autoload/lh/function.vim	/^function! s:Verbose(expr)$/
Vexplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Vexplore	call netrw#Explore(<count>,1,4+<bang>0,<q-args>)$/
VimRPlugin	ftplugin/r.vim	/^augroup VimRPlugin$/
VimRPlugin	ftplugin/rhelp.vim	/^augroup VimRPlugin$/
VimRPlugin	ftplugin/rnoweb.vim	/^augroup VimRPlugin$/
VimballList	plugin/vimballPlugin.vim	/^com! -na=0                VimballList			call vimball#Vimball(0)$/
Visited	autoload/lh/graph/tsort.vim	/^function! s:Visited(node) dict $/
WHICH	plugin/ui-functions.vim	/^function! WHICH(fn, prompt, ...)$/
WMClose	plugin/winmanager.vim	/^	command -nargs=0 WMClose :silent call <SID>CloseWindowsManager()$/
WMToggle	plugin/winmanager.vim	/^	command -nargs=0 WMToggle :silent call <SID>ToggleWindowsManager()$/
WManager	plugin/winmanager.vim	/^	command -nargs=0 WManager :silent call <SID>StartWindowsManager()$/
WhenTagged	autoload/tovl/featureset.vim	/^fun! s:WhenTagged(buffer, tags, f, d)$/
WhichMemberVisible	plugin/winmanager.vim	/^function! <SID>WhichMemberVisible(i)$/
Widen	plugin/narrow.vim	/^command -bar Widen  call narrow#Widen()$/
WillComplete	plugin/supertab.vim	/^function! s:WillComplete()$/
WinManagerFileEdit	plugin/winmanager.vim	/^function! WinManagerFileEdit(bufName, split)$/
WinManagerForceReSize	plugin/winmanager.vim	/^function! WinManagerForceReSize(explName)$/
WinManagerGetLastEditedFile	plugin/winmanager.vim	/^function! WinManagerGetLastEditedFile(...)$/
WinManagerGotoNextInGroup	plugin/winmanager.vim	/^	command -nargs=1 WinManagerGotoNextInGroup :silent call <SID>GotoNextExplorerInGroup(<args>)$/
WinManagerGotoPrevInGroup	plugin/winmanager.vim	/^	command -nargs=1 WinManagerGotoPrevInGroup :silent call <SID>GotoNextExplorerInGroup(<args>,-1)$/
WinManagerResumeAUs	plugin/winmanager.vim	/^function! WinManagerResumeAUs()$/
WinManagerSuspendAUs	plugin/winmanager.vim	/^function! WinManagerSuspendAUs()$/
Wwwsearch	plugin/wwwsearch.vim	/^\\ Wwwsearch$/
_	ftplugin/r.vim	/^  imap <buffer> _ <Esc>:call ReplaceUnderS()<CR>a$/
_	ftplugin/rhelp.vim	/^  imap <buffer> _ <Esc>:call ReplaceUnderS()<CR>a$/
_	ftplugin/rnoweb.vim	/^  imap <buffer> _ <Esc>:call ReplaceUnderS()<CR>a$/
_	plugin/arpeggio.vim	/^function! s:_(...)$/
__getitem__	ftplugin/latex-suite/bibtools.py	/^    def __getitem__(self, key):$/
__init__	ftplugin/latex-suite/bibtools.py	/^    def __init__(self, filelist=''):$/
__init__	ftplugin/latex-suite/bibtools.py	/^    def __init__(self, txt, macros={}):$/
__str__	ftplugin/latex-suite/bibtools.py	/^    def __str__(self):$/
_adjust_cursor	autoload/flydiff.vim	/^function! s:_adjust_cursor(base_line)  "{{{3$/
_compare_by_time	autoload/ku.vim	/^function! s:_compare_by_time(a, b)$/
_default_action_Bottom	autoload/ku.vim	/^function! s:_default_action_Bottom(item)$/
_default_action_Left	autoload/ku.vim	/^function! s:_default_action_Left(item)$/
_default_action_Right	autoload/ku.vim	/^function! s:_default_action_Right(item)$/
_default_action_Top	autoload/ku.vim	/^function! s:_default_action_Top(item)$/
_default_action_above	autoload/ku.vim	/^function! s:_default_action_above(item)$/
_default_action_below	autoload/ku.vim	/^function! s:_default_action_below(item)$/
_default_action_cd	autoload/ku.vim	/^function! s:_default_action_cd(item)  "{{{3$/
_default_action_default	autoload/ku.vim	/^function! s:_default_action_default(item)  "{{{3$/
_default_action_ex	autoload/ku.vim	/^function! s:_default_action_ex(item)  "{{{3$/
_default_action_lcd	autoload/ku.vim	/^function! s:_default_action_lcd(item)  "{{{3$/
_default_action_left	autoload/ku.vim	/^function! s:_default_action_left(item)$/
_default_action_nop	autoload/ku.vim	/^function! s:_default_action_nop(item)  "{{{3$/
_default_action_right	autoload/ku.vim	/^function! s:_default_action_right(item)$/
_default_action_tab_Left	autoload/ku.vim	/^function! s:_default_action_tab_Left(item)$/
_default_action_tab_Right	autoload/ku.vim	/^function! s:_default_action_tab_Right(item)$/
_default_action_tab_left	autoload/ku.vim	/^function! s:_default_action_tab_left(item)$/
_default_action_tab_right	autoload/ku.vim	/^function! s:_default_action_tab_right(item)$/
_makeArgumentList	autoload/genutils.vim	/^function! s:_makeArgumentList()$/
_makeArgumentString	autoload/genutils.vim	/^function! s:_makeArgumentString()$/
_map	autoload/textobj/user.vim	/^function! s:_map(map_commands, forced_p, lhs, rhs)$/
_omnifunc_base_case_pattern	autoload/ku.vim	/^function! s:_omnifunc_base_case_pattern(pattern)  "{{{3$/
_omnifunc_cache_key	autoload/ku.vim	/^function! s:_omnifunc_cache_key(pattern)  "{{{3$/
_omnifunc_compare_items	autoload/ku.vim	/^function! s:_omnifunc_compare_items(a, b)  "{{{3$/
_omnifunc_compare_lists	autoload/ku.vim	/^function! s:_omnifunc_compare_lists(a, b)  "{{{3$/
_omnifunc_core	autoload/ku.vim	/^function! s:_omnifunc_core(current_source, pattern, items)  "{{{3$/
a.TestOverride	autoload/tovl/obj_test.vim	/^  fun! a.TestOverride()$/
activateNode	plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/
addFileNameAndNumber	ftplugin/latex-suite/outline.py	/^def addFileNameAndNumber(lines):$/
addfile	ftplugin/latex-suite/bibtools.py	/^    def addfile(self, file):$/
addfilter	ftplugin/latex-suite/bibtools.py	/^    def addfilter(self, filterspec):$/
addsortfield	ftplugin/latex-suite/bibtools.py	/^    def addsortfield(self, field):$/
adjust_cursor_if_invoked_via_visual_mode	autoload/narrow.vim	/^function! s:adjust_cursor_if_invoked_via_visual_mode(line1, line2)  "{{{2$/
allow_overridingp	autoload/narrow.vim	/^function! s:allow_overridingp()  "{{{2$/
already_hooked_p	autoload/metarw.vim	/^function! s:already_hooked_p(event_name, scheme)  "{{{2$/
altercmd#define	autoload/altercmd.vim	/^function! altercmd#define(...)  "{{{2$/
altercmd#load	autoload/altercmd.vim	/^function! altercmd#load()  "{{{2$/
alternate	ftplugin/haskell_doc.vim	/^  let alternate = substitute(field,'html','doc\/html','')$/
altkwprg#look	autoload/altkwprg.vim	/^function! altkwprg#look(keyword)  "{{{2$/
api_acc_valid_p	autoload/ku.vim	/^function! s:api_acc_valid_p(source_name, item, separator)  "{{{3$/
api_action_table	autoload/ku.vim	/^function! s:api_action_table(source_name)  "{{{3$/
api_available_sources	autoload/ku.vim	/^function! s:api_available_sources(source_name_base)  "{{{3$/
api_gather_items	autoload/ku.vim	/^function! s:api_gather_items(source_name, pattern)  "{{{3$/
api_key_table	autoload/ku.vim	/^function! s:api_key_table(source_name)  "{{{3$/
api_on_before_action	autoload/ku.vim	/^function! s:api_on_before_action(source_name, item)  "{{{3$/
api_on_source_enter	autoload/ku.vim	/^function! s:api_on_source_enter(source_name)  "{{{3$/
api_on_source_leave	autoload/ku.vim	/^function! s:api_on_source_leave(source_name)  "{{{3$/
api_special_char_p	autoload/ku.vim	/^function! s:api_special_char_p(source_name, character)  "{{{3$/
archive_basename	autoload/ku/file.vim	/^function! s:archive_basename(path)  "{{{2$/
archive_type	autoload/ku/file.vim	/^function! s:archive_type(path)  "{{{2$/
arpeggio#_do	autoload/arpeggio.vim	/^function! arpeggio#_do(script)  "{{{2$/
arpeggio#_map_or_list	autoload/arpeggio.vim	/^function! arpeggio#_map_or_list(modes, remap_p, q_args)  "{{{2$/
arpeggio#_unmap	autoload/arpeggio.vim	/^function! arpeggio#_unmap(modes, q_args)  "{{{2$/
arpeggio#list	autoload/arpeggio.vim	/^function! arpeggio#list(modes, options, ...)  "{{{2$/
arpeggio#load	autoload/arpeggio.vim	/^function! arpeggio#load()  "{{{2$/
arpeggio#map	autoload/arpeggio.vim	/^function! arpeggio#map(modes, options, remap_p, lhs, rhs)  "{{{2$/
arpeggio#unmap	autoload/arpeggio.vim	/^function! arpeggio#unmap(modes, options, lhs)  "{{{2$/
assert#Bool	autoload/assert.vim	/^function! assert#Bool(b,msg)$/
assert#Equal	autoload/assert.vim	/^function! assert#Equal(a,b,msg)$/
assert#Msg	autoload/assert.vim	/^function! assert#Msg(msg)$/
available_scheme_p	autoload/metarw.vim	/^function! s:available_scheme_p(scheme)  "{{{2$/
available_schemes	autoload/metarw.vim	/^function! s:available_schemes()  "{{{2$/
b	autoload/tovl/obj_test.vim	/^  let b = a.createChildClass(child, {'name' : "child"})$/
b:DoubleDollars	ftplugin/latex-suite/envmacros.vim	/^	let b:DoubleDollars = 0$/
b:ModeLine_CallBack	macros/let-modeline.vim	/^  let b:ModeLine_CallBack = "TeXModeLine_CallBack"$/
b:current_syntax	syntax/applescript.vim	/^let b:current_syntax = "applescript"$/
b:current_syntax	syntax/gtd.vim	/^let b:current_syntax = 'gtd'$/
b:current_syntax	syntax/haskell.vim	/^let b:current_syntax = 'haskell'$/
b:current_syntax	syntax/hla.vim	/^let b:current_syntax = "hla"$/
b:current_syntax	syntax/issue.vim	/^let b:current_syntax = 'issue'$/
b:current_syntax	syntax/ku.vim	/^let b:current_syntax = 'ku'$/
b:current_syntax	syntax/lhaskell.vim	/^let b:current_syntax = "lhaskell"$/
b:current_syntax	syntax/man.vim	/^let b:current_syntax = "man"$/
b:current_syntax	syntax/mankey.vim	/^let b:current_syntax = "mankey"$/
b:current_syntax	syntax/manphp.vim	/^let b:current_syntax = "manphp"$/
b:current_syntax	syntax/metarw.vim	/^let b:current_syntax = 'metarw'$/
b:current_syntax	syntax/netrw.vim	/^let   b:current_syntax = "netrwlist"$/
b:current_syntax	syntax/r.vim	/^let b:current_syntax="r"$/
b:current_syntax	syntax/rest.vim	/^let b:current_syntax = "rst"$/
b:current_syntax	syntax/rhelp.vim	/^let   b:current_syntax = "rhelp"$/
b:current_syntax	syntax/rnoweb.vim	/^let   b:current_syntax = "rnoweb"$/
b:current_syntax	syntax/tex.vim	/^let   b:current_syntax = "tex"$/
b:current_syntax	syntax/vimperator.vim	/^let b:current_syntax = "vimperator"$/
b:did_PERL_ftplugin	ftplugin/perl.vim	/^let b:did_PERL_ftplugin = 1$/
b:did_brackets	ftplugin/latex-suite/brackets.vim	/^let b:did_brackets = 1$/
b:did_ftplugin	ftplugin/gtd.vim	/^let b:did_ftplugin = 1$/
b:did_ftplugin	ftplugin/issue.vim	/^let b:did_ftplugin = 1$/
b:did_ftplugin	ftplugin/r.vim	/^let b:did_ftplugin = 1$/
b:did_ftplugin	ftplugin/rhelp.vim	/^let b:did_ftplugin = 1$/
b:did_ftplugin	ftplugin/rnoweb.vim	/^let b:did_ftplugin = 1$/
b:did_indent	indent/haskell.vim	/^let b:did_indent = 1$/
b:did_indent	indent/r.vim	/^let b:did_indent = 1$/
b:did_indent	indent/tex.vim	/^let b:did_indent = 1$/
b:doneTexCompiler	compiler/tex.vim	/^let b:doneTexCompiler = 1$/
b:done_smartspace	ftplugin/latex-suite/smartspace.vim	/^let b:done_smartspace = 1$/
b:extfname	syntax/tex.vim	/^let b:extfname=expand("%:e")$/
b:flines1	ftplugin/r.vim	/^let b:flines1 = readfile(fname1)$/
b:flines1	ftplugin/rhelp.vim	/^let b:flines1 = readfile(fname1)$/
b:flines1	ftplugin/rnoweb.vim	/^let b:flines1 = readfile(fname1)$/
b:ghc_staticoptions	compiler/ghc.vim	/^  let b:ghc_staticoptions = ''$/
b:ghc_types	compiler/ghc.vim	/^  let b:ghc_types = {}$/
b:hasrmenu	ftplugin/r.vim	/^let b:hasrmenu = 0$/
b:hasrmenu	ftplugin/rhelp.vim	/^let b:hasrmenu = 0$/
b:hasrmenu	ftplugin/rnoweb.vim	/^let b:hasrmenu = 0$/
b:lhs_markup	syntax/lhaskell.vim	/^	    let b:lhs_markup = "unknown"$/
b:lhs_markup	syntax/lhaskell.vim	/^	    let b:lhs_markup = matchstr(lhs_markup,'\\<\\%(tex\\|none\\)\\>')$/
b:lhs_markup	syntax/lhaskell.vim	/^	let b:lhs_markup = "plain"$/
b:lhs_markup	syntax/lhaskell.vim	/^	let b:lhs_markup = "tex"$/
b:lhs_markup	syntax/lhaskell.vim	/^	let b:lhs_markup = "unknown"$/
b:my_changedtick	compiler/ghc.vim	/^  let b:my_changedtick = b:changedtick$/
b:needshstart	ftplugin/r.vim	/^    let b:needshstart = 1$/
b:needshstart	ftplugin/r.vim	/^let b:needshstart = 0$/
b:needshstart	ftplugin/rhelp.vim	/^    let b:needshstart = 1$/
b:needshstart	ftplugin/rhelp.vim	/^let b:needshstart = 0$/
b:needshstart	ftplugin/rnoweb.vim	/^    let b:needshstart = 1$/
b:needshstart	ftplugin/rnoweb.vim	/^let b:needshstart = 0$/
b:needsnewtags	ftplugin/r.vim	/^let b:needsnewtags = 1$/
b:needsnewtags	ftplugin/rhelp.vim	/^let b:needsnewtags = 1$/
b:needsnewtags	ftplugin/rnoweb.vim	/^let b:needsnewtags = 1$/
b:needsrargs	ftplugin/r.vim	/^let b:needsrargs = 1$/
b:needsrargs	ftplugin/rhelp.vim	/^let b:needsrargs = 1$/
b:needsrargs	ftplugin/rnoweb.vim	/^let b:needsrargs = 1$/
b:replace_us	ftplugin/r.vim	/^    let b:replace_us = 0$/
b:replace_us	ftplugin/r.vim	/^let b:replace_us = 1$/
b:replace_us	ftplugin/rhelp.vim	/^    let b:replace_us = 0$/
b:replace_us	ftplugin/rhelp.vim	/^let b:replace_us = 1$/
b:replace_us	ftplugin/rnoweb.vim	/^    let b:replace_us = 0$/
b:replace_us	ftplugin/rnoweb.vim	/^let b:replace_us = 1$/
b:rsource	ftplugin/r.vim	/^let b:rsource = printf("\/tmp\/.Rsource-%s", userlogin)$/
b:rsource	ftplugin/rhelp.vim	/^let b:rsource = printf("\/tmp\/.Rsource-%s", userlogin)$/
b:rsource	ftplugin/rnoweb.vim	/^let b:rsource = printf("\/tmp\/.Rsource-%s", userlogin)$/
b:rtagsfile	ftplugin/r.vim	/^let b:rtagsfile = printf("\/tmp\/.Rtags-%s", userlogin)$/
b:rtagsfile	ftplugin/rhelp.vim	/^let b:rtagsfile = printf("\/tmp\/.Rtags-%s", userlogin)$/
b:rtagsfile	ftplugin/rnoweb.vim	/^let b:rtagsfile = printf("\/tmp\/.Rtags-%s", userlogin)$/
b:screensname	ftplugin/r.vim	/^  let b:screensname = printf("vimrplugin-%s", userlogin)$/
b:screensname	ftplugin/r.vim	/^  let b:screensname = printf("vimrplugin-%s-%s", userlogin, localtime())$/
b:screensname	ftplugin/rhelp.vim	/^  let b:screensname = printf("vimrplugin-%s", userlogin)$/
b:screensname	ftplugin/rhelp.vim	/^  let b:screensname = printf("vimrplugin-%s-%s", userlogin, localtime())$/
b:screensname	ftplugin/rnoweb.vim	/^  let b:screensname = printf("vimrplugin-%s", userlogin)$/
b:screensname	ftplugin/rnoweb.vim	/^  let b:screensname = printf("vimrplugin-%s-%s", userlogin, localtime())$/
b:scrfile	ftplugin/r.vim	/^let b:scrfile = " "$/
b:scrfile	ftplugin/rhelp.vim	/^let b:scrfile = " "$/
b:scrfile	ftplugin/rnoweb.vim	/^let b:scrfile = " "$/
b:term_cmd	ftplugin/r.vim	/^  let b:term_cmd = "Eterm --icon ~\/.vim\/bitmaps\/ricon.png -e"$/
b:term_cmd	ftplugin/r.vim	/^  let b:term_cmd = "konsole --workdir '" . expand("%:p:h") . "' --icon ~\/.vim\/bitmaps\/ricon.png -e"$/
b:term_cmd	ftplugin/r.vim	/^  let b:term_cmd = g:vimrplugin_term . " --working-directory='" . expand("%:p:h") . "'"$/
b:term_cmd	ftplugin/r.vim	/^  let b:term_cmd = g:vimrplugin_term . " -e"$/
b:term_cmd	ftplugin/r.vim	/^  let b:term_cmd = g:vimrplugin_term . " -xrm '*iconPixmap: " . expand("~") . "\/.vim\/bitmaps\/ricon.xbm' -e"$/
b:term_cmd	ftplugin/r.vim	/^  let b:term_cmd = g:vimrplugin_term_cmd$/
b:term_cmd	ftplugin/rhelp.vim	/^  let b:term_cmd = "Eterm --icon ~\/.vim\/bitmaps\/ricon.png -e"$/
b:term_cmd	ftplugin/rhelp.vim	/^  let b:term_cmd = "konsole --workdir '" . expand("%:p:h") . "' --icon ~\/.vim\/bitmaps\/ricon.png -e"$/
b:term_cmd	ftplugin/rhelp.vim	/^  let b:term_cmd = g:vimrplugin_term . " --working-directory='" . expand("%:p:h") . "'"$/
b:term_cmd	ftplugin/rhelp.vim	/^  let b:term_cmd = g:vimrplugin_term . " -e"$/
b:term_cmd	ftplugin/rhelp.vim	/^  let b:term_cmd = g:vimrplugin_term . " -xrm '*iconPixmap: " . expand("~") . "\/.vim\/bitmaps\/ricon.xbm' -e"$/
b:term_cmd	ftplugin/rhelp.vim	/^  let b:term_cmd = g:vimrplugin_term_cmd$/
b:term_cmd	ftplugin/rnoweb.vim	/^  let b:term_cmd = "Eterm --icon ~\/.vim\/bitmaps\/ricon.png -e"$/
b:term_cmd	ftplugin/rnoweb.vim	/^  let b:term_cmd = "konsole --workdir '" . expand("%:p:h") . "' --icon ~\/.vim\/bitmaps\/ricon.png -e"$/
b:term_cmd	ftplugin/rnoweb.vim	/^  let b:term_cmd = g:vimrplugin_term . " --working-directory='" . expand("%:p:h") . "'"$/
b:term_cmd	ftplugin/rnoweb.vim	/^  let b:term_cmd = g:vimrplugin_term . " -e"$/
b:term_cmd	ftplugin/rnoweb.vim	/^  let b:term_cmd = g:vimrplugin_term . " -xrm '*iconPixmap: " . expand("~") . "\/.vim\/bitmaps\/ricon.xbm' -e"$/
b:term_cmd	ftplugin/rnoweb.vim	/^  let b:term_cmd = g:vimrplugin_term_cmd$/
b:tex_stylish	syntax/tex.vim	/^  let b:tex_stylish= 0$/
b:tex_stylish	syntax/tex.vim	/^  let b:tex_stylish= 1$/
b:tex_stylish	syntax/tex.vim	/^ let b:tex_stylish= g:tex_stylish$/
b:tw	ftplugin/latex-suite/smartspace.vim	/^let b:tw = &l:tw$/
b:undo_ftplugin	ftplugin/gtd.vim	/^  let b:undo_ftplugin = ' | '$/
b:undo_ftplugin	ftplugin/gtd.vim	/^  let b:undo_ftplugin = ''$/
b:undo_ftplugin	ftplugin/gtd.vim	/^let b:undo_ftplugin .= '$/
b:undo_ftplugin	ftplugin/issue.vim	/^let b:undo_ftplugin = 'setlocal foldmethod<$/
b:usescreenplugin	ftplugin/r.vim	/^  let b:usescreenplugin = 0$/
b:usescreenplugin	ftplugin/r.vim	/^  let b:usescreenplugin = 1$/
b:usescreenplugin	ftplugin/rhelp.vim	/^  let b:usescreenplugin = 0$/
b:usescreenplugin	ftplugin/rhelp.vim	/^  let b:usescreenplugin = 1$/
b:usescreenplugin	ftplugin/rnoweb.vim	/^  let b:usescreenplugin = 0$/
b:usescreenplugin	ftplugin/rnoweb.vim	/^  let b:usescreenplugin = 1$/
beep	plugin/surround.vim	/^function! s:beep()$/
bf	ftplugin/latex-suite/bibtools.py	/^    bf = BibFile(sys.argv[1])$/
bindMappings	plugin/NERD_tree.vim	/^function! s:bindMappings()$/
block_border_p	autoload/textobj/indent.vim	/^function! s:block_border_p(indent,base_indent,include_empty_lines_p,type) "{{{2$/
bookmarkNode	plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/
bufInWindows	plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/
bufname	autoload/altkwprg.vim	/^function! s:bufname(keywordprg)  "{{{2$/
bundle#args	autoload/bundle.vim	/^function! bundle#args(banged_p, name)  "{{{2$/
bundle#available_bundles	autoload/bundle.vim	/^function! bundle#available_bundles()  "{{{2$/
bundle#complete	autoload/bundle.vim	/^function! bundle#complete(arglead, cmdline, cursorpos)  "{{{2$/
bundle#files	autoload/bundle.vim	/^function! bundle#files(name)  "{{{2$/
bundle#load	autoload/bundle.vim	/^function! bundle#load(banged_p, name)  "{{{2$/
bundle#name	autoload/bundle.vim	/^function! bundle#name()  "{{{2$/
bundle#return	autoload/bundle.vim	/^function! bundle#return(...)  "{{{2$/
calculate_available_sources	autoload/ku.vim	/^function! s:calculate_available_sources()$/
cancel_selection	autoload/textobj/user.vim	/^function! s:cancel_selection(previous_mode, orig_pos)$/
catFile	ftplugin/latex-suite/pytools.py	/^def catFile(filename):$/
catch_sig	ftplugin/funnel.pl	/^sub catch_sig$/
centerView	plugin/NERD_tree.vim	/^function! s:centerView()$/
chCwd	plugin/NERD_tree.vim	/^function! s:chCwd()$/
chRoot	plugin/NERD_tree.vim	/^function! s:chRoot()$/
changesurround	plugin/surround.vim	/^function! s:changesurround() " {{{1$/
checkForActivate	plugin/NERD_tree.vim	/^function! s:checkForActivate()$/
checkForBrowse	plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/
check_pipe_data	ftplugin/funnel.pl	/^sub check_pipe_data$/
check_stdin_data	ftplugin/funnel.pl	/^sub check_stdin_data$/
check_tty_data	ftplugin/funnel.pl	/^sub check_tty_data$/
child	autoload/plugins/feature_types/action.vim	/^  let child = {}$/
child	autoload/plugins/feature_types/map.vim	/^  let child = {}$/
child	autoload/plugins/filetype/flex.vim	/^  let child = {}$/
child	autoload/plugins/filetype/haxe.vim	/^  let child = {}$/
child	autoload/plugins/filetype/nix.vim	/^  let child = {}$/
child	autoload/plugins/language_support/c.vim	/^  let child = {}$/
child	autoload/plugins/plone.vim	/^  let child = {}$/
child	autoload/plugins/tovl/mru.vim	/^  let child = {}$/
child	autoload/plugins/vcs/git.vim	/^  let child = {}$/
child	autoload/tovl/obj_test.vim	/^  let child = {}$/
child.Dialog	autoload/plugins/background_processes/grep.vim	/^  fun! child.Dialog()$/
child.FileHash	autoload/plugins/tovl/local_vimrc.vim	/^  fun! child.FileHash(path)$/
child.Load	autoload/plugins/background_processes/grep.vim	/^  fun! child.Load()$/
child.Load	autoload/plugins/feature_types/action.vim	/^  fun! child.Load()$/
child.Load	autoload/plugins/feature_types/map.vim	/^  fun! child.Load()$/
child.Load	autoload/plugins/filetype/flex.vim	/^  fun! child.Load()$/
child.Load	autoload/plugins/filetype/haxe.vim	/^  fun! child.Load()$/
child.Load	autoload/plugins/filetype/nix.vim	/^  fun! child.Load()$/
child.Load	autoload/plugins/language_support/c.vim	/^  fun! child.Load()$/
child.Load	autoload/plugins/plone.vim	/^  fun! child.Load()$/
child.Load	autoload/plugins/tovl/mru.vim	/^  fun! child.Load()$/
child.Load	autoload/plugins/vcs/git.vim	/^  fun! child.Load()$/
child.OnConfigChange	autoload/plugins/examples/example.vim	/^  fun! child.OnConfigChange()$/
child.OnFinish	autoload/tovl/runtaskinbackground.vim	/^  fun! child.OnFinish()$/
child.SourceAndTrustProjectFile	autoload/plugins/tovl/local_vimrc.vim	/^  function! child.SourceAndTrustProjectFile(full_path)$/
child.SourceLocalRcs	autoload/plugins/tovl/local_vimrc.vim	/^  function! child.SourceLocalRcs()$/
child.TestOverride	autoload/tovl/obj_test.vim	/^  fun! child.TestOverride() $/
child.ToggleHighlightCurrentLine	autoload/plugins/buffer/highligh_current_line_in_active_window.vim	/^  function child.ToggleHighlightCurrentLine()$/
child.Unload	autoload/plugins/background_processes/grep.vim	/^  fun! child.Unload()$/
child.Unload	autoload/plugins/buffer/highligh_current_line_in_active_window.vim	/^  fun! child.Unload()$/
child.Unload	autoload/plugins/examples/example.vim	/^  fun! child.Unload()$/
choose_action	autoload/ku.vim	/^function! s:choose_action(item, persistent_p)  "{{{3$/
chord_cancel	autoload/arpeggio.vim	/^function! s:chord_cancel(key)  "{{{2$/
chord_key	autoload/arpeggio.vim	/^function! s:chord_key(key)  "{{{2$/
chord_success	autoload/arpeggio.vim	/^function! s:chord_success(keys)  "{{{2$/
clearBookmarks	plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/
clear_all_folds	autoload/narrow.vim	/^function! s:clear_all_folds()  "{{{2$/
closeChildren	plugin/NERD_tree.vim	/^function! s:closeChildren()$/
closeCurrentDir	plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/
closeTree	plugin/NERD_tree.vim	/^function! s:closeTree()$/
closeTreeIfOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/
closeTreeIfQuitOnOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/
closeTreeWindow	plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/
closematch	plugin/surround.vim	/^function! s:closematch(str) " {{{1$/
cmd_AltkwprgDefaultKeyMappings	plugin/altkwprg.vim	/^function! s:cmd_AltkwprgDefaultKeyMappings(banged_p)$/
cmd_FakeclipDefaultKeyMappings	plugin/fakeclip.vim	/^function! s:cmd_FakeclipDefaultKeyMappings()$/
cmd_RepeatDefaultKeyMappings	plugin/repeat.vim	/^function! s:cmd_RepeatDefaultKeyMappings(bang_p)$/
cmd_SkeletonLoad	plugin/skeleton.vim	/^function! s:cmd_SkeletonLoad(name, interactive_use_p, banged_p)$/
cmd_SkeletonLoad_complete	plugin/skeleton.vim	/^function! s:cmd_SkeletonLoad_complete(arglead, cmdline, cursorpos)$/
cmd_VcsiDefaultKeyMappings	plugin/vcsi.vim	/^function! s:cmd_VcsiDefaultKeyMappings(banged_p)$/
cmpfun	ftplugin/latex-suite/bibtools.py	/^        def cmpfun(b1, b2):$/
command_unzip	autoload/ku/file.vim	/^function! s:command_unzip(...)  "{{{2$/
command_unzip_list	autoload/ku/file.vim	/^function! s:command_unzip_list(archive_path)  "{{{2$/
compareBookmarks	plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/
compareNodes	plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/
compare_ignorecase	autoload/ku.vim	/^function! s:compare_ignorecase(x, y)  "{{{2$/
completeBookmarks	plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/
complete_the_prompt	autoload/ku.vim	/^function! s:complete_the_prompt()  "{{{3$/
composite_action_table	autoload/ku.vim	/^function! s:composite_action_table(source)  "{{{3$/
composite_key_table	autoload/ku.vim	/^function! s:composite_key_table(source)  "{{{3$/
config#AddToListUniq	autoload/config.vim	/^function! config#AddToListUniq(path, v)$/
config#ClearScanAndCacheFileCache	autoload/config.vim	/^function! config#ClearScanAndCacheFileCache()$/
config#ConfigContents	autoload/config.vim	/^function! config#ConfigContents(file)$/
config#DefaultConfigFiles	autoload/config.vim	/^function! config#DefaultConfigFiles()$/
config#DefaultTypes	autoload/config.vim	/^function! config#DefaultTypes()$/
config#Dictionary	autoload/config.vim	/^function! config#Dictionary()$/
config#DotVim	autoload/config.vim	/^fun! config#DotVim()$/
config#EditConfig	autoload/config.vim	/^function! config#EditConfig(...)$/
config#EditConfigGetData	autoload/config.vim	/^function! config#EditConfigGetData(file)$/
config#EditConfigWrite	autoload/config.vim	/^function! config#EditConfigWrite(file)$/
config#EditConfiguration	autoload/config.vim	/^function! config#EditConfiguration(opts)$/
config#EvalFirstLine	autoload/config.vim	/^function! config#EvalFirstLine(a)$/
config#FakedFunctionReference	autoload/config.vim	/^function! config#FakedFunctionReference()$/
config#FireEvent	autoload/config.vim	/^function! config#FireEvent(path, ...)$/
config#Float	autoload/config.vim	/^function! config#Float()$/
config#FlushConfig	autoload/config.vim	/^function! config#FlushConfig(configFile, assumeDirty)$/
config#FlushConfigs	autoload/config.vim	/^function! config#FlushConfigs()$/
config#Fold	autoload/config.vim	/^fun! config#Fold(lnum)$/
config#FromBuffer	autoload/config.vim	/^function! config#FromBuffer(lines, idx, currInd, sp, ind)$/
config#Funcref	autoload/config.vim	/^function! config#Funcref()$/
config#Get	autoload/config.vim	/^function! config#Get(path, ...)$/
config#GetB	autoload/config.vim	/^function! config#GetB(...)$/
config#GetByPath	autoload/config.vim	/^function! config#GetByPath(dict, path, ...)$/
config#GetC	autoload/config.vim	/^fun! config#GetC(rel_file, ...)$/
config#GetG	autoload/config.vim	/^function! config#GetG(...)$/
config#GetOrSet	autoload/config.vim	/^fun! config#GetOrSet(name, default) $/
config#Indent	autoload/config.vim	/^function! config#Indent()$/
config#KeyToString	autoload/config.vim	/^function! config#KeyToString(s)$/
config#List	autoload/config.vim	/^function! config#List()$/
config#Number	autoload/config.vim	/^function! config#Number()$/
config#Path	autoload/config.vim	/^function! config#Path(path)$/
config#RemoveB	autoload/config.vim	/^fun! config#RemoveB(...)$/
config#RemoveByPath	autoload/config.vim	/^function! config#RemoveByPath(dict, path, ...)$/
config#ResumeFlushing	autoload/config.vim	/^function! config#ResumeFlushing(configFile)$/
config#ScanIfNewer	autoload/config.vim	/^function! config#ScanIfNewer(file, opts)$/
config#Set	autoload/config.vim	/^function! config#Set(path, value, ...)$/
config#SetB	autoload/config.vim	/^function! config#SetB(path, value)$/
config#SetByPath	autoload/config.vim	/^function! config#SetByPath(dict, path, value)$/
config#SetC	autoload/config.vim	/^fun! config#SetC(rel_file, path, value)$/
config#SetG	autoload/config.vim	/^function! config#SetG(path, value)$/
config#StopFlushing	autoload/config.vim	/^function! config#StopFlushing(configFile)$/
config#String	autoload/config.vim	/^function! config#String()$/
config#TOVLConfigDefaultReadCmd	autoload/config.vim	/^fun! config#TOVLConfigDefaultReadCmd()$/
config#TOVLConfigReadCmd	autoload/config.vim	/^fun! config#TOVLConfigReadCmd()$/
config#TOVLConfigWriteCmd	autoload/config.vim	/^fun! config#TOVLConfigWriteCmd()$/
config#ToBuffer	autoload/config.vim	/^function! config#ToBuffer(sp,ind,v)$/
config_test#MergeTest	autoload/config_test.vim	/^function! config_test#MergeTest(a,b)$/
config_test#Serialization	autoload/config_test.vim	/^function! config_test#Serialization()$/
config_test#Test	autoload/config_test.vim	/^function! config_test#Test()$/
config_test#TestData	autoload/config_test.vim	/^function! config_test#TestData()$/
config_test#TestWrite	autoload/config_test.vim	/^function! config_test#TestWrite()$/
config_test#ToBufferFromBufferEq	autoload/config_test.vim	/^function! config_test#ToBufferFromBufferEq(v, msg)$/
confirm_text	plugin/ui-functions.vim	/^function! s:confirm_text(box, text, ...)$/
conn	autoload/tovl/ft/sql.vim	/^    let conn['database'] = tovl#ui#choice#LetUserSelectIfThereIsAChoice($/
conn.col	autoload/tovl/ft/sql.vim	/^  function! conn.col(col, output)$/
conn.databases	autoload/tovl/ft/sql.vim	/^  function! conn.databases()$/
conn.fields	autoload/tovl/ft/sql.vim	/^  function! conn.fields(table)$/
conn.loadFieldsOfTables	autoload/tovl/ft/sql.vim	/^  function! conn.loadFieldsOfTables(tables)$/
conn.query	autoload/tovl/ft/sql.vim	/^  function! conn.query(sql)$/
conn.tables	autoload/tovl/ft/sql.vim	/^  function! conn.tables()$/
contains_the_prompt_p	autoload/ku.vim	/^function! s:contains_the_prompt_p(s)  "{{{3$/
count	autoload/fakeclip.vim	/^function! s:count()  "{{{2$/
createTreeWin	plugin/NERD_tree.vim	/^function! s:createTreeWin()$/
create_diff_buffer_for	autoload/flydiff.vim	/^function! s:create_diff_buffer_for(bufnr)  "{{{2$/
cs	plugin/surround.vim	/^    nmap          cs   <Plug>Csurround$/
current_char	autoload/smartword.vim	/^function! s:current_char(pos)  "{{{2$/
current_compiler	compiler/ghc.vim	/^let current_compiler = "ghc"$/
current_compiler	compiler/tex.vim	/^		let current_compiler = "latex"$/
current_compiler	compiler/tex.vim	/^		let current_compiler = b:tex_flavor$/
current_compiler	compiler/tex.vim	/^		let current_compiler = g:tex_flavor$/
current_context	autoload/vspec.vim	/^function! s:current_context()  "{{{3$/
custom_action_table	autoload/ku.vim	/^function! s:custom_action_table(source)  "{{{3$/
custom_key_table	autoload/ku.vim	/^function! s:custom_key_table(source)  "{{{3$/
custom_prefix_table	autoload/ku.vim	/^function! s:custom_prefix_table(source)  "{{{3$/
d.AddDefaultConfigOptions	autoload/tovl/plugin_management.vim	/^  fun! d.AddDefaultConfigOptions(d)$/
d.AddFeatureDefaultsDefaultFunc	autoload/tovl/plugin_management.vim	/^  fun! d.AddFeatureDefaultsDefaultFunc(d,i,n,path)$/
d.AllTemplateLocations	autoload/tovl/template_systems/vl.vim	/^  fun! d.AllTemplateLocations()$/
d.AllTemplates	autoload/tovl/template_systems/vl.vim	/^  fun! d.AllTemplates()$/
d.Au	autoload/tovl/plugin_management.vim	/^  fun! d.Au(opts)$/
d.CompleteTemplateId	autoload/tovl/template_systems/vl.vim	/^  function! d.CompleteTemplateId(ArgLead,L,P)$/
d.Continue	autoload/tovl/ui/filter_list.vim	/^  fun d.Continue()$/
d.CreateFilesFromTemplates	autoload/tovl/template_systems/vl.vim	/^  function! d.CreateFilesFromTemplates(list,...)$/
d.CurrentItem	autoload/tovl/ui/filter_list.vim	/^  fun d.CurrentItem()$/
d.Debug	autoload/tovl/plugin_management.vim	/^  fun! d.Debug(n, f)$/
d.DebugCall	autoload/tovl/obj.vim	/^  fun! d.DebugCall(name, args)$/
d.DirFromUser	autoload/tovl/template_systems/vl.vim	/^  fun! d.DirFromUser()$/
d.DoAddDefaults	autoload/tovl/plugin_management.vim	/^  fun! d.DoAddDefaults(dict, p, d)$/
d.DoContinue	autoload/tovl/ui/filter_list.vim	/^  fun d.DoContinue(v)$/
d.FilterFromKeyboard	autoload/tovl/ui/filter_list.vim	/^  fun d.FilterFromKeyboard(keep, start, ...)$/
d.FilterItem	autoload/tovl/ui/filter_list.vim	/^  fun d.FilterItem(items, filter, cursorAt)$/
d.FilteredItems	autoload/tovl/ui/filter_list.vim	/^  fun d.FilteredItems()$/
d.InsertTemplate	autoload/tovl/template_systems/vl.vim	/^  function! d.InsertTemplate(id,...)$/
d.Load	autoload/tovl/plugin_management.vim	/^  fun! d.Load()$/
d.LoadPlugin	autoload/tovl/plugin_management.vim	/^  fun! d.LoadPlugin()$/
d.LogExec	autoload/tovl/plugin_management.vim	/^  fun! d.LogExec(level, pre, cmd)$/
d.MapToOriginal	autoload/tovl/ui/filter_list.vim	/^  fun d.MapToOriginal(v)$/
d.NewBufferAndInit	autoload/tovl/ui/filter_list.vim	/^  fun d.NewBufferAndInit()$/
d.OnConfigChange	autoload/tovl/plugin_management.vim	/^  fun! d.OnConfigChange()$/
d.RegI	autoload/tovl/plugin_management.vim	/^  fun! d.RegI(d)$/
d.RegisterFeatureType	autoload/tovl/plugin_management.vim	/^  fun! d.RegisterFeatureType(ext)$/
d.RemoveFilters	autoload/tovl/ui/filter_list.vim	/^  fun d.RemoveFilters()$/
d.SelectByIdOrFilter	autoload/tovl/ui/filter_list.vim	/^  fun d.SelectByIdOrFilter()$/
d.ShowAppliedFilters	autoload/tovl/ui/filter_list.vim	/^  fun d.ShowAppliedFilters()$/
d.SourceAndTrustProjectFile	autoload/tovl/plugin/local_vimrc.vim	/^  function! d.SourceAndTrustProjectFile(full_path)$/
d.SourceLocalRcs	autoload/tovl/plugin/local_vimrc.vim	/^  function! d.SourceLocalRcs()$/
d.TemplateById	autoload/tovl/template_systems/vl.vim	/^  function! d.TemplateById(id, ...)$/
d.TemplateEdit	autoload/tovl/template_systems/vl.vim	/^  function! d.TemplateEdit()$/
d.TemplateIdList	autoload/tovl/template_systems/vl.vim	/^  function! d.TemplateIdList()$/
d.TemplateNew	autoload/tovl/template_systems/vl.vim	/^  function! d.TemplateNew()$/
d.ToggleAlignment	autoload/tovl/ui/filter_list.vim	/^  fun d.ToggleAlignment()$/
d.Unload	autoload/tovl/plugin_management.vim	/^  fun! d.Unload()$/
d.UpdateDisplay	autoload/tovl/ui/filter_list.vim	/^  fun d.UpdateDisplay()$/
d.extendParent	autoload/tovl/obj.vim	/^  fun! d.extendParent(FunOrDict)$/
d.fromBuffer	autoload/config.vim	/^  function d.fromBuffer(lines, idx, currInd, sp, ind)$/
d.loadMissing	autoload/tovl/obj.vim	/^  fun! d.loadMissing()$/
default_action_table	autoload/ku.vim	/^function! s:default_action_table()  "{{{3$/
default_command_to_open_uri	autoload/wwwsearch.vim	/^function! s:default_command_to_open_uri()  "{{{2$/
default_key_table	autoload/ku.vim	/^function! s:default_key_table()  "{{{3$/
define_entering_mapping	autoload/submode.vim	/^function! s:define_entering_mapping(submode, mode, options, lhs, rhs)  "{{{2$/
define_submode_mapping	autoload/submode.vim	/^function! s:define_submode_mapping(submode, mode, options, lhs, rhs)  "{{{2$/
delete	autoload/ku/buffer.vim	/^function! s:delete(delete_command, item)  "{{{2$/
deleteBookmark	plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/
deleteFile	ftplugin/latex-suite/pytools.py	/^def deleteFile(filepattern):$/
deletion_moves_the_cursor_p	autoload/operator/replace.vim	/^function! s:deletion_moves_the_cursor_p(motion_wise,$/
description_from_describer	autoload/vspec.vim	/^function! s:description_from_describer(describer)  "{{{2$/
did_drchip_decho_syntax	syntax/Decho.vim	/^  let did_drchip_decho_syntax= 1$/
did_drchip_netrwlist_syntax	syntax/netrw.vim	/^ let did_drchip_netrwlist_syntax= 1$/
did_hla_syntax_inits	syntax/hla.vim	/^    let did_hla_syntax_inits = 1$/
did_r_syn_inits	syntax/r.vim	/^    let did_r_syn_inits = 1$/
did_rhelp_syntax_inits	syntax/rhelp.vim	/^    let did_rhelp_syntax_inits = 1$/
did_rst_syn_inits	syntax/rest.vim	/^    let did_rst_syn_inits = 1$/
did_tex_syntax_inits	syntax/lhaskell.vim	/^    let did_tex_syntax_inits = 1$/
did_tex_syntax_inits	syntax/tex.vim	/^ let did_tex_syntax_inits = 1$/
did_tex_syntax_inits	syntax/tex.vim	/^ let did_tex_syntax_inits= 2$/
displayHelp	plugin/NERD_tree.vim	/^function! s:displayHelp()$/
do	autoload/ku.vim	/^function! s:do(action_name)  "{{{2$/
do_action	autoload/ku.vim	/^function! s:do_action(action, item, ...)  "{{{3$/
do_map	autoload/arpeggio.vim	/^function! s:do_map(mode, options, remap_p, keys, rhs)  "{{{2$/
do_unmap	autoload/arpeggio.vim	/^function! s:do_unmap(mode, options, keys)  "{{{2$/
dosurround	plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/
ds	plugin/surround.vim	/^    nmap          ds   <Plug>Dsurround$/
dumpHelp	plugin/NERD_tree.vim	/^function! s:dumpHelp()$/
each_char	autoload/arpeggio.vim	/^function! s:each_char(s)  "{{{2$/
each_char	autoload/submode.vim	/^function! s:each_char(s)  "{{{2$/
echo	plugin/NERD_tree.vim	/^function! s:echo(msg)$/
echoError	plugin/NERD_tree.vim	/^function! s:echoError(msg)$/
echoWarning	plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/
empty_buffer_p	autoload/flydiff.vim	/^function! s:empty_buffer_p(bufnr)  "{{{2$/
end	autoload/ku.vim	/^function! s:end()  "{{{2$/
escChars	compiler/tex.vim	/^		let escChars = ''$/
escChars	compiler/tex.vim	/^		let escChars = '{}\\'$/
exec	plugin/NERD_tree.vim	/^function! s:exec(cmd)$/
execute	autoload/lh/command.vim	/^function! s:execute(definition, ...)$/
execute_function	autoload/lh/command.vim	/^function! s:execute_function(definition, params)$/
execute_sub_commands	autoload/lh/command.vim	/^function! s:execute_sub_commands(definition, params)$/
execute_vcs_command	autoload/vcsi.vim	/^function! s:execute_vcs_command(args)  "{{{2$/
exjumplist#_scope	autoload/exjumplist.vim	/^function! exjumplist#_scope()  "{{{2$/
exjumplist#_sid	autoload/exjumplist.vim	/^function! exjumplist#_sid()  "{{{2$/
exjumplist#go_first	autoload/exjumplist.vim	/^function! exjumplist#go_first()  "{{{2$/
exjumplist#go_last	autoload/exjumplist.vim	/^function! exjumplist#go_last()  $/
exjumplist#next_buffer	autoload/exjumplist.vim	/^function! exjumplist#next_buffer()  "{{{2$/
exjumplist#previous_buffer	autoload/exjumplist.vim	/^function! exjumplist#previous_buffer()  "{{{2$/
expand_prefix	autoload/ku.vim	/^function! s:expand_prefix(user_input_raw)  "{{{3$/
expand_prefix3	autoload/ku.vim	/^function! s:expand_prefix3(user_input_raw)  "{{{3$/
extract_describers	autoload/vspec.vim	/^function! s:extract_describers()  "{{{2$/
extract_zip_archive_asis	autoload/ku/file.vim	/^function! s:extract_zip_archive_asis(archive_path)  "{{{2$/
extract_zip_archive_smartly	autoload/ku/file.vim	/^function! s:extract_zip_archive_smartly(archive_path)  "{{{2$/
extract_zip_content_asis	autoload/ku/file.vim	/^function! s:extract_zip_content_asis(archive_path, content_path)  "{{{2$/
extract_zip_content_smartly	autoload/ku/file.vim	/^function! s:extract_zip_content_smartly(archive_path, content_path)  "{{{2$/
extract_zip_content_solely	autoload/ku/file.vim	/^function! s:extract_zip_content_solely(archive_path, content_path)  "{{{2$/
extractafter	plugin/surround.vim	/^function! s:extractafter(str)$/
extractbefore	plugin/surround.vim	/^function! s:extractbefore(str)$/
fakeclip#_local_variables	autoload/fakeclip.vim	/^function! fakeclip#_local_variables()  "{{{2$/
fakeclip#_sid_prefix	autoload/fakeclip.vim	/^function! fakeclip#_sid_prefix()  "{{{2$/
fakeclip#clipboard_yank	autoload/fakeclip.vim	/^function! fakeclip#clipboard_yank(motion_type)  "{{{2$/
fakeclip#content	autoload/fakeclip.vim	/^function! fakeclip#content(system_type)  "{{{2$/
fakeclip#pastebuffer_yank	autoload/fakeclip.vim	/^function! fakeclip#pastebuffer_yank(motion_type)  "{{{2$/
fakeclip#put	autoload/fakeclip.vim	/^function! fakeclip#put(system_type, motion_type, put_type)  "{{{2$/
fakeclip#yank	autoload/fakeclip.vim	/^function! fakeclip#yank(system_type, motion_type)  "{{{2$/
fakeclip#yank_Y	autoload/fakeclip.vim	/^function! fakeclip#yank_Y(system_type)  "{{{2$/
field	ftplugin/haskell_doc.vim	/^  let field = substitute(field,'\\\\','\/','g')$/
field	ftplugin/haskell_doc.vim	/^  let field = substitute(field,'haddock-html: \\(.*\\)libraries.base','\\1','')$/
fileExplorer	plugin/winmanager.vim	/^	augroup fileExplorer$/
filter_flags	autoload/submode.vim	/^function! s:filter_flags(s, cs)  "{{{2$/
findAndRevealPath	plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/
find_help_window	autoload/altkwprg.vim	/^function! s:find_help_window()  "{{{2$/
find_proper_bundle	autoload/bundle.vim	/^function! s:find_proper_bundle(name)  "{{{2$/
finish_commit	autoload/vcsi.vim	/^function! s:finish_commit()  "{{{2$/
firstUsableWindow	plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/
first_directory	autoload/ku/file.vim	/^function! s:first_directory(path)  "{{{2$/
fixindent	plugin/surround.vim	/^function! s:fixindent(str,spc)$/
flydiff#toggle	autoload/flydiff.vim	/^function! flydiff#toggle(bufnr, state)  "{{{2$/
flydiff_direction	autoload/flydiff.vim	/^function! s:flydiff_direction()  "{{{2$/
flydiff_info	autoload/flydiff.vim	/^function! s:flydiff_info(bufnr, ...)  "{{{2$/
flydiff_timing	autoload/flydiff.vim	/^function! s:flydiff_timing()  "{{{2$/
fname1	ftplugin/r.vim	/^let fname1 = expand("~") . "\/.vim\/tools\/rtags"$/
fname1	ftplugin/rhelp.vim	/^let fname1 = expand("~") . "\/.vim\/tools\/rtags"$/
fname1	ftplugin/rnoweb.vim	/^let fname1 = expand("~") . "\/.vim\/tools\/rtags"$/
fold_after	autoload/narrow.vim	/^function! s:fold_after(line)  "{{{2$/
fold_before	autoload/narrow.vim	/^function! s:fold_before(line)  "{{{2$/
g:Align_xstrlen	autoload/Align.vim	/^  let g:Align_xstrlen= 0$/
g:Align_xstrlen	autoload/Align.vim	/^  let g:Align_xstrlen= 1$/
g:BufExplorer_title	plugin/bufexplorer.vim	/^let g:BufExplorer_title = "\\[Buf\\ List\\]"$/
g:DrChipTopLvlMenu	plugin/AlignMapsPlugin.vim	/^  let g:DrChipTopLvlMenu= "DrChip."$/
g:DrChipTopLvlMenu	plugin/DrawItPlugin.vim	/^  let g:DrChipTopLvlMenu= "DrChip."$/
g:FileExplorer_title	plugin/winfileexplorer.vim	/^let g:FileExplorer_title = "[File List]"$/
g:GetLatestVimScripts_allowautoinstall	autoload/getscript.vim	/^ let g:GetLatestVimScripts_allowautoinstall= 1$/
g:GetLatestVimScripts_mv	autoload/getscript.vim	/^   let g:GetLatestVimScripts_mv= "mv"$/
g:GetLatestVimScripts_mv	autoload/getscript.vim	/^   let g:GetLatestVimScripts_mv= "ren"$/
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options = ""$/
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= ""$/
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= "-q -O"$/
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= "-s -O"$/
g:GetLatestVimScripts_wget	autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget    = 'echo "GetLatestVimScripts needs wget or curl"'$/
g:GetLatestVimScripts_wget	autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget= "curl"$/
g:GetLatestVimScripts_wget	autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget= "wget"$/
g:Imap_Debug	plugin/imaps.vim	/^	let g:Imap_Debug = 0$/
g:Imap_DeleteEmptyPlaceHolders	plugin/imaps.vim	/^	let g:Imap_DeleteEmptyPlaceHolders = 1$/
g:Imap_StickyPlaceHolders	plugin/imaps.vim	/^	let g:Imap_StickyPlaceHolders = 1$/
g:NERDTreeBookmark	plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/
g:NERDTreeDirNode	plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/
g:NERDTreeFileNode	plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/
g:NERDTreeIgnore	plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/
g:NERDTreePath	plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/
g:NERDTreeSortOrder	plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/
g:NERDTreeStatusline	plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/
g:Perl_Dictionary_File	plugin/perl-support.vim	/^  let g:Perl_Dictionary_File       = s:plugin_dir.'perl-support\/wordlists\/perl.list'$/
g:Perl_NYTProfCSVfile	autoload/perlsupportprofiling.vim	/^let g:Perl_NYTProfCSVfile			= ''$/
g:Perl_PerlRegexAnalyser	plugin/perl-support.vim	/^let g:Perl_PerlRegexAnalyser			= 'yes'$/
g:Perl_PerlTagsTempfile	ftplugin/perl.vim	/^  let g:Perl_PerlTagsTempfile = tempname()$/
g:Perl_PerlTagsTempfile	plugin/perl-support.vim	/^let g:Perl_PerlTagsTempfile	= ''$/
g:Perl_PluginDir	plugin/perl-support.vim	/^let g:Perl_PluginDir	= s:plugin_dir        " used for communication with ftplugin\/perl.vim$/
g:Perl_Version	plugin/perl-support.vim	/^let g:Perl_Version= "4.6.2"$/
g:ST_WIN_CMD	autoload/genutils.vim	/^let g:ST_WIN_CMD = 0 | let g:ST_WIN_SH = 1 | let g:ST_UNIX = 2$/
g:SuperTabCompletionContexts	plugin/supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/
g:SuperTabContextDefaultCompletionType	plugin/supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/
g:SuperTabDefaultCompletionType	plugin/supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/
g:SuperTabLongestHighlight	plugin/supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/
g:SuperTabMappingBackward	plugin/supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/
g:SuperTabMappingForward	plugin/supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/
g:SuperTabMappingTabLiteral	plugin/supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/
g:SuperTabMidWordCompletion	plugin/supertab.vim	/^    let g:SuperTabMidWordCompletion = 1$/
g:SuperTabRetainCompletionDuration	plugin/supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/
g:TagsExplorerSkipError	plugin/wintagexplorer.vim	/^	let g:TagsExplorerSkipError = 0$/
g:TagsExplorer_title	plugin/wintagexplorer.vim	/^let g:TagsExplorer_title = "[Tag List]"$/
g:Tex_Debug	ftplugin/latex-suite/main.vim	/^	let g:Tex_Debug = 0$/
g:Tex_ElementsMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^	let g:Tex_ElementsMenuLocation = (g:Tex_NextMenuLocation).'.20 '.g:Tex_MenuPrefix$/
g:Tex_ElementsMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^	let g:Tex_ElementsMenuLocation = (g:Tex_NextMenuLocation).'.20 '.g:Tex_MenuPrefix.'E&lements.'$/
g:Tex_EnvMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^let g:Tex_EnvMenuLocation = (g:Tex_NextMenuLocation).'.20 '.g:Tex_MenuPrefix.'E&nvironments.'$/
g:Tex_IgnoreLevel	compiler/tex.vim	/^	let g:Tex_IgnoreLevel = 7$/
g:Tex_IgnoreUnmatched	compiler/tex.vim	/^	let g:Tex_IgnoreUnmatched = 1$/
g:Tex_IgnoredWarnings	compiler/tex.vim	/^	let g:Tex_IgnoredWarnings =$/
g:Tex_MacrosMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^let g:Tex_MacrosMenuLocation = g:Tex_MainMenuLocation.'.20 '.s:mainmenuname.'&Macros.'$/
g:Tex_NextMenuLocation	ftplugin/latex-suite/mathmacros.vim	/^let g:Tex_NextMenuLocation = g:Tex_NextMenuLocation + 1$/
g:Tex_NextMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^	let g:Tex_NextMenuLocation = g:Tex_NextMenuLocation + 1$/
g:Tex_NextMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^let g:Tex_NextMenuLocation = g:Tex_MainMenuLocation$/
g:Tex_NextMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^let g:Tex_NextMenuLocation = g:Tex_NextMenuLocation + 1$/
g:Tex_PackagesMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^	let g:Tex_PackagesMenuLocation = (g:Tex_MainMenuLocation).'.10 '.s:mainmenuname.'&Packages.'$/
g:Tex_PackagesMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^	let g:Tex_PackagesMenuLocation = (g:Tex_NextMenuLocation).'.10 '.g:Tex_MenuPrefix.'Packages.'$/
g:Tex_PromptedCommandsDefault	ftplugin/latex-suite/packages.vim	/^let g:Tex_PromptedCommandsDefault = g:Tex_PromptedCommands$/
g:Tex_PromptedEnvironmentsDefault	ftplugin/latex-suite/packages.vim	/^let g:Tex_PromptedEnvironmentsDefault = g:Tex_PromptedEnvironments$/
g:Tex_ShowallLines	compiler/tex.vim	/^	let g:Tex_ShowallLines = 0$/
g:Tex_TemplatesMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^let g:Tex_TemplatesMenuLocation = g:Tex_MainMenuLocation.'.20 '.s:mainmenuname.'&Templates.'$/
g:Tex_completion_addcontentsline	ftplugin/latex-suite/texviewer.vim	/^let g:Tex_completion_addcontentsline = 'lof}{figure}{,lot}{table}{,toc}{chapter}{,toc}{part}{,'.$/
g:Tex_completion_addtocontents	ftplugin/latex-suite/texviewer.vim	/^let g:Tex_completion_addtocontents = 'lof}{,lot}{,toc}{'$/
g:Tex_completion_bibliographystyle	ftplugin/latex-suite/texviewer.vim	/^let g:Tex_completion_bibliographystyle = 'abbr,alpha,plain,unsrt'$/
g:Tex_completion_explorer	ftplugin/latex-suite/main.vim	/^let g:Tex_completion_explorer = ','$/
g:Tex_package_detected	ftplugin/latex-suite/packages.vim	/^let g:Tex_package_detected = ''$/
g:Tex_package_supported	ftplugin/latex-suite/packages.vim	/^let g:Tex_package_supported = ''$/
g:arpeggio_timeoutlen	plugin/arpeggio.vim	/^  let g:arpeggio_timeoutlen = 40$/
g:arpeggio_timeoutlens	plugin/arpeggio.vim	/^  let g:arpeggio_timeoutlens = {}$/
g:bufexplorer_version	plugin/bufexplorer.vim	/^let g:bufexplorer_version = "7.2.6"$/
g:bundle_dictionary	plugin/bundle.vim	/^  let g:bundle_dictionary = {}$/
g:calendar_action	plugin/calendar.vim	/^  let g:calendar_action = "<SID>CalendarDiary"$/
g:calendar_datetime	plugin/calendar.vim	/^  let g:calendar_datetime = 'title'$/
g:calendar_diary	plugin/calendar.vim	/^  let g:calendar_diary = "~\/diary"$/
g:calendar_focus_today	plugin/calendar.vim	/^  let g:calendar_focus_today = 0$/
g:calendar_mark	plugin/calendar.vim	/^  let g:calendar_mark = 'left'$/
g:calendar_navi	plugin/calendar.vim	/^  let g:calendar_navi = 'top'$/
g:calendar_navi_label	plugin/calendar.vim	/^  let g:calendar_navi_label = "Prev,Today,Next"$/
g:calendar_sign	plugin/calendar.vim	/^  let g:calendar_sign = "<SID>CalendarSign"$/
g:calendar_version	plugin/calendar.vim	/^let g:calendar_version = "2.0"$/
g:debugWinManager	plugin/winmanager.vim	/^let g:debugWinManager = 1$/
g:decho_bufenter	plugin/Decho.vim	/^ let g:decho_bufenter= 0$/
g:decho_bufname	plugin/Decho.vim	/^ let g:decho_bufname= "DBG"$/
g:decho_winheight	plugin/Decho.vim	/^ let g:decho_winheight= 5$/
g:dechomode	plugin/Decho.vim	/^ let g:dechomode= s:DECHOWIN$/
g:dechovarname	plugin/Decho.vim	/^ let g:dechovarname = "g:dechovar"$/
g:defaultExplorer	plugin/winfileexplorer.vim	/^	let g:defaultExplorer = 1$/
g:defaultExplorer	plugin/winmanager.vim	/^	let g:defaultExplorer = 1$/
g:did_info_syntax_inits	syntax/info.vim	/^  let g:did_info_syntax_inits = 1$/
g:environmentshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^let g:environmentshortcuts = ''$/
g:explDateFormat	plugin/winfileexplorer.vim	/^  let g:explDateFormat="%d %b %Y %H:%M"$/
g:explDetailedHelp	plugin/winfileexplorer.vim	/^  let g:explDetailedHelp=0$/
g:explDetailedList	plugin/winfileexplorer.vim	/^  let g:explDetailedList=0$/
g:explDirsFirst	plugin/winfileexplorer.vim	/^  let g:explDirsFirst=1$/
g:explHideFiles	plugin/winfileexplorer.vim	/^  let g:explHideFiles=''$/
g:explSortBy	plugin/winfileexplorer.vim	/^  let g:explSortBy='name'$/
g:explSplitBelow	plugin/winfileexplorer.vim	/^  let g:explSplitBelow = &splitbelow$/
g:explSplitRight	plugin/winfileexplorer.vim	/^  let g:explSplitRight = &splitright$/
g:explStartBelow	plugin/winfileexplorer.vim	/^  let g:explStartBelow = g:explSplitBelow$/
g:explStartRight	plugin/winfileexplorer.vim	/^  let g:explStartRight = g:explSplitRight$/
g:explSuffixesLast	plugin/winfileexplorer.vim	/^  let g:explSuffixesLast=1$/
g:explUseSeparators	plugin/winfileexplorer.vim	/^  let g:explUseSeparators=0$/
g:explVertical	plugin/winfileexplorer.vim	/^  let g:explVertical=0$/
g:explWinSize	plugin/winfileexplorer.vim	/^  let g:explWinSize=15$/
g:flydiff_direction	plugin/flydiff.vim	/^  let g:flydiff_direction = 'vertical rightbelow'$/
g:flydiff_filetype	plugin/flydiff.vim	/^  let g:flydiff_filetype = 'diff'$/
g:flydiff_timing	plugin/flydiff.vim	/^  let g:flydiff_timing = 'realtime'$/
g:fontshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^let g:fontshortcuts = ''$/
g:generalshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^let g:generalshortcuts = ''$/
g:getscript_cygwin	autoload/getscript.vim	/^   let g:getscript_cygwin= 0$/
g:getscript_cygwin	autoload/getscript.vim	/^   let g:getscript_cygwin= 1$/
g:getscript_cygwin	autoload/getscript.vim	/^  let g:getscript_cygwin= 0$/
g:getscript_shq	autoload/getscript.vim	/^   let g:getscript_shq= "'"$/
g:getscript_shq	autoload/getscript.vim	/^   let g:getscript_shq= '"'$/
g:getscript_shq	autoload/getscript.vim	/^  let g:getscript_shq= "'"$/
g:getscript_shq	autoload/getscript.vim	/^  let g:getscript_shq= &shq$/
g:getscript_shq	autoload/getscript.vim	/^  let g:getscript_shq= &sxq$/
g:getscript_shq	autoload/getscript.vim	/^ let g:getscript_shq= g:netrw_shq$/
g:ghc	compiler/ghc.vim	/^    let g:ghc = 'ghc'$/
g:ghc	ftplugin/haskell_doc.vim	/^    let g:ghc = 'ghc'$/
g:ghc_pkg	ftplugin/haskell_doc.vim	/^  let g:ghc_pkg = substitute(g:ghc,'\\(.*\\)ghc','\\1ghc-pkg','')$/
g:haddock_browser_callformat	ftplugin/haskell_doc.vim	/^      let g:haddock_browser_callformat = '%s %s '.printf(&shellredir,'\/dev\/null').' &'$/
g:haddock_browser_callformat	ftplugin/haskell_doc.vim	/^      let g:haddock_browser_callformat = '%s %s'$/
g:haddock_browser_callformat	ftplugin/haskell_doc.vim	/^    let g:haddock_browser_callformat = 'start %s "%s"'$/
g:haddock_index	ftplugin/haskell_doc.vim	/^let g:haddock_index = {}$/
g:haddock_moduleindex	ftplugin/haskell_doc.vim	/^let g:haddock_moduleindex = {}$/
g:haskell_functions	compiler/ghc.vim	/^let g:haskell_functions = "ghc"$/
g:haskell_search_engines	ftplugin/haskell_doc.vim	/^  let g:haskell_search_engines = $/
g:keywordprg	plugin/altkwprg.vim	/^  let g:keywordprg = '{ man <count> <keyword> | col -b; }'$/
g:ku_acc_style	autoload/ku.vim	/^  let g:ku_acc_style = ''  " A comma-separated list of words.$/
g:ku_buffer_name	autoload/ku.vim	/^    let g:ku_buffer_name = '*ku*'$/
g:ku_buffer_name	autoload/ku.vim	/^    let g:ku_buffer_name = '[ku]'$/
g:ku_choosing_actions_sorting_style	autoload/ku.vim	/^  let g:ku_choosing_actions_sorting_style = 'by-action'$/
g:ku_common_junk_pattern	autoload/ku.vim	/^  let g:ku_common_junk_pattern = ''$/
g:ku_component_separators	autoload/ku.vim	/^  let g:ku_component_separators = '\/\\:'$/
g:ku_history_added_p	autoload/ku.vim	/^  let g:ku_history_added_p = 'ku#_history_added_p'$/
g:ku_history_fallback_source	autoload/ku/history.vim	/^  let g:ku_history_fallback_source = 'file'$/
g:ku_history_reloading_style	autoload/ku.vim	/^  let g:ku_history_reloading_style = 'idle'$/
g:ku_history_size	autoload/ku.vim	/^  let g:ku_history_size = 1000$/
g:ku_history_sorting_style	autoload/ku/history.vim	/^  let g:ku_history_sorting_style = 'time'$/
g:ku_personal_runtime	autoload/ku.vim	/^    let g:ku_personal_runtime = split(&runtimepath, ',')[0]$/
g:listSep	plugin/libList.vim	/^let g:listSep = ","$/
g:loaded_Align	autoload/Align.vim	/^let g:loaded_Align = "v35"$/
g:loaded_AlignMaps	autoload/AlignMaps.vim	/^let g:loaded_AlignMaps= "v41"$/
g:loaded_AlignMapsPlugin	plugin/AlignMapsPlugin.vim	/^let g:loaded_AlignMapsPlugin = "v41"$/
g:loaded_AlignPlugin	plugin/AlignPlugin.vim	/^let g:loaded_AlignPlugin = "v35"$/
g:loaded_Decho	plugin/Decho.vim	/^let g:loaded_Decho = "v20"$/
g:loaded_DrawIt	autoload/DrawIt.vim	/^let g:loaded_DrawIt= "v10"$/
g:loaded_DrawItPlugin	plugin/DrawItPlugin.vim	/^let g:loaded_DrawItPlugin = "v10"$/
g:loaded_altercmd	plugin/altercmd.vim	/^let g:loaded_altercmd = 1$/
g:loaded_altkwprg	plugin/altkwprg.vim	/^let g:loaded_altkwprg = 1$/
g:loaded_arpeggio	plugin/arpeggio.vim	/^let g:loaded_arpeggio = 1$/
g:loaded_bundle	plugin/bundle.vim	/^let g:loaded_bundle = 1$/
g:loaded_cecutil	plugin/cecutil.vim	/^let g:loaded_cecutil = "v18b"$/
g:loaded_exjumplist	plugin/exjumplist.vim	/^let g:loaded_exjumplist = 1$/
g:loaded_fakeclip	plugin/fakeclip.vim	/^let g:loaded_fakeclip = 1$/
g:loaded_flydiff	plugin/flydiff.vim	/^let g:loaded_flydiff = 1$/
g:loaded_getscript	autoload/getscript.vim	/^let g:loaded_getscript= "v29"$/
g:loaded_getscriptPlugin	plugin/getscriptPlugin.vim	/^let g:loaded_getscriptPlugin = "v29"$/
g:loaded_grex	plugin/grex.vim	/^let g:loaded_grex = 1$/
g:loaded_ku	plugin/ku.vim	/^let g:loaded_ku = 1$/
g:loaded_let_modeline	macros/let-modeline.vim	/^let g:loaded_let_modeline = 1$/
g:loaded_manpageview	autoload/manpageview.vim	/^let g:loaded_manpageview = "v22"$/
g:loaded_menu_map	macros/menu-map.vim	/^let g:loaded_menu_map = 1  $/
g:loaded_metarw	plugin/metarw.vim	/^let g:loaded_metarw = 1$/
g:loaded_narrow	plugin/narrow.vim	/^let g:loaded_narrow = 1$/
g:loaded_netrw	autoload/netrw.vim	/^let g:loaded_netrw = "v136"$/
g:loaded_netrwFileHandlers	autoload/netrwFileHandlers.vim	/^let g:loaded_netrwFileHandlers= "v10"$/
g:loaded_netrwPlugin	plugin/netrwPlugin.vim	/^let g:loaded_netrwPlugin = "v136"$/
g:loaded_netrwSettings	autoload/netrwSettings.vim	/^let g:loaded_netrwSettings = "v13"$/
g:loaded_operator_replace	plugin/operator/replace.vim	/^let g:loaded_operator_replace = 1$/
g:loaded_perlsupportgui	autoload/perlsupportgui.vim	/^let g:loaded_perlsupportgui = "v1.0"$/
g:loaded_perlsupportregex	autoload/perlsupportprofiling.vim	/^let g:loaded_perlsupportregex = "v1.0"$/
g:loaded_perlsupportregex	autoload/perlsupportregex.vim	/^let g:loaded_perlsupportregex = "v1.0"$/
g:loaded_repeat	plugin/repeat.vim	/^let g:loaded_repeat = 1$/
g:loaded_scratch	plugin/scratch.vim	/^let g:loaded_scratch = 1$/
g:loaded_skeleton	plugin/skeleton.vim	/^let g:loaded_skeleton = 1$/
g:loaded_smarttill	plugin/smarttill.vim	/^let g:loaded_smarttill = 1$/
g:loaded_smartword	plugin/smartword.vim	/^let g:loaded_smartword = 1$/
g:loaded_surround	plugin/surround.vim	/^let g:loaded_surround = 1$/
g:loaded_syntax_completion	autoload/syntaxcomplete.vim	/^let g:loaded_syntax_completion = 40$/
g:loaded_syntax_info	syntax/info.vim	/^let g:loaded_syntax_info= "v1"$/
g:loaded_system_utils_vim	plugin/system_utils.vim	/^let g:loaded_system_utils_vim = 1$/
g:loaded_textobj_datetime	plugin/textobj/datetime.vim	/^let g:loaded_textobj_datetime = 1$/
g:loaded_textobj_diff	plugin/textobj/diff.vim	/^let g:loaded_textobj_diff = 1$/
g:loaded_textobj_entire	plugin/textobj/entire.vim	/^let g:loaded_textobj_entire = 1$/
g:loaded_textobj_fold	plugin/textobj/fold.vim	/^let g:loaded_textobj_fold = 1$/
g:loaded_textobj_function	plugin/textobj/function.vim	/^let g:loaded_textobj_function = 1$/
g:loaded_textobj_indent	plugin/textobj/indent.vim	/^let g:loaded_textobj_indent = 1$/
g:loaded_textobj_jabraces	plugin/textobj/jabraces.vim	/^let g:loaded_textobj_jabraces = 1$/
g:loaded_textobj_lastpat	plugin/textobj/lastpat.vim	/^let g:loaded_textobj_lastpat = 1$/
g:loaded_textobj_syntax	plugin/textobj/syntax.vim	/^let g:loaded_textobj_syntax = 1$/
g:loaded_ui_functions	plugin/ui-functions.vim	/^let g:loaded_ui_functions = 1$/
g:loaded_vcsi	plugin/vcsi.vim	/^let g:loaded_vcsi = 1$/
g:loaded_vimball	autoload/vimball.vim	/^let g:loaded_vimball = "v30"$/
g:loaded_vimballPlugin	plugin/vimballPlugin.vim	/^let g:loaded_vimballPlugin = "v30"$/
g:loaded_wwwsearch	plugin/wwwsearch.vim	/^let g:loaded_wwwsearch = 1$/
g:makeArgumentList	autoload/genutils.vim	/^let g:makeArgumentList = 'exec genutils#MakeArgumentList()'$/
g:makeArgumentString	autoload/genutils.vim	/^let g:makeArgumentString = 'exec genutils#MakeArgumentString()'$/
g:manpageview_K_i	autoload/manpageview.vim	/^ let g:manpageview_K_i       = "<sid>ManPageInfo(0)"$/
g:manpageview_K_php	autoload/manpageview.vim	/^ let g:manpageview_K_php       = "<sid>ManPagePhp()"$/
g:manpageview_K_tex	autoload/manpageview.vim	/^ let g:manpageview_K_tex      = "<sid>ManPageTex()"$/
g:manpageview_init_i	autoload/manpageview.vim	/^ let g:manpageview_init_i    = "call ManPageInfoInit()"$/
g:manpageview_lookup_tex	autoload/manpageview.vim	/^ let g:manpageview_lookup_tex = "<sid>ManPageTexLookup"$/
g:manpageview_multimanpage	autoload/manpageview.vim	/^ let g:manpageview_multimanpage= 1$/
g:manpageview_nospace_php	autoload/manpageview.vim	/^ let g:manpageview_nospace_php = 1$/
g:manpageview_options	autoload/manpageview.vim	/^ let g:manpageview_options= ""$/
g:manpageview_options_i	autoload/manpageview.vim	/^ let g:manpageview_options_i = "--output=-"$/
g:manpageview_options_pl	autoload/manpageview.vim	/^ let g:manpageview_options_pl = ";-f;-q"$/
g:manpageview_pgm	autoload/manpageview.vim	/^ let g:manpageview_pgm= "man"$/
g:manpageview_pgm_i	autoload/manpageview.vim	/^ let g:manpageview_pgm_i     = "info"$/
g:manpageview_pgm_php	autoload/manpageview.vim	/^ let g:manpageview_pgm_php     = "links -dump http:\/\/www.php.net\/"$/
g:manpageview_pgm_pl	autoload/manpageview.vim	/^ let g:manpageview_pgm_pl     = "perldoc"$/
g:manpageview_pgm_tex	autoload/manpageview.vim	/^ let g:manpageview_pgm_tex    = "links ".g:manpageview_hypertext_tex$/
g:manpageview_rsh	autoload/manpageview.vim	/^ let g:manpageview_rsh= "rsh"$/
g:manpageview_syntax_i	autoload/manpageview.vim	/^ let g:manpageview_syntax_i  = "info"$/
g:manpageview_syntax_php	autoload/manpageview.vim	/^ let g:manpageview_syntax_php  = "manphp"$/
g:manpageview_winopen	autoload/manpageview.vim	/^ let g:manpageview_winopen= "hsplit"$/
g:mathshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^let g:mathshortcuts = ''$/
g:miniBufExplBufList	plugin/minibufexpl.vim	/^  let g:miniBufExplBufList = ''$/
g:miniBufExplDoneClickSave	plugin/minibufexpl.vim	/^    let  g:miniBufExplDoneClickSave = 1$/
g:miniBufExplForceDisplay	plugin/minibufexpl.vim	/^  let g:miniBufExplForceDisplay = 0$/
g:miniBufExplForceSyntaxEnable	plugin/minibufexpl.vim	/^  let g:miniBufExplForceSyntaxEnable = 0$/
g:miniBufExplInAutoUpdate	plugin/minibufexpl.vim	/^  let g:miniBufExplInAutoUpdate = 0$/
g:miniBufExplMapCTabSwitchBufs	plugin/minibufexpl.vim	/^  let g:miniBufExplMapCTabSwitchBufs = 0$/
g:miniBufExplMapCTabSwitchWindows	plugin/minibufexpl.vim	/^  let g:miniBufExplMapCTabSwitchWindows = 0$/
g:miniBufExplMapWindowNav	plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNav = 0$/
g:miniBufExplMapWindowNavArrows	plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNavArrows = 0$/
g:miniBufExplMapWindowNavVim	plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNavVim = 0$/
g:miniBufExplMaxHeight	plugin/minibufexpl.vim	/^  let g:miniBufExplMaxHeight = 0$/
g:miniBufExplMaxSize	plugin/minibufexpl.vim	/^  let g:miniBufExplMaxSize = g:miniBufExplMaxHeight$/
g:miniBufExplMinHeight	plugin/minibufexpl.vim	/^  let g:miniBufExplMinHeight = 1$/
g:miniBufExplMinSize	plugin/minibufexpl.vim	/^  let g:miniBufExplMinSize = g:miniBufExplMinHeight$/
g:miniBufExplModSelTarget	plugin/minibufexpl.vim	/^  let g:miniBufExplModSelTarget = 0$/
g:miniBufExplSplitBelow	plugin/minibufexpl.vim	/^  let g:miniBufExplSplitBelow = &splitbelow$/
g:miniBufExplSplitToEdge	plugin/minibufexpl.vim	/^  let g:miniBufExplSplitToEdge = 1$/
g:miniBufExplTabWrap	plugin/minibufexpl.vim	/^  let g:miniBufExplTabWrap = 0$/
g:miniBufExplUseSingleClick	plugin/minibufexpl.vim	/^  let g:miniBufExplUseSingleClick = 0$/
g:miniBufExplVSplit	plugin/minibufexpl.vim	/^  let g:miniBufExplVSplit = 0$/
g:miniBufExplorerAutoUpdate	plugin/minibufexpl.vim	/^  let g:miniBufExplorerAutoUpdate = 0$/
g:miniBufExplorerDebugLevel	plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugLevel = 0 $/
g:miniBufExplorerDebugMode	plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugMode = 3 $/
g:miniBufExplorerDebugOutput	plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugOutput = ''$/
g:miniBufExplorerMoreThanOne	plugin/minibufexpl.vim	/^  let g:miniBufExplorerMoreThanOne = 2$/
g:netrw_cursorline	autoload/netrw.vim	/^ let g:netrw_cursorline= 1$/
g:netrw_cygwin	autoload/netrw.vim	/^   let g:netrw_cygwin= 0$/
g:netrw_cygwin	autoload/netrw.vim	/^   let g:netrw_cygwin= 1$/
g:netrw_cygwin	autoload/netrw.vim	/^  let g:netrw_cygwin= 0$/
g:netrw_cygwin	autoload/vimball.vim	/^    let g:netrw_cygwin= 0$/
g:netrw_cygwin	autoload/vimball.vim	/^    let g:netrw_cygwin= 1$/
g:netrw_cygwin	autoload/vimball.vim	/^   let g:netrw_cygwin= 0$/
g:netrw_dav_cmd	autoload/netrw.vim	/^  let g:netrw_dav_cmd	= "cadaver"$/
g:netrw_dav_cmd	autoload/netrw.vim	/^  let g:netrw_dav_cmd	= "curl"$/
g:netrw_dav_cmd	autoload/netrw.vim	/^  let g:netrw_dav_cmd   = ""$/
g:netrw_fetch_cmd	autoload/netrw.vim	/^  let g:netrw_fetch_cmd	= ""$/
g:netrw_fetch_cmd	autoload/netrw.vim	/^  let g:netrw_fetch_cmd	= "fetch -o"$/
g:netrw_ftp_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_cmd	= "ftp"$/
g:netrw_ftp_list_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_list_cmd     = "dir"$/
g:netrw_ftp_list_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_list_cmd     = "ls -lF"$/
g:netrw_ftp_sizelist_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_sizelist_cmd = "dir"$/
g:netrw_ftp_sizelist_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_sizelist_cmd = "ls -slF"$/
g:netrw_ftp_timelist_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_timelist_cmd = "dir"$/
g:netrw_ftp_timelist_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_timelist_cmd = "ls -tlF"$/
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd	= ""$/
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd	= "curl"$/
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd	= "fetch"$/
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd	= "wget"$/
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd = "elinks"$/
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd = "links"$/
g:netrw_ignorenetrc	autoload/netrw.vim	/^  let g:netrw_ignorenetrc= 0$/
g:netrw_ignorenetrc	autoload/netrw.vim	/^  let g:netrw_ignorenetrc= 1$/
g:netrw_list_cmd	autoload/netrw.vim	/^  let g:netrw_list_cmd= ""$/
g:netrw_list_cmd	autoload/netrw.vim	/^  let g:netrw_list_cmd= g:netrw_scp_cmd." -ls USEPORT HOSTNAME:"$/
g:netrw_list_cmd	autoload/netrw.vim	/^  let g:netrw_list_cmd= g:netrw_ssh_cmd." USEPORT HOSTNAME ls -FLa"$/
g:netrw_list_cmd	autoload/netrw.vim	/^ let g:netrw_list_cmd= g:netrw_list_cmd." -l"$/
g:netrw_liststyle	autoload/netrw.vim	/^ let g:netrw_liststyle= s:THINLIST$/
g:netrw_localcopycmd	autoload/netrw.vim	/^   let g:netrw_localcopycmd= "copy"$/
g:netrw_localcopycmd	autoload/netrw.vim	/^   let g:netrw_localcopycmd= "cp"$/
g:netrw_localcopycmd	autoload/netrw.vim	/^  let g:netrw_localcopycmd= ""$/
g:netrw_localcopycmd	autoload/netrw.vim	/^  let g:netrw_localcopycmd= "cp"$/
g:netrw_localmovecmd	autoload/netrw.vim	/^   let g:netrw_localmovecmd= "move"$/
g:netrw_localmovecmd	autoload/netrw.vim	/^   let g:netrw_localmovecmd= "mv"$/
g:netrw_localmovecmd	autoload/netrw.vim	/^  let g:netrw_localmovecmd= ""$/
g:netrw_localmovecmd	autoload/netrw.vim	/^  let g:netrw_localmovecmd= "mv"$/
g:netrw_scp_cmd	autoload/netrw.vim	/^   let g:netrw_scp_cmd ="pscp -i C:\\\\private.ppk"$/
g:netrw_sort_sequence	autoload/netrw.vim	/^  let g:netrw_sort_sequence= '[\\\/]$,\\.h$,\\.c$,\\.cpp$,*,\\.o$,\\.obj$,\\.info$,\\.swp$,\\.bak$,\\~$'$/
g:netrw_sort_sequence	autoload/netrw.vim	/^  let g:netrw_sort_sequence= '[\\\/]$,\\<core\\%(\\.\\d\\+\\)\\=\\>,\\.h$,\\.c$,\\.cpp$,*,\\.o$,\\.obj$,\\.info$,\\.swp$,\\.bak$,\\~$'$/
g:numRefs	plugin/winmanager.vim	/^let g:numRefs = 0$/
g:omni_syntax_ignorecase	autoload/syntaxcomplete.vim	/^    let g:omni_syntax_ignorecase = &ignorecase$/
g:omni_syntax_minimum_length	autoload/syntaxcomplete.vim	/^    let g:omni_syntax_minimum_length = 0$/
g:omni_syntax_use_iskeyword	autoload/syntaxcomplete.vim	/^    let g:omni_syntax_use_iskeyword = 1$/
g:persistentBehaviour	plugin/winmanager.vim	/^	let g:persistentBehaviour = 1$/
g:pythonthreadclassinitialized	autoload/tovl/runtaskinbackground.vim	/^let g:pythonthreadclassinitialized=1$/
g:saveTagsDisplay	plugin/wintagexplorer.vim	/^	let g:saveTagsDisplay = 1$/
g:scratch_buffer_name	plugin/scratch.vim	/^  let g:scratch_buffer_name = '*Scratch*'$/
g:scratch_show_command	plugin/scratch.vim	/^  let g:scratch_show_command = 'topleft split | hide buffer'$/
g:sectionshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^let g:sectionshortcuts = ''$/
g:settings_file	autoload/vl/lib/vimscript/scriptsettings.vim	/^let g:settings_file = vl#lib#vimscript#scriptsettings#GetValueByNameOrDefault('g:settings_file',vl#settings#DotvimDir().'script_settings')$/
g:shim_defaultWindowSize	plugin/shim.vim	/^    let g:shim_defaultWindowSize = 15$/
g:shim_ghciArgs	plugin/shim.vim	/^    let g:shim_ghciArgs = ""$/
g:shim_ghciInterp	plugin/shim.vim	/^    let g:shim_ghciInterp = "ghci"$/
g:shim_ghciPrompt	plugin/shim.vim	/^    let g:shim_ghciPrompt = "^[\\*A-Z][A-Za-z0-9\\. ]+>"$/
g:shim_ghciTimeout	plugin/shim.vim	/^    let g:shim_ghciTimeout = 10$/
g:shim_jumpToGhci	plugin/shim.vim	/^    let g:shim_jumpToGhci = "false"$/
g:shim_quickfix	plugin/shim.vim	/^    let g:shim_quickfix = "true"$/
g:submode_keyseqs_to_leave	autoload/submode.vim	/^  let g:submode_keyseqs_to_leave = ['<Esc>']$/
g:submode_timeout	autoload/submode.vim	/^  let g:submode_timeout = &timeout$/
g:submode_timeoutlen	autoload/submode.vim	/^  let g:submode_timeoutlen = &timeoutlen$/
g:tex_fold_enabled	syntax/tex.vim	/^ let g:tex_fold_enabled= 0$/
g:tex_indent_items	indent/tex.vim	/^  let g:tex_indent_items = 1$/
g:tex_no_error	syntax/tex.vim	/^ let g:tex_no_error= 1$/
g:tlist_tex_settings	ftplugin/latex-suite/main.vim	/^		let g:tlist_tex_settings = 'tex;s:section;c:chapter;l:label;r:ref'$/
g:tovl_feature_id_counts	autoload/tovl/featureset.vim	/^  let g:tovl_feature_id_counts = {}$/
g:tovl_feature_tags	autoload/tovl/featureset.vim	/^  let g:tovl_feature_tags = []$/
g:vcsi_diff_in_commit_buffer_p	plugin/vcsi.vim	/^  let g:vcsi_diff_in_commit_buffer_p = 0$/
g:vcsi_echo_script_p	plugin/vcsi.vim	/^  let g:vcsi_echo_script_p = 1$/
g:vcsi_open_command	plugin/vcsi.vim	/^  let g:vcsi_open_command = 'belowright new'$/
g:vcsi_status_in_commit_buffer_p	plugin/vcsi.vim	/^  let g:vcsi_status_in_commit_buffer_p = 0$/
g:vcsi_use_native_message_p	plugin/vcsi.vim	/^  let g:vcsi_use_native_message_p = 0$/
g:vimball_mkdir	autoload/vimball.vim	/^   let g:vimball_mkdir= "makedir"$/
g:vimball_mkdir	autoload/vimball.vim	/^   let g:vimball_mkdir= "mkdir"$/
g:vimball_mkdir	autoload/vimball.vim	/^   let g:vimball_mkdir= g:netrw_local_mkdir$/
g:vimrplugin_browser_time	ftplugin/r.vim	/^  let g:vimrplugin_browser_time = 4$/
g:vimrplugin_browser_time	ftplugin/rhelp.vim	/^  let g:vimrplugin_browser_time = 4$/
g:vimrplugin_browser_time	ftplugin/rnoweb.vim	/^  let g:vimrplugin_browser_time = 4$/
g:vimrplugin_term	ftplugin/r.vim	/^      let g:vimrplugin_term = term$/
g:vimrplugin_term	ftplugin/rhelp.vim	/^      let g:vimrplugin_term = term$/
g:vimrplugin_term	ftplugin/rnoweb.vim	/^      let g:vimrplugin_term = term$/
g:wget	ftplugin/haskell_hpaste.vim	/^    let g:wget = "!c:\\\\cygwin\\\\bin\\\\wget -q"$/
g:wget	ftplugin/haskell_hpaste.vim	/^    let g:wget = "!wget -q"$/
g:winManagerWidth	plugin/winmanager.vim	/^	let g:winManagerWidth = 25$/
g:winManagerWindowLayout	plugin/winmanager.vim	/^	let g:winManagerWindowLayout = "FileExplorer,TagsExplorer|BufExplorer"$/
g:xmldata_svg11	autoload/xml/svg11.vim	/^let g:xmldata_svg11 = {$/
gather_items_from_archive	autoload/ku/file.vim	/^function! s:gather_items_from_archive(_)  "{{{2$/
gather_items_from_directory	autoload/ku/file.vim	/^function! s:gather_items_from_directory(_)  "{{{2$/
genutils#AddNotifyWindowClose	autoload/genutils.vim	/^function! genutils#AddNotifyWindowClose(windowTitle, functionName)$/
genutils#AddToFCShellPre	autoload/genutils.vim	/^function! genutils#AddToFCShellPre(funcName)$/
genutils#AlignWordWithWordInPreviousLine	autoload/genutils.vim	/^function! genutils#AlignWordWithWordInPreviousLine()$/
genutils#ArrayVarExists	autoload/genutils.vim	/^function! genutils#ArrayVarExists(varName, index)$/
genutils#BinInsertSort	autoload/genutils.vim	/^function! genutils#BinInsertSort(cmp, direction) range$/
genutils#BinInsertSort2	autoload/genutils.vim	/^function! genutils#BinInsertSort2(start, end, cmp, direction, accessor, mover, context)$/
genutils#BinSearchForInsert	autoload/genutils.vim	/^function! genutils#BinSearchForInsert(start, end, line, cmp, direction)$/
genutils#BinSearchForInsert2	autoload/genutils.vim	/^function! genutils#BinSearchForInsert2(start, end, line, cmp, direction,$/
genutils#BinSearchList	autoload/genutils.vim	/^function! genutils#BinSearchList(list, start, end, item, cmp)$/
genutils#CenterWordInSpace	autoload/genutils.vim	/^function! genutils#CenterWordInSpace()$/
genutils#CheckWindowClose	autoload/genutils.vim	/^function! genutils#CheckWindowClose()$/
genutils#CleanDiffOptions	autoload/genutils.vim	/^function! genutils#CleanDiffOptions()$/
genutils#CleanupFileName	autoload/genutils.vim	/^function! genutils#CleanupFileName(fileName)$/
genutils#CleanupFileName2	autoload/genutils.vim	/^function! genutils#CleanupFileName2(fileName, win32ProtectedChars)$/
genutils#ClearAllSigns	autoload/genutils.vim	/^function! genutils#ClearAllSigns()$/
genutils#CloseWinNoEa	autoload/genutils.vim	/^function! genutils#CloseWinNoEa(winnr, force)$/
genutils#CloseWindow	autoload/genutils.vim	/^function! genutils#CloseWindow(win, force)$/
genutils#CmpByLength	autoload/genutils.vim	/^function! genutils#CmpByLength(line1, line2, ...)$/
genutils#CmpByLineLengthNname	autoload/genutils.vim	/^function! genutils#CmpByLineLengthNname(line1, line2, ...)$/
genutils#CmpByNumber	autoload/genutils.vim	/^function! genutils#CmpByNumber(line1, line2, ...)$/
genutils#CmpByString	autoload/genutils.vim	/^function! genutils#CmpByString(line1, line2, ...)$/
genutils#CmpByStringIgnoreCase	autoload/genutils.vim	/^function! genutils#CmpByStringIgnoreCase(line1, line2, ...)$/
genutils#CmpJavaImports	autoload/genutils.vim	/^function! genutils#CmpJavaImports(line1, line2, ...)$/
genutils#CommonPath	autoload/genutils.vim	/^function! genutils#CommonPath(path1, path2, ...)$/
genutils#CommonString	autoload/genutils.vim	/^function! genutils#CommonString(str1, str2)$/
genutils#CrUnProtectedCharsPattern	autoload/genutils.vim	/^function! genutils#CrUnProtectedCharsPattern(chars, ...)$/
genutils#CreateArgString	autoload/genutils.vim	/^function! genutils#CreateArgString(argList, sep, ...)$/
genutils#CurLineHasSign	autoload/genutils.vim	/^function! genutils#CurLineHasSign()$/
genutils#DeEscape	autoload/genutils.vim	/^function! genutils#DeEscape(str)$/
genutils#DebugShowArgs	autoload/genutils.vim	/^function! genutils#DebugShowArgs(...)$/
genutils#DefFCShellInstall	autoload/genutils.vim	/^function! genutils#DefFCShellInstall()$/
genutils#DefFCShellUninstall	autoload/genutils.vim	/^function! genutils#DefFCShellUninstall()$/
genutils#DefFileChangedShell	autoload/genutils.vim	/^function! genutils#DefFileChangedShell()$/
genutils#EatChar	autoload/genutils.vim	/^function! genutils#EatChar(pat)$/
genutils#Escape	autoload/genutils.vim	/^function! genutils#Escape(str, chars)$/
genutils#EscapeCommand	autoload/genutils.vim	/^function! genutils#EscapeCommand(cmd, args, pipe)$/
genutils#ExpandStr	autoload/genutils.vim	/^function! genutils#ExpandStr(str)$/
genutils#ExtractFuncListing	autoload/genutils.vim	/^function! genutils#ExtractFuncListing(funcName, hLines, tLines)$/
genutils#FindBufferForName	autoload/genutils.vim	/^function! genutils#FindBufferForName(fileName)$/
genutils#FindWindowForBuffer	autoload/genutils.vim	/^function! genutils#FindWindowForBuffer(bufferName, checkUnlisted)$/
genutils#GetBufNameForAu	autoload/genutils.vim	/^function! genutils#GetBufNameForAu(bufName)$/
genutils#GetColPosition	autoload/genutils.vim	/^function! genutils#GetColPosition(id)$/
genutils#GetLastWinnrInStack	autoload/genutils.vim	/^function! genutils#GetLastWinnrInStack(dir)$/
genutils#GetLinePosition	autoload/genutils.vim	/^function! genutils#GetLinePosition(id)$/
genutils#GetNextWinnrInStack	autoload/genutils.vim	/^function! genutils#GetNextWinnrInStack(dir)$/
genutils#GetPersistentVar	autoload/genutils.vim	/^function! genutils#GetPersistentVar(pluginName, persistentVar, default)$/
genutils#GetPreviewWinnr	autoload/genutils.vim	/^function! genutils#GetPreviewWinnr()$/
genutils#GetSelectedIndex	autoload/genutils.vim	/^function! genutils#GetSelectedIndex()$/
genutils#GetShellEnvType	autoload/genutils.vim	/^function! genutils#GetShellEnvType()$/
genutils#GetSpacer	autoload/genutils.vim	/^function! genutils#GetSpacer(width)$/
genutils#GetVimCmdOutput	autoload/genutils.vim	/^function! genutils#GetVimCmdOutput(cmd)$/
genutils#IsOnlyHorizontalWindow	autoload/genutils.vim	/^function! genutils#IsOnlyHorizontalWindow()$/
genutils#IsOnlyVerticalWindow	autoload/genutils.vim	/^function! genutils#IsOnlyVerticalWindow()$/
genutils#IsPositionSet	autoload/genutils.vim	/^function! genutils#IsPositionSet(id)$/
genutils#MakeArgumentList	autoload/genutils.vim	/^function! genutils#MakeArgumentList(...)$/
genutils#MakeArgumentString	autoload/genutils.vim	/^function! genutils#MakeArgumentString(...)$/
genutils#MapAppendCascaded	autoload/genutils.vim	/^function! genutils#MapAppendCascaded(lhs, rhs, mapMode)$/
genutils#MarkActiveWindow	autoload/genutils.vim	/^function! genutils#MarkActiveWindow()$/
genutils#MoveCurLineToWinLine	autoload/genutils.vim	/^function! genutils#MoveCurLineToWinLine(n)$/
genutils#MoveCursorToLastInWinStack	autoload/genutils.vim	/^function! genutils#MoveCursorToLastInWinStack(dir)$/
genutils#MoveCursorToNextInWinStack	autoload/genutils.vim	/^function! genutils#MoveCursorToNextInWinStack(dir)$/
genutils#MoveCursorToWindow	autoload/genutils.vim	/^function! genutils#MoveCursorToWindow(winno)$/
genutils#NumberOfWindows	autoload/genutils.vim	/^function! genutils#NumberOfWindows()$/
genutils#OnMS	autoload/genutils.vim	/^function! genutils#OnMS()$/
genutils#OpenWinNoEa	autoload/genutils.vim	/^function! genutils#OpenWinNoEa(winOpenCmd)$/
genutils#OptClearBuffer	autoload/genutils.vim	/^function! genutils#OptClearBuffer()$/
genutils#PathIsAbsolute	autoload/genutils.vim	/^function! genutils#PathIsAbsolute(path)$/
genutils#PathIsFileNameOnly	autoload/genutils.vim	/^function! genutils#PathIsFileNameOnly(path)$/
genutils#PromptForElement	autoload/genutils.vim	/^function! genutils#PromptForElement(array, default, msg, skip, useDialog,$/
genutils#PutPersistentVar	autoload/genutils.vim	/^function! genutils#PutPersistentVar(pluginName, persistentVar, value)$/
genutils#QSort	autoload/genutils.vim	/^function! genutils#QSort(cmp, direction) range$/
genutils#QSort2	autoload/genutils.vim	/^function! genutils#QSort2(start, end, cmp, direction, accessor, swapper, context)$/
genutils#QuoteStr	autoload/genutils.vim	/^function! genutils#QuoteStr(str)$/
genutils#RelPathFromDir	autoload/genutils.vim	/^function! genutils#RelPathFromDir(srcDir, tgtFile)$/
genutils#RelPathFromFile	autoload/genutils.vim	/^function! genutils#RelPathFromFile(srcFile, tgtFile)$/
genutils#RemoveFromFCShellPre	autoload/genutils.vim	/^function! genutils#RemoveFromFCShellPre(funcName)$/
genutils#RemoveNotifyWindowClose	autoload/genutils.vim	/^function! genutils#RemoveNotifyWindowClose(windowTitle)$/
genutils#ResetHardPosition	autoload/genutils.vim	/^function! genutils#ResetHardPosition(id)$/
genutils#ResetHardPositionWithContext	autoload/genutils.vim	/^function! genutils#ResetHardPositionWithContext(id)$/
genutils#ResetSoftPosition	autoload/genutils.vim	/^function! genutils#ResetSoftPosition(id)$/
genutils#ResetWindowSettings	autoload/genutils.vim	/^function! genutils#ResetWindowSettings()$/
genutils#ResetWindowSettings2	autoload/genutils.vim	/^function! genutils#ResetWindowSettings2(id)$/
genutils#RestoreActiveWindow	autoload/genutils.vim	/^function! genutils#RestoreActiveWindow()$/
genutils#RestoreHardPosition	autoload/genutils.vim	/^function! genutils#RestoreHardPosition(id)$/
genutils#RestoreHardPositionWithContext	autoload/genutils.vim	/^function! genutils#RestoreHardPositionWithContext(id)$/
genutils#RestoreSoftPosition	autoload/genutils.vim	/^function! genutils#RestoreSoftPosition(id)$/
genutils#RestoreVisualSelection	autoload/genutils.vim	/^function! genutils#RestoreVisualSelection(id)$/
genutils#RestoreWindowSettings	autoload/genutils.vim	/^function! genutils#RestoreWindowSettings()$/
genutils#RestoreWindowSettings2	autoload/genutils.vim	/^function! genutils#RestoreWindowSettings2(id)$/
genutils#Roman2Decimal	autoload/genutils.vim	/^function! genutils#Roman2Decimal(str)$/
genutils#SaveHardPosition	autoload/genutils.vim	/^function! genutils#SaveHardPosition(id)$/
genutils#SaveHardPositionWithContext	autoload/genutils.vim	/^function! genutils#SaveHardPositionWithContext(id)$/
genutils#SaveSoftPosition	autoload/genutils.vim	/^function! genutils#SaveSoftPosition(id)$/
genutils#SaveVisualSelection	autoload/genutils.vim	/^function! genutils#SaveVisualSelection(id)$/
genutils#SaveWindowSettings	autoload/genutils.vim	/^function! genutils#SaveWindowSettings()$/
genutils#SaveWindowSettings2	autoload/genutils.vim	/^function! genutils#SaveWindowSettings2(id, overwrite)$/
genutils#SetupScratchBuffer	autoload/genutils.vim	/^function! genutils#SetupScratchBuffer()$/
genutils#ShiftWordInSpace	autoload/genutils.vim	/^function! genutils#ShiftWordInSpace(dir)$/
genutils#ShowLinesWithSyntax	autoload/genutils.vim	/^function! genutils#ShowLinesWithSyntax() range$/
genutils#SilentDelete	autoload/genutils.vim	/^function! genutils#SilentDelete(arg1, ...)$/
genutils#SilentSubstitute	autoload/genutils.vim	/^function! genutils#SilentSubstitute(pat, cmd)$/
genutils#UnEscape	autoload/genutils.vim	/^function! genutils#UnEscape(str, chars)$/
genutils#UserDirComplete2	autoload/genutils.vim	/^function! genutils#UserDirComplete2(ArgLead, CmdLine, CursorPos, ...)$/
genutils#UserFileComplete	autoload/genutils.vim	/^function! genutils#UserFileComplete(ArgLead, CmdLine, CursorPos, smartSlash,$/
genutils#UserFileComplete2	autoload/genutils.vim	/^function! genutils#UserFileComplete2(ArgLead, CmdLine, CursorPos, ...)$/
genutils#UserFileExpand	autoload/genutils.vim	/^function! genutils#UserFileExpand(fileArgs)$/
getFileContents	ftplugin/latex-suite/outline.py	/^def getFileContents(fname):$/
getPath	plugin/NERD_tree.vim	/^function! s:getPath(ln)$/
getSectionLabels	ftplugin/latex-suite/outline.py	/^def getSectionLabels(lineinfo, $/
getSectionLabels_Root	ftplugin/latex-suite/outline.py	/^def getSectionLabels_Root(lineinfo, section_prefix, label_prefix):$/
getTreeWinNum	plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/
get_action_function	autoload/ku.vim	/^function! s:get_action_function(action, composite_p)  "{{{3$/
getchar	plugin/surround.vim	/^function! s:getchar()$/
getkey	autoload/ku.vim	/^function! s:getkey()  "{{{2$/
getscript#GetLatestVimScripts	autoload/getscript.vim	/^fun! getscript#GetLatestVimScripts()$/
gf	ftplugin/haskell_vimlib.vim	/^noremap <buffer> gf :call vl#ui#navigation#gfHandler#HandleGF()<cr>$/
ghc_supported_languages	compiler/ghc.vim	/^  let ghc_supported_languages = split(system(g:ghc . ' --supported-languages'),'\\n')$/
ghc_version	compiler/ghc.vim	/^let ghc_version = substitute(system(g:ghc . ' --numeric-version'),'\\n','','')$/
git_branches	autoload/metarw/git.vim	/^function! s:git_branches(git_dir)  "{{{2$/
git_ls_tree	autoload/metarw/git.vim	/^function! s:git_ls_tree(git_dir, commit_ish, leading_path)  "{{{2$/
glob	ftplugin/latex-suite/pytools.py	/^import string, vim, re, os, glob$/
gpos_to_spos	autoload/textobj/user.vim	/^function! s:gpos_to_spos(gpos)$/
grex#delete	autoload/grex.vim	/^function! grex#delete(...) range  "{{{2$/
grex#operator_delete	autoload/grex.vim	/^function! grex#operator_delete(motion_wise)  "{{{2$/
grex#operator_yank	autoload/grex.vim	/^function! grex#operator_yank(motion_wise)  "{{{2$/
grex#yank	autoload/grex.vim	/^function! grex#yank(...) range  "{{{2$/
gtd#initialize	autoload/gtd.vim	/^function! gtd#initialize()  "{{{2$/
gtd#jump_to_issue	autoload/gtd.vim	/^function! gtd#jump_to_issue()  "{{{2$/
gtd#mark	autoload/gtd.vim	/^function! gtd#mark(section_name)  "{{{2$/
gtd#new_issue	autoload/gtd.vim	/^function! gtd#new_issue()  "{{{2$/
gtd#new_note	autoload/gtd.vim	/^function! gtd#new_note()  "{{{2$/
gtd#status	autoload/gtd.vim	/^function! gtd#status()  "{{{2$/
gx	plugin/netrwPlugin.vim	/^  nmap <unique> gx <Plug>NetrwBrowseX$/
handleMiddleMouse	plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/
has_flag_p	autoload/submode.vim	/^function! s:has_flag_p(s, c)  "{{{2$/
haskellcomplete#CompleteHaskell	plugin/haskellcomplete.vim	/^function! haskellcomplete#CompleteHaskell(findstart, base)$/
haskellcomplete#LoadData	plugin/haskellcomplete.vim	/^function! haskellcomplete#LoadData()$/
haskellmode#GatherImport	autoload/haskellmode.vim	/^function! haskellmode#GatherImport(lineno)$/
haskellmode#GatherImports	autoload/haskellmode.vim	/^function! haskellmode#GatherImports()$/
haskellmode#GetNameSymbol	autoload/haskellmode.vim	/^function! haskellmode#GetNameSymbol(line,col,off)$/
haskellmode#ListElem	autoload/haskellmode.vim	/^function! haskellmode#ListElem(list,elem)$/
haskellmode#ListIntersect	autoload/haskellmode.vim	/^function! haskellmode#ListIntersect(list1,list2)$/
haskellmode#ListUnion	autoload/haskellmode.vim	/^function! haskellmode#ListUnion(list1,list2)$/
haskellmode#ListWithout	autoload/haskellmode.vim	/^function! haskellmode#ListWithout(list1,list2)$/
haskellmode#MergeImport	autoload/haskellmode.vim	/^function! haskellmode#MergeImport(entry,line,hiding,explicit,module)$/
haskellmode#UrlEncode	autoload/haskellmode.vim	/^function! haskellmode#UrlEncode(string)$/
hint_scope	autoload/vspec.vim	/^function! s:hint_scope()  "{{{2$/
hint_sid	autoload/vspec.vim	/^function! s:hint_sid()  "{{{2$/
history_add	autoload/ku.vim	/^function! s:history_add(new_input_pattern, source)  "{{{3$/
history_file	autoload/ku.vim	/^function! s:history_file()  "{{{3$/
history_list	autoload/ku.vim	/^function! s:history_list()  "{{{3$/
history_load	autoload/ku.vim	/^function! s:history_load()  "{{{3$/
history_reload	autoload/ku.vim	/^function! s:history_reload()  "{{{3$/
history_save	autoload/ku.vim	/^function! s:history_save()  "{{{3$/
idwintab#load	autoload/idwintab.vim	/^function! idwintab#load()$/
in_closed_fold_p	plugin/textobj/fold.vim	/^function! s:in_closed_fold_p()$/
in_non_fold_p	plugin/textobj/fold.vim	/^function! s:in_non_fold_p()$/
in_open_fold_p	plugin/textobj/fold.vim	/^function! s:in_open_fold_p()$/
indentLevelFor	plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/
indent_level_of	autoload/textobj/indent.vim	/^function! s:indent_level_of(linenr)  "{{{2$/
initNerdTree	plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/
initNerdTreeInPlace	plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/
initNerdTreeMirror	plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/
initVariable	plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/
initialize_amend_buffer	autoload/vcsi.vim	/^function! s:initialize_amend_buffer(args)  "{{{3$/
initialize_commit_buffer	autoload/vcsi.vim	/^function! s:initialize_commit_buffer(args)  "{{{3$/
initialize_diff_buffer	autoload/vcsi.vim	/^function! s:initialize_diff_buffer(args)  "{{{3$/
initialize_ku_buffer	autoload/ku.vim	/^function! s:initialize_ku_buffer()  "{{{2$/
initialize_log_buffer	autoload/vcsi.vim	/^function! s:initialize_log_buffer(args)  "{{{3$/
initialize_scratch_buffer	autoload/scratch.vim	/^function! s:initialize_scratch_buffer()  "{{{2$/
initialize_status_buffer	autoload/vcsi.vim	/^function! s:initialize_status_buffer(args)  "{{{3$/
inputreplacement	plugin/surround.vim	/^function! s:inputreplacement()$/
inputtarget	plugin/surround.vim	/^function! s:inputtarget()$/
insert	plugin/surround.vim	/^function! s:insert(...) " {{{1$/
insert_mode_p	autoload/submode.vim	/^function! s:insert_mode_p(mode)  "{{{2$/
install_handler	ftplugin/funnel.pl	/^sub install_handler$/
int_execute	autoload/lh/command.vim	/^function! s:int_execute(definition, params)$/
isPresentInFile	ftplugin/latex-suite/pytools.py	/^def isPresentInFile(regexp, filename):$/
isTreeOpen	plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/
isWindowUsable	plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/
j	syntax/manphp.vim	/^  norm! j$/
jumpToChild	plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/
jumpToFirstChild	plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/
jumpToLastChild	plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/
jumpToParent	plugin/NERD_tree.vim	/^function! s:jumpToParent()$/
jumpToRoot	plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/
jumpToSibling	plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/
jumplist_info	autoload/exjumplist.vim	/^function! s:jumplist_info()  "{{{2$/
k	syntax/manphp.vim	/^  norm! k$/
ku#_history_added_p	autoload/ku.vim	/^function! ku#_history_added_p(new_input_pattern, source)$/
ku#_local_variables	autoload/ku.vim	/^function! ku#_local_variables()$/
ku#_omnifunc	autoload/ku.vim	/^function! ku#_omnifunc(findstart, base)  "{{{3$/
ku#_omnifunc_profile	autoload/ku.vim	/^function! ku#_omnifunc_profile(source, pattern, ...)  "{{{3$/
ku#_sid_prefix	autoload/ku.vim	/^function! ku#_sid_prefix()$/
ku#args#action_argdelete	autoload/ku/args.vim	/^function! ku#args#action_argdelete(item)  "{{{3$/
ku#args#action_open	autoload/ku/args.vim	/^function! ku#args#action_open(item)  "{{{3$/
ku#args#action_open_x	autoload/ku/args.vim	/^function! ku#args#action_open_x(item)  "{{{3$/
ku#args#action_table	autoload/ku/args.vim	/^function! ku#args#action_table(source_name_ext)  "{{{2$/
ku#args#available_sources	autoload/ku/args.vim	/^function! ku#args#available_sources()  "{{{2$/
ku#args#gather_items	autoload/ku/args.vim	/^function! ku#args#gather_items(source_name_ext, pattern)  "{{{2$/
ku#args#key_table	autoload/ku/args.vim	/^function! ku#args#key_table(source_name_ext)  "{{{2$/
ku#args#on_source_enter	autoload/ku/args.vim	/^function! ku#args#on_source_enter(source_name_ext)  "{{{2$/
ku#args#special_char_p	autoload/ku/args.vim	/^function! ku#args#special_char_p(source_name_ext, character)  "{{{2$/
ku#available_source_p	autoload/ku.vim	/^function! ku#available_source_p(source)  "{{{2$/
ku#available_sources	autoload/ku.vim	/^function! ku#available_sources()  "{{{2$/
ku#buffer#action_delete	autoload/ku/buffer.vim	/^function! ku#buffer#action_delete(item)  "{{{3$/
ku#buffer#action_open	autoload/ku/buffer.vim	/^function! ku#buffer#action_open(item)  "{{{3$/
ku#buffer#action_open_x	autoload/ku/buffer.vim	/^function! ku#buffer#action_open_x(item)  "{{{3$/
ku#buffer#action_table	autoload/ku/buffer.vim	/^function! ku#buffer#action_table(source_name_ext)  "{{{2$/
ku#buffer#action_unload	autoload/ku/buffer.vim	/^function! ku#buffer#action_unload(item)  "{{{3$/
ku#buffer#action_wipeout	autoload/ku/buffer.vim	/^function! ku#buffer#action_wipeout(item)  "{{{3$/
ku#buffer#available_sources	autoload/ku/buffer.vim	/^function! ku#buffer#available_sources()  "{{{2$/
ku#buffer#gather_items	autoload/ku/buffer.vim	/^function! ku#buffer#gather_items(source_name_ext, pattern)  "{{{2$/
ku#buffer#key_table	autoload/ku/buffer.vim	/^function! ku#buffer#key_table(source_name_ext)  "{{{2$/
ku#buffer#on_source_enter	autoload/ku/buffer.vim	/^function! ku#buffer#on_source_enter(source_name_ext)  "{{{2$/
ku#buffer#special_char_p	autoload/ku/buffer.vim	/^function! ku#buffer#special_char_p(source_name_ext, character)  "{{{2$/
ku#bundle#acc_valid_p	autoload/ku/bundle.vim	/^function! ku#bundle#acc_valid_p(source_name_ext, item, sep)  "{{{2$/
ku#bundle#action_args	autoload/ku/bundle.vim	/^function! ku#bundle#action_args(item)  "{{{2$/
ku#bundle#action_args_x	autoload/ku/bundle.vim	/^function! ku#bundle#action_args_x(item)  "{{{2$/
ku#bundle#action_load	autoload/ku/bundle.vim	/^function! ku#bundle#action_load(item)  "{{{2$/
ku#bundle#action_load_or_args	autoload/ku/bundle.vim	/^function! ku#bundle#action_load_or_args(item)  "{{{2$/
ku#bundle#action_load_x	autoload/ku/bundle.vim	/^function! ku#bundle#action_load_x(item)  "{{{2$/
ku#bundle#action_table	autoload/ku/bundle.vim	/^function! ku#bundle#action_table(source_name_ext)  "{{{2$/
ku#bundle#available_sources	autoload/ku/bundle.vim	/^function! ku#bundle#available_sources()  "{{{2$/
ku#bundle#gather_items	autoload/ku/bundle.vim	/^function! ku#bundle#gather_items(source_name_ext, pattern)  "{{{2$/
ku#bundle#key_table	autoload/ku/bundle.vim	/^function! ku#bundle#key_table(source_name_ext)  "{{{2$/
ku#bundle#on_source_enter	autoload/ku/bundle.vim	/^function! ku#bundle#on_source_enter(source_name_ext)  "{{{2$/
ku#command_complete	autoload/ku.vim	/^function! ku#command_complete(arglead, cmdline, cursorpos)  "{{{2$/
ku#custom_action	autoload/ku.vim	/^function! ku#custom_action(source, action, ...)  "{{{2$/
ku#custom_key	autoload/ku.vim	/^function! ku#custom_key(source, key, action)  "{{{2$/
ku#custom_prefix	autoload/ku.vim	/^function! ku#custom_prefix(source, prefix, text)  "{{{2$/
ku#custom_priority	autoload/ku.vim	/^function! ku#custom_priority(source, priority)  "{{{2$/
ku#default_key_mappings	autoload/ku.vim	/^function! ku#default_key_mappings(override_p)  "{{{2$/
ku#do_action	autoload/ku.vim	/^function! ku#do_action(name)  "{{{2$/
ku#file#_local_variables	autoload/ku/file.vim	/^function! ku#file#_local_variables()$/
ku#file#_sid_prefix	autoload/ku/file.vim	/^function! ku#file#_sid_prefix()$/
ku#file#acc_valid_p	autoload/ku/file.vim	/^function! ku#file#acc_valid_p(source_name_ext, item, sep)  "{{{2$/
ku#file#action_extract_asis	autoload/ku/file.vim	/^function! ku#file#action_extract_asis(item)  "{{{3$/
ku#file#action_extract_smartly	autoload/ku/file.vim	/^function! ku#file#action_extract_smartly(item)  "{{{3$/
ku#file#action_extract_solely	autoload/ku/file.vim	/^function! ku#file#action_extract_solely(item)  "{{{3$/
ku#file#action_open	autoload/ku/file.vim	/^function! ku#file#action_open(item)  "{{{3$/
ku#file#action_open_x	autoload/ku/file.vim	/^function! ku#file#action_open_x(item)  "{{{3$/
ku#file#action_table	autoload/ku/file.vim	/^function! ku#file#action_table(source_name_ext)  "{{{2$/
ku#file#available_sources	autoload/ku/file.vim	/^function! ku#file#available_sources()  "{{{2$/
ku#file#gather_items	autoload/ku/file.vim	/^function! ku#file#gather_items(source_name_ext, pattern)  "{{{2$/
ku#file#key_table	autoload/ku/file.vim	/^function! ku#file#key_table(source_name_ext)  "{{{2$/
ku#file#on_source_enter	autoload/ku/file.vim	/^function! ku#file#on_source_enter(source_name_ext)  "{{{2$/
ku#file#special_char_p	autoload/ku/file.vim	/^function! ku#file#special_char_p(source_name_ext, char)  "{{{2$/
ku#get_the_current_input_pattern	autoload/ku.vim	/^function! ku#get_the_current_input_pattern()  "{{{2$/
ku#history#action_open	autoload/ku/history.vim	/^function! ku#history#action_open(item)  "{{{3$/
ku#history#action_table	autoload/ku/history.vim	/^function! ku#history#action_table(source_name_ext)  "{{{2$/
ku#history#available_sources	autoload/ku/history.vim	/^function! ku#history#available_sources()  "{{{2$/
ku#history#gather_items	autoload/ku/history.vim	/^function! ku#history#gather_items(source_name_ext, pattern)  "{{{2$/
ku#history#key_table	autoload/ku/history.vim	/^function! ku#history#key_table(source_name_ext)  "{{{2$/
ku#history#on_source_enter	autoload/ku/history.vim	/^function! ku#history#on_source_enter(source_name_ext)  "{{{2$/
ku#history#special_char_p	autoload/ku/history.vim	/^function! ku#history#special_char_p(source_name_ext, character)  "{{{2$/
ku#input_history	autoload/ku.vim	/^function! ku#input_history()  "{{{2$/
ku#make_path	autoload/ku.vim	/^function! ku#make_path(...)  "{{{2$/
ku#metarw#action_table	autoload/ku/metarw.vim	/^function! ku#metarw#action_table(source_name_ext)  "{{{2$/
ku#metarw#available_sources	autoload/ku/metarw.vim	/^function! ku#metarw#available_sources()  "{{{2$/
ku#metarw#gather_items	autoload/ku/metarw.vim	/^function! ku#metarw#gather_items(source_name_ext, pattern)  "{{{2$/
ku#metarw#key_table	autoload/ku/metarw.vim	/^function! ku#metarw#key_table(source_name_ext)  "{{{2$/
ku#metarw#on_before_action	autoload/ku/metarw.vim	/^function! ku#metarw#on_before_action(source_name_ext, item)  "{{{2$/
ku#myproject#acc_valid_p	autoload/ku/myproject.vim	/^function! ku#myproject#acc_valid_p(source_name_ext, item, sep)  "{{{2$/
ku#myproject#action_open	autoload/ku/myproject.vim	/^function! ku#myproject#action_open(item)  "{{{3$/
ku#myproject#action_table	autoload/ku/myproject.vim	/^function! ku#myproject#action_table(source_name_ext)  "{{{2$/
ku#myproject#available_sources	autoload/ku/myproject.vim	/^function! ku#myproject#available_sources()  "{{{2$/
ku#myproject#gather_items	autoload/ku/myproject.vim	/^function! ku#myproject#gather_items(source_name_ext, pattern)  "{{{2$/
ku#myproject#key_table	autoload/ku/myproject.vim	/^function! ku#myproject#key_table(source_name_ext)  "{{{2$/
ku#myproject#on_source_enter	autoload/ku/myproject.vim	/^function! ku#myproject#on_source_enter(source_name_ext)  "{{{2$/
ku#myproject#special_char_p	autoload/ku/myproject.vim	/^function! ku#myproject#special_char_p(source_name_ext, character)  "{{{2$/
ku#path_separator	autoload/ku.vim	/^function! ku#path_separator()  "{{{2$/
ku#quickfix#action_open	autoload/ku/quickfix.vim	/^function! ku#quickfix#action_open(item)  "{{{3$/
ku#quickfix#action_open_x	autoload/ku/quickfix.vim	/^function! ku#quickfix#action_open_x(item)  "{{{3$/
ku#quickfix#action_table	autoload/ku/quickfix.vim	/^function! ku#quickfix#action_table(source_name_ext)  "{{{2$/
ku#quickfix#available_sources	autoload/ku/quickfix.vim	/^function! ku#quickfix#available_sources()  "{{{2$/
ku#quickfix#gather_items	autoload/ku/quickfix.vim	/^function! ku#quickfix#gather_items(source_name_ext, pattern)  "{{{2$/
ku#quickfix#key_table	autoload/ku/quickfix.vim	/^function! ku#quickfix#key_table(source_name_ext)  "{{{2$/
ku#quickfix#on_source_enter	autoload/ku/quickfix.vim	/^function! ku#quickfix#on_source_enter(source_name_ext)  "{{{2$/
ku#quickfix#special_char_p	autoload/ku/quickfix.vim	/^function! ku#quickfix#special_char_p(source_name_ext, character)  "{{{2$/
ku#reload	autoload/ku.vim	/^function! ku#reload()  "{{{2$/
ku#restart	autoload/ku.vim	/^function! ku#restart()  "{{{2$/
ku#set_the_current_input_pattern	autoload/ku.vim	/^function! ku#set_the_current_input_pattern(s)  "{{{2$/
ku#source#action_open	autoload/ku/source.vim	/^function! ku#source#action_open(item)  "{{{3$/
ku#source#action_table	autoload/ku/source.vim	/^function! ku#source#action_table(source_name_ext)  "{{{2$/
ku#source#available_sources	autoload/ku/source.vim	/^function! ku#source#available_sources()  "{{{2$/
ku#source#gather_items	autoload/ku/source.vim	/^function! ku#source#gather_items(source_name_ext, pattern)  "{{{2$/
ku#source#key_table	autoload/ku/source.vim	/^function! ku#source#key_table(source_name_ext)  "{{{2$/
ku#source#on_source_enter	autoload/ku/source.vim	/^function! ku#source#on_source_enter(source_name_ext)  "{{{2$/
ku#source#on_source_leave	autoload/ku/source.vim	/^function! ku#source#on_source_leave(source_name_ext)  "{{{2$/
ku#source#special_char_p	autoload/ku/source.vim	/^function! ku#source#special_char_p(source_name_ext, character)  "{{{2$/
ku#start	autoload/ku.vim	/^function! ku#start(source, ...)  "{{{2$/
ku#switch_source	autoload/ku.vim	/^function! ku#switch_source(source)  "{{{2$/
ku_active_p	autoload/ku.vim	/^function! s:ku_active_p()  "{{{2$/
ku_custom_action_3	autoload/ku.vim	/^function! s:ku_custom_action_3(source, action, function)  "{{{3$/
ku_custom_action_4	autoload/ku.vim	/^function! s:ku_custom_action_4(source, action, source2, action2)  "{{{3$/
last_partial	ftplugin/funnel.pl	/^sub last_partial$/
lh#askvim#Exe	autoload/lh/askvim.vim	/^function! lh#askvim#Exe(command)$/
lh#askvim#Menu	autoload/lh/askvim.vim	/^function! lh#askvim#Menu(menuid, modes)$/
lh#buffer#Find	autoload/lh/buffer.vim	/^function! lh#buffer#Find(filename)$/
lh#buffer#Jump	autoload/lh/buffer.vim	/^function! lh#buffer#Jump(filename, cmd)$/
lh#buffer#Scratch	autoload/lh/buffer.vim	/^function! lh#buffer#Scratch(bname, where)$/
lh#buffer#dialog#Quit	autoload/lh/buffer/dialog.vim	/^function! lh#buffer#dialog#Quit()$/
lh#buffer#dialog#Select	autoload/lh/buffer/dialog.vim	/^function! lh#buffer#dialog#Select(line, bufferId, ...)$/
lh#buffer#dialog#Update	autoload/lh/buffer/dialog.vim	/^function! lh#buffer#dialog#Update(dialog)$/
lh#buffer#dialog#add_help	autoload/lh/buffer/dialog.vim	/^function! lh#buffer#dialog#add_help(abuffer, text, help_type)$/
lh#buffer#dialog#new	autoload/lh/buffer/dialog.vim	/^function! lh#buffer#dialog#new(bname, title, where, support_tagging, action, choices)$/
lh#buffer#dialog#toggle_help	autoload/lh/buffer/dialog.vim	/^function! lh#buffer#dialog#toggle_help() dict$/
lh#command#Complete	autoload/lh/command.vim	/^function! lh#command#Complete(ArgLead, CmdLine, CursorPos)$/
lh#command#Fargs2String	autoload/lh/command.vim	/^function! lh#command#Fargs2String(aList)$/
lh#command#New	autoload/lh/command.vim	/^function! lh#command#New(definition)$/
lh#common#CheckDeps	autoload/lh/common.vim	/^function! lh#common#CheckDeps(Symbol, File, path, plugin) " {{{3$/
lh#common#ErrorMsg	autoload/lh/common.vim	/^function! lh#common#ErrorMsg(text)$/
lh#common#WarningMsg	autoload/lh/common.vim	/^function! lh#common#WarningMsg(text)$/
lh#common#echomsgMultilines	autoload/lh/common.vim	/^function! lh#common#echomsgMultilines(text)$/
lh#encoding#Iconv	autoload/lh/encoding.vim	/^function! lh#encoding#Iconv(expr, from, to)$/
lh#event#RegisterForOneExecutionAt	autoload/lh/event.vim	/^function! lh#event#RegisterForOneExecutionAt(event, cmd, group)$/
lh#function#bind	autoload/lh/function.vim	/^function! lh#function#bind(fn, ...)$/
lh#function#execute	autoload/lh/function.vim	/^function! lh#function#execute(Fn, ...)$/
lh#function#verbose	autoload/lh/function.vim	/^function! lh#function#verbose(level)$/
lh#graph#tsort#breadth	autoload/lh/graph/tsort.vim	/^function! lh#graph#tsort#breadth(dag, start_nodes)$/
lh#graph#tsort#depth	autoload/lh/graph/tsort.vim	/^function! lh#graph#tsort#depth(dag, start_nodes)$/
lh#list#Find_if	autoload/lh/list.vim	/^function! lh#list#Find_if(list, predicate, ...)$/
lh#list#Match	autoload/lh/list.vim	/^function! lh#list#Match(list, to_be_matched, ...)$/
lh#list#Transform	autoload/lh/list.vim	/^function! lh#list#Transform(input, output, action)$/
lh#list#unique_sort	autoload/lh/list.vim	/^function! lh#list#unique_sort(list, ...)$/
lh#list#unique_sort2	autoload/lh/list.vim	/^function! lh#list#unique_sort2(list, ...)$/
lh#menu#CMD_and_clear_v	autoload/lh/menu.vim	/^function! lh#menu#CMD_and_clear_v(cmd)$/
lh#menu#DefToggleItem	autoload/lh/menu.vim	/^function! lh#menu#DefToggleItem(Data)$/
lh#menu#IVN_Make	autoload/lh/menu.vim	/^function! lh#menu#IVN_Make(code, text, binding, i_cmd, v_cmd, n_cmd, ...)$/
lh#menu#Make	autoload/lh/menu.vim	/^function! lh#menu#Make(prefix, code, text, binding, ...)$/
lh#menu#Map_all	autoload/lh/menu.vim	/^function! lh#menu#Map_all(map_type,...)$/
lh#menu#Text	autoload/lh/menu.vim	/^function! lh#menu#Text(text)$/
lh#option#Get	autoload/lh/option.vim	/^function! lh#option#Get(name,default,...)$/
lh#option#GetNonEmpty	autoload/lh/option.vim	/^function! lh#option#GetNonEmpty(name,default,...)$/
lh#path#GlobAsList	autoload/lh/path.vim	/^function! lh#path#GlobAsList(pathslist, expr)$/
lh#path#IsAbsolutePath	autoload/lh/path.vim	/^function! lh#path#IsAbsolutePath(path)$/
lh#path#IsURL	autoload/lh/path.vim	/^function! lh#path#IsURL(path)$/
lh#path#SelectOne	autoload/lh/path.vim	/^function! lh#path#SelectOne(pathnames, prompt)$/
lh#path#Simplify	autoload/lh/path.vim	/^function! lh#path#Simplify(pathname)$/
lh#path#StripCommon	autoload/lh/path.vim	/^function! lh#path#StripCommon(pathnames)$/
lh#path#StripStart	autoload/lh/path.vim	/^function! lh#path#StripStart(pathname, pathslist)$/
lh#path#ToRelative	autoload/lh/path.vim	/^function! lh#path#ToRelative(pathname)$/
lh#position#CharAtMark	autoload/lh/position.vim	/^function! lh#position#CharAtMark(mark)$/
lh#position#CharAtPos	autoload/lh/position.vim	/^function! lh#position#CharAtPos(pos)$/
lh#position#IsBefore	autoload/lh/position.vim	/^function! lh#position#IsBefore(lhs_pos, rhs_pos)$/
lh#syntax#NameAt	autoload/lh/syntax.vim	/^function! lh#syntax#NameAt(l,c, ...)$/
lh#syntax#NameAtMark	autoload/lh/syntax.vim	/^function! lh#syntax#NameAtMark(mark, ...)$/
lh#syntax#Skip	autoload/lh/syntax.vim	/^func! lh#syntax#Skip()$/
lh#syntax#SkipAt	autoload/lh/syntax.vim	/^func! lh#syntax#SkipAt(l,c)$/
lh#syntax#SkipAtMark	autoload/lh/syntax.vim	/^func! lh#syntax#SkipAtMark(mark)$/
lh#syntax#SynList	autoload/lh/syntax.vim	/^function! lh#syntax#SynList(name)$/
lh#syntax#SynListRaw	autoload/lh/syntax.vim	/^function! lh#syntax#SynListRaw(name)$/
lh#visual#selection	autoload/lh/visual.vim	/^function! lh#visual#selection()$/
library#Call	autoload/library.vim	/^function! library#Call(...)$/
library#Eq	autoload/library.vim	/^fun! library#Eq(a,b)$/
library#EvalLazy	autoload/library.vim	/^function! library#EvalLazy(v)$/
library#EvalWhenRequested	autoload/library.vim	/^function! library#EvalWhenRequested(name)$/
library#Exec	autoload/library.vim	/^function! library#Exec(cmd)$/
library#Function	autoload/library.vim	/^function! library#Function(name,...)$/
library#GetOptionalArg	autoload/library.vim	/^function! library#GetOptionalArg( name, default, ...)$/
library#Hash	autoload/library.vim	/^fun! library#Hash(s)$/
library#Id	autoload/library.vim	/^function! library#Id(a)$/
library#NOP	autoload/library.vim	/^function! library#NOP(...)$/
library#ReadLazy	autoload/library.vim	/^function! library#ReadLazy(f,...)$/
library#Try	autoload/library.vim	/^function! library#Try(funcList,...)$/
library#Type	autoload/library.vim	/^function! library#Type(a)$/
library_test#EvalLazyValue	autoload/library_test.vim	/^function! library_test#EvalLazyValue()$/
library_test#ReferencedFunc	autoload/library_test.vim	/^function! library_test#ReferencedFunc()$/
library_test#Test	autoload/library_test.vim	/^function! library_test#Test()$/
list_actions_sorted_by_action	autoload/ku.vim	/^function! s:list_actions_sorted_by_action(KEY_TABLE)  "{{{3$/
list_actions_sorted_by_key	autoload/ku.vim	/^function! s:list_actions_sorted_by_key(KEY_TABLE)  "{{{3$/
load_the_state_of_buffer	autoload/narrow.vim	/^function! s:load_the_state_of_buffer(original_state)  "{{{2$/
loaded_explorer	plugin/winfileexplorer.vim	/^	let loaded_explorer = 1$/
loaded_explorer	plugin/winmanager.vim	/^	let loaded_explorer = 1$/
loaded_ferallastchange	plugin/ferallastchange.vim	/^let loaded_ferallastchange = 1$/
loaded_genutils	plugin/genutils.vim	/^let loaded_genutils = 205$/
loaded_libList	plugin/libList.vim	/^let loaded_libList=1$/
loaded_minibufexplorer	plugin/minibufexpl.vim	/^let loaded_minibufexplorer = 1$/
loaded_mru	plugin/MRU.vim	/^let loaded_mru=1$/
loaded_nerd_tree	plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/
loaded_taglist	plugin/taglist.vim	/^            let loaded_taglist = 'no'$/
loaded_taglist	plugin/taglist.vim	/^        let loaded_taglist = 'no'$/
loaded_taglist	plugin/taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/
loaded_taglist	plugin/taglist.vim	/^let loaded_taglist = 'available'$/
loaded_tlib	plugin/02tlib.vim	/^let loaded_tlib = 36$/
loaded_tlib_TestChild_autoload	autoload/tlib/TestChild.vim	/^let loaded_tlib_TestChild_autoload = 1$/
loaded_tlib_Test_autoload	autoload/tlib/Test.vim	/^let loaded_tlib_Test_autoload = 1$/
loaded_tlib_arg_autoload	autoload/tlib/arg.vim	/^let loaded_tlib_arg_autoload = 1$/
loaded_tlib_char_autoload	autoload/tlib/char.vim	/^let loaded_tlib_char_autoload = 1$/
loaded_tlib_cmd_autoload	autoload/tlib/cmd.vim	/^let loaded_tlib_cmd_autoload = 1$/
loaded_tlib_comments_autoload	autoload/tlib/comments.vim	/^let loaded_tlib_comments_autoload = 1$/
loaded_tlib_dir_autoload	autoload/tlib/dir.vim	/^let loaded_tlib_dir_autoload = 1$/
loaded_tlib_eval_autoload	autoload/tlib/eval.vim	/^let loaded_tlib_eval_autoload = 1$/
loaded_tlib_file_autoload	autoload/tlib/file.vim	/^let loaded_tlib_file_autoload = 1$/
loaded_tlib_hook_autoload	autoload/tlib/hook.vim	/^let loaded_tlib_hook_autoload = 1$/
loaded_tlib_list_autoload	autoload/tlib/list.vim	/^let loaded_tlib_list_autoload = 1$/
loaded_tlib_object_autoload	autoload/tlib/Object.vim	/^let loaded_tlib_object_autoload = 1$/
loaded_tlib_progressbar_autoload	autoload/tlib/progressbar.vim	/^let loaded_tlib_progressbar_autoload = 1$/
loaded_tlib_rx_autoload	autoload/tlib/rx.vim	/^let loaded_tlib_rx_autoload = 1$/
loaded_tlib_scratch_autoload	autoload/tlib/scratch.vim	/^let loaded_tlib_scratch_autoload = 1$/
loaded_tlib_string_autoload	autoload/tlib/string.vim	/^let loaded_tlib_string_autoload = 1$/
loaded_tlib_syntax_autoload	autoload/tlib/syntax.vim	/^let loaded_tlib_syntax_autoload = 1$/
loaded_tlib_tab_autoload	autoload/tlib/tab.vim	/^let loaded_tlib_tab_autoload = 1$/
loaded_tlib_tag_autoload	autoload/tlib/tag.vim	/^let loaded_tlib_tag_autoload = 1$/
loaded_tlib_time_autoload	autoload/tlib/time.vim	/^let loaded_tlib_time_autoload = 1$/
loaded_tlib_type_autoload	autoload/tlib/type.vim	/^let loaded_tlib_type_autoload = 1$/
loaded_tlib_var_autoload	autoload/tlib/var.vim	/^let loaded_tlib_var_autoload = 1$/
loaded_tlib_win_autoload	autoload/tlib/win.vim	/^let loaded_tlib_win_autoload = 1$/
loaded_winfileexplorer	plugin/winfileexplorer.vim	/^let loaded_winfileexplorer=1$/
loaded_winmanager	plugin/winmanager.vim	/^let loaded_winmanager = 1$/
location1a	ftplugin/haskell_doc.vim	/^  let location1a = s:ghc_libdir . '\/doc\/html\/'$/
location1b	ftplugin/haskell_doc.vim	/^  let location1b = s:ghc_libdir . '\/doc\/'$/
location2	ftplugin/haskell_doc.vim	/^  let location2 = '\/usr\/share\/doc\/ghc-' . s:ghc_version . '\/html\/' $/
longer_mapping_exists_p	autoload/submode.vim	/^function! s:longer_mapping_exists_p(submode, lhs)  "{{{2$/
mac_p	autoload/wwwsearch.vim	/^function! s:mac_p()  "{{{2$/
main	ftplugin/latex-suite/outline.py	/^def main(fname, label_prefix):$/
make_asis_regexp	autoload/ku.vim	/^function! s:make_asis_regexp(s)  "{{{2$/
make_command_buffer_name	autoload/vcsi.vim	/^function! s:make_command_buffer_name(args)  "{{{2$/
make_command_line	autoload/altkwprg.vim	/^function! s:make_command_line(keyword, count, b_var, g_var, l_opt, g_opt) "{{{2$/
make_git_command_script	autoload/vcsi.vim	/^function! s:make_git_command_script(args)  "{{{3$/
make_skip_regexp	autoload/ku.vim	/^function! s:make_skip_regexp(s)  "{{{2$/
make_svk_command_script	autoload/vcsi.vim	/^function! s:make_svk_command_script(args)  "{{{3$/
make_svn_command_script	autoload/vcsi.vim	/^function! s:make_svn_command_script(args)  "{{{3$/
make_unknown_command_script	autoload/vcsi.vim	/^function! s:make_unknown_command_script(args)  "{{{3$/
make_vcs_command_script	autoload/vcsi.vim	/^function! s:make_vcs_command_script(args, show_error_p)  "{{{3$/
make_word_regexp	autoload/ku.vim	/^function! s:make_word_regexp(s)  "{{{2$/
manpageview#ManPageView	autoload/manpageview.vim	/^ fun! manpageview#ManPageView(viamap,bknum,...) range$/
manpageview#ManPageView	autoload/manpageview.vim	/^fun! manpageview#ManPageView(viamap,bknum,...) range$/
map	autoload/textobj/user.vim	/^function! s:map(forced_p, lhs, rhs)$/
map_command	autoload/submode.vim	/^function! s:map_command(mode, flags)  "{{{2$/
map_options	autoload/submode.vim	/^function! s:map_options(options)  "{{{2$/
mapargs_pair_select	autoload/textobj/user.vim	/^function! s:mapargs_pair_select(lhs, pattern1, pattern2, flags, previous_mode)$/
mapargs_single_move	autoload/textobj/user.vim	/^function! s:mapargs_single_move(lhs, pattern, flags, previous_mode)$/
mapargs_single_select	autoload/textobj/user.vim	/^function! s:mapargs_single_select(lhs, pattern, flags, previous_mode)$/
mapleader	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^let mapleader = ","$/
maplocalleader	compiler/ghc.vim	/^  let maplocalleader='_'$/
maplocalleader	ftplugin/haskell_doc.vim	/^  let maplocalleader='_'$/
maplocalleader	ftplugin/perl.vim	/^  let maplocalleader  = g:Perl_MapLeader$/
mapping_exists_p	autoload/submode.vim	/^function! s:mapping_exists_p(keyseq, mode)  "{{{2$/
matches_p	autoload/vspec.vim	/^function! s:matches_p(value_actual, expr_matcher, value_expected)  "{{{2$/
may_override_showmode_p	autoload/submode.vim	/^function! s:may_override_showmode_p(mode)  "{{{2$/
merge_histories	autoload/ku.vim	/^function! s:merge_histories(a, b)  "{{{2$/
metarw#_event_handler	autoload/metarw.vim	/^function! metarw#_event_handler(event_name)  "{{{2$/
metarw#complete	autoload/metarw.vim	/^function! metarw#complete(arglead, cmdline, cursorpos)  "{{{2$/
metarw#define_wrapper_commands	autoload/metarw.vim	/^function! metarw#define_wrapper_commands(override_p)  "{{{2$/
metarw#git#complete	autoload/metarw/git.vim	/^function! metarw#git#complete(arglead, cmdline, cursorpos)  "{{{2$/
metarw#git#read	autoload/metarw/git.vim	/^function! metarw#git#read(fakepath)  "{{{2$/
metarw#git#write	autoload/metarw/git.vim	/^function! metarw#git#write(fakepath, line1, line2, append_p)  "{{{2$/
move	autoload/smartword.vim	/^function! s:move(motion_command, times)  "{{{2$/
move_to_the_end_of_closed_fold	plugin/textobj/fold.vim	/^function! s:move_to_the_end_of_closed_fold()$/
move_to_the_end_of_non_fold	plugin/textobj/fold.vim	/^function! s:move_to_the_end_of_non_fold()$/
move_to_the_end_of_open_fold	plugin/textobj/fold.vim	/^function! s:move_to_the_end_of_open_fold()$/
move_to_the_end_point	plugin/textobj/fold.vim	/^function! s:move_to_the_end_point(mode, selection_starts_with_fold_p)$/
move_to_the_start_of_closed_fold	plugin/textobj/fold.vim	/^function! s:move_to_the_start_of_closed_fold()$/
move_to_the_start_of_non_fold	plugin/textobj/fold.vim	/^function! s:move_to_the_start_of_non_fold()$/
move_to_the_start_of_open_fold	plugin/textobj/fold.vim	/^function! s:move_to_the_start_of_open_fold()$/
move_to_the_start_point	plugin/textobj/fold.vim	/^function! s:move_to_the_start_point()$/
named_key_before_action	autoload/submode.vim	/^function! s:named_key_before_action(submode)  "{{{2$/
named_key_before_entering	autoload/submode.vim	/^function! s:named_key_before_entering(submode)  "{{{2$/
named_key_before_entering_with	autoload/submode.vim	/^function! s:named_key_before_entering_with(submode, lhs)  "{{{2$/
named_key_enter	autoload/submode.vim	/^function! s:named_key_enter(submode)  "{{{2$/
named_key_leave	autoload/submode.vim	/^function! s:named_key_leave(submode)  "{{{2$/
named_key_prefix	autoload/submode.vim	/^function! s:named_key_prefix(submode)  "{{{2$/
named_key_rhs	autoload/submode.vim	/^function! s:named_key_rhs(submode, lhs)  "{{{2$/
narrow#Narrow	autoload/narrow.vim	/^function! narrow#Narrow(line1, line2)$/
narrow#Widen	autoload/narrow.vim	/^function! narrow#Widen()$/
netrw#ErrorMsg	autoload/netrw.vim	/^fun! netrw#ErrorMsg(level,msg,errnum)$/
netrw#Explore	autoload/netrw.vim	/^fun! netrw#Explore(indx,dosplit,style,...)$/
netrw#LocalBrowseCheck	autoload/netrw.vim	/^fun! netrw#LocalBrowseCheck(dirname)$/
netrw#NetRead	autoload/netrw.vim	/^fun! netrw#NetRead(mode,...)$/
netrw#NetSource	autoload/netrw.vim	/^fun! netrw#NetSource(...)$/
netrw#NetWrite	autoload/netrw.vim	/^fun! netrw#NetWrite(...) range$/
netrw#NetrwBrowseX	autoload/netrw.vim	/^fun! netrw#NetrwBrowseX(fname,remote)$/
netrw#NetrwClean	autoload/netrw.vim	/^fun! netrw#NetrwClean(sys)$/
netrw#NetrwObtain	autoload/netrw.vim	/^fun! netrw#NetrwObtain(islocal,fname,...)$/
netrw#NetrwRestorePosn	autoload/netrw.vim	/^fun! netrw#NetrwRestorePosn(...)$/
netrw#NetrwSavePosn	autoload/netrw.vim	/^fun! netrw#NetrwSavePosn()$/
netrw#Nread	autoload/netrw.vim	/^fun! netrw#Nread(mode,fname)$/
netrw#RFC2396	autoload/netrw.vim	/^fun! netrw#RFC2396(fname)$/
netrw#WinPath	autoload/netrw.vim	/^fun! netrw#WinPath(path)$/
netrwFileHandlers#Invoke	autoload/netrwFileHandlers.vim	/^fun! netrwFileHandlers#Invoke(exten,fname)$/
netrwSettings#NetrwSettings	autoload/netrwSettings.vim	/^fun! netrwSettings#NetrwSettings()$/
newline	ftplugin/r.vim	/^  let newline = stridx(userlogin, "\\n")$/
newline	ftplugin/rhelp.vim	/^  let newline = stridx(userlogin, "\\n")$/
newline	ftplugin/rnoweb.vim	/^  let newline = stridx(userlogin, "\\n")$/
nextBufferName	plugin/NERD_tree.vim	/^function! s:nextBufferName()$/
ni_map	autoload/ku.vim	/^function! s:ni_map(...)  "{{{2$/
noremap	autoload/textobj/user.vim	/^function! s:noremap(forced_p, lhs, rhs)$/
normalize_line	autoload/narrow.vim	/^function! s:normalize_line(line, mode)  "{{{2$/
normalize_search_engine_name	autoload/wwwsearch.vim	/^function! s:normalize_search_engine_name(s)  "{{{2$/
normalize_targets	autoload/vcsi.vim	/^function! s:normalize_targets(unnormalized_targets)  "{{{2$/
o.Log	autoload/tovl/log.vim	/^  fun o.Log(context, level, msg)$/
o.SetLevel	autoload/tovl/log.vim	/^  fun! o.SetLevel(l)$/
objmap	autoload/textobj/user.vim	/^function! s:objmap(forced_p, lhs, rhs)$/
objnoremap	autoload/textobj/user.vim	/^function! s:objnoremap(forced_p, lhs, rhs)$/
on_BufNewFile	plugin/skeleton.vim	/^function! s:on_BufNewFile()$/
on_BufReadCmd	autoload/metarw.vim	/^function! s:on_BufReadCmd(scheme, fakepath)  "{{{3$/
on_BufWriteCmd	autoload/metarw.vim	/^function! s:on_BufWriteCmd(scheme, fakepath)  "{{{3$/
on_CursorMovedI	autoload/ku.vim	/^function! s:on_CursorMovedI()  "{{{2$/
on_FileAppendCmd	autoload/metarw.vim	/^function! s:on_FileAppendCmd(scheme, fakepath)  "{{{3$/
on_FileReadCmd	autoload/metarw.vim	/^function! s:on_FileReadCmd(scheme, fakepath)  "{{{3$/
on_FileWriteCmd	autoload/metarw.vim	/^function! s:on_FileWriteCmd(scheme, fakepath)  "{{{3$/
on_InsertEnter	autoload/ku.vim	/^function! s:on_InsertEnter()  "{{{2$/
on_SourceCmd	autoload/metarw.vim	/^function! s:on_SourceCmd(scheme, fakepath)  "{{{3$/
on_TabEnter	autoload/idwintab.vim	/^function! s:on_TabEnter()$/
on_WinEnter	autoload/idwintab.vim	/^function! s:on_WinEnter()$/
on_entering_submode	autoload/submode.vim	/^function! s:on_entering_submode(submode)  "{{{2$/
on_executing_action	autoload/submode.vim	/^function! s:on_executing_action(submode)  "{{{2$/
on_leaving_submode	autoload/submode.vim	/^function! s:on_leaving_submode(submode)  "{{{2$/
open	autoload/ku/args.vim	/^function! s:open(bang, item)  "{{{2$/
open	autoload/ku/buffer.vim	/^function! s:open(bang, item)  "{{{2$/
open	autoload/ku/file.vim	/^function! s:open(bang, item)  "{{{2$/
open	autoload/ku/quickfix.vim	/^function! s:open(bang, item)  "{{{2$/
openBookmark	plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/
openEntrySplit	plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/
openExplorer	plugin/NERD_tree.vim	/^function! s:openExplorer()$/
openInNewTab	plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/
openNodeRecursively	plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/
open_by_source_file	autoload/ku/bundle.vim	/^function! s:open_by_source_file(bang, item)  "{{{2$/
open_command_buffer	autoload/vcsi.vim	/^function! s:open_command_buffer(args)  "{{{2$/
open_diff_buffer_window	autoload/flydiff.vim	/^function! s:open_diff_buffer_window(bufnr)  "{{{2$/
open_item	autoload/metarw.vim	/^function! s:open_item(split_command)$/
open_zip_content	autoload/ku/file.vim	/^function! s:open_zip_content(bang, archive_path, content_path)  "{{{2$/
operator#replace#do	autoload/operator/replace.vim	/^function! operator#replace#do(motion_wise)  "{{{2$/
operator#user#_define	autoload/operator/user.vim	/^function! operator#user#_define(operator_keyseq, function_name, ...)$/
operator#user#_do_ex_command	autoload/operator/user.vim	/^function! operator#user#_do_ex_command(motion_wiseness)$/
operator#user#_set_ex_command	autoload/operator/user.vim	/^function! operator#user#_set_ex_command(ex_command)$/
operator#user#_set_up	autoload/operator/user.vim	/^function! operator#user#_set_up(operator_function_name)$/
operator#user#_sid_prefix	autoload/operator/user.vim	/^function! operator#user#_sid_prefix()$/
operator#user#define	autoload/operator/user.vim	/^function! operator#user#define(name, function_name, ...)  "{{{2$/
operator#user#define_ex_command	autoload/operator/user.vim	/^function! operator#user#define_ex_command(name, ex_command)  "{{{2$/
operator#user#visual_command_from_wise_name	autoload/operator/user.vim	/^function! operator#user#visual_command_from_wise_name(wise_name)  "{{{2$/
opfunc	plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/
opfunc2	plugin/surround.vim	/^function! s:opfunc2(arg)$/
options	compiler/tex.vim	/^		let options = ''$/
options	compiler/tex.vim	/^		let options = '--src-specials'$/
opts	compiler/ghc.vim	/^  let opts = ["-fglasgow-exts","-fallow-undecidable-instances","-fallow-overlapping-instances","-fno-monomorphism-restriction","-fno-mono-pat-binds","-fno-cse","-fbang-patterns","-funbox-strict-fields"]$/
opts	compiler/ghc.vim	/^  let opts = filter(split(substitute(system(g:ghc . ' -v0 --interactive', ':set'), '  ', '','g'), '\\n'), 'v:val =~ "-f"')$/
orderable_type_p	autoload/vspec.vim	/^function! s:orderable_type_p(value)  "{{{2$/
os	autoload/tovl/runtaskinbackground.vim	/^import os$/
os	ftplugin/latex-suite/outline.py	/^import os$/
os	ftplugin/latex-suite/pytools.py	/^import string, vim, re, os, glob$/
output_summary	autoload/vspec.vim	/^function! s:output_summary(context)  "{{{2$/
p	autoload/plugins/feature_types/action.vim	/^  let p['feat_command'] = {$/
p	autoload/plugins/feature_types/action.vim	/^  let p['featureTypes'] = {$/
p	autoload/plugins/feature_types/command.vim	/^  let p['defaults']['configDummy'] = "make this plugin load cause it hasn't any options"$/
p	autoload/plugins/feature_types/command.vim	/^  let p['featureTypes'] = {$/
p	autoload/plugins/feature_types/map.vim	/^  let p['defaults']['configDummy'] = "make this plugin load cause it hasn't any options"$/
p	autoload/plugins/feature_types/map.vim	/^  let p['featureTypes'] = {$/
p	autoload/plugins/filetype/flex.vim	/^  let p['feat_action'] = {$/
p	autoload/plugins/filetype/haxe.vim	/^  let p['feat_action'] = {$/
p	autoload/plugins/filetype/php.vim	/^  let p['feat_action'] = {$/
p	autoload/plugins/filetype/ruby.vim	/^  let p['feat_action'] = {$/
p	autoload/plugins/tovl/runtaskinbackground.vim	/^  let p['defaults']['run_handlers'] = [$/
p.AddMapping	autoload/plugins/feature_types/map.vim	/^  fun! p.AddMapping(i)$/
p.Assign	autoload/plugins/feature_types/action.vim	/^  fun! p.Assign(mapping)$/
p.BCommit	autoload/plugins/vcs/git.vim	/^  fun! p.BCommit()$/
p.BDiffSplitGit	autoload/plugins/vcs/git.vim	/^  fun! p.BDiffSplitGit()$/
p.Check	autoload/plugins/filetype/haxe.vim	/^  fun! p.Check()$/
p.Clean	autoload/plugins/vcs/git.vim	/^  fun! p.Clean()$/
p.Commit	autoload/plugins/vcs/git.vim	/^  fun! p.Commit()$/
p.CommitOnBufWrite	autoload/plugins/vcs/git.vim	/^  fun! p.CommitOnBufWrite()$/
p.CompleteRFCFiles	autoload/plugins/misc/rfc.vim	/^  fun! p.CompleteRFCFiles(A,L,P)$/
p.DefineHXMLFile	autoload/plugins/filetype/haxe.vim	/^  function! p.DefineHXMLFile()$/
p.DelCommand	autoload/plugins/feature_types/command.vim	/^  fun! p.DelCommand(i)$/
p.DelMapping	autoload/plugins/feature_types/map.vim	/^  fun! p.DelMapping(i)$/
p.GitGotoLocations	autoload/plugins/vcs/git.vim	/^  fun! p.GitGotoLocations()$/
p.GitLog	autoload/plugins/vcs/git.vim	/^  fun! p.GitLog()$/
p.HeaderLocations	autoload/plugins/language_support/c.vim	/^  fun! p.HeaderLocations()$/
p.Map	autoload/plugins/feature_types/action.vim	/^  fun! p.Map(mapping, actionKey)$/
p.RegisterAction	autoload/plugins/feature_types/action.vim	/^  fun! p.RegisterAction(i)$/
p.Remember	autoload/plugins/tovl/mru.vim	/^  fun! p.Remember(event)$/
p.Run	autoload/plugins/filetype/nix.vim	/^  fun! p.Run(xml)$/
p.RunHaxeActionString	autoload/plugins/filetype/haxe.vim	/^  fun! p.RunHaxeActionString()$/
p.RunMXMLActionString	autoload/plugins/filetype/flex.vim	/^  fun! p.RunMXMLActionString()$/
p.RunSWFActionString	autoload/plugins/filetype/flex.vim	/^  fun! p.RunSWFActionString()$/
p.Sep	autoload/plugins/vcs/git.vim	/^  fun! p.Sep(name)$/
p.StatusAndActions	autoload/plugins/vcs/git.vim	/^  fun! p.StatusAndActions()$/
p.StatusViewAction	autoload/plugins/vcs/git.vim	/^  fun! p.StatusViewAction(action)$/
p.Subst	autoload/plugins/feature_types/map.vim	/^  fun! p.Subst(s)$/
p.ToC	autoload/plugins/buffer/tovl_toc.vim	/^  fun p.ToC(regex)$/
p.UnregisterAction	autoload/plugins/feature_types/action.vim	/^  fun! p.UnregisterAction(i)$/
parse_args	autoload/arpeggio.vim	/^function! s:parse_args(q_args)  "{{{2$/
parse_incomplete_fakepath	autoload/metarw/git.vim	/^function! s:parse_incomplete_fakepath(incomplete_fakepath)  "{{{2$/
parse_pattern	autoload/ku/file.vim	/^function! s:parse_pattern(pattern)  "{{{2$/
parse_should_args	autoload/vspec.vim	/^function! s:parse_should_args(s)  "{{{2$/
perform_flydiff	autoload/flydiff.vim	/^function! s:perform_flydiff(timing)  "{{{2$/
perlsupportgui#Perl_InitMenu	autoload/perlsupportgui.vim	/^function! perlsupportgui#Perl_InitMenu ()$/
perlsupportprofiling#Perl_FastProfSortList	autoload/perlsupportprofiling.vim	/^function!	perlsupportprofiling#Perl_FastProfSortList ( ArgLead, CmdLine, CursorPos )$/
perlsupportprofiling#Perl_FastProfSortQuickfix	autoload/perlsupportprofiling.vim	/^function! perlsupportprofiling#Perl_FastProfSortQuickfix ( mode )$/
perlsupportprofiling#Perl_FastProf_OpenQuickfix	autoload/perlsupportprofiling.vim	/^function! perlsupportprofiling#Perl_FastProf_OpenQuickfix ()$/
perlsupportprofiling#Perl_Fastprof	autoload/perlsupportprofiling.vim	/^function! perlsupportprofiling#Perl_Fastprof ()$/
perlsupportprofiling#Perl_NYTProfSortList	autoload/perlsupportprofiling.vim	/^function!	perlsupportprofiling#Perl_NYTProfSortList ( ArgLead, CmdLine, CursorPos )$/
perlsupportprofiling#Perl_NYTProfSortQuickfix	autoload/perlsupportprofiling.vim	/^function! perlsupportprofiling#Perl_NYTProfSortQuickfix ( criterion )$/
perlsupportprofiling#Perl_NYTprof	autoload/perlsupportprofiling.vim	/^function! perlsupportprofiling#Perl_NYTprof ()$/
perlsupportprofiling#Perl_NYTprofReadCSV	autoload/perlsupportprofiling.vim	/^function! perlsupportprofiling#Perl_NYTprofReadCSV ( mode, criterion )$/
perlsupportprofiling#Perl_NYTprofReadHtml	autoload/perlsupportprofiling.vim	/^function! perlsupportprofiling#Perl_NYTprofReadHtml ()$/
perlsupportprofiling#Perl_ProfSortList	autoload/perlsupportprofiling.vim	/^function!	perlsupportprofiling#Perl_ProfSortList ( ArgLead, List )$/
perlsupportprofiling#Perl_SmallProfSortList	autoload/perlsupportprofiling.vim	/^function!	perlsupportprofiling#Perl_SmallProfSortList ( ArgLead, CmdLine, CursorPos )$/
perlsupportprofiling#Perl_SmallProfSortQuickfix	autoload/perlsupportprofiling.vim	/^function! perlsupportprofiling#Perl_SmallProfSortQuickfix ( mode )$/
perlsupportprofiling#Perl_Smallprof	autoload/perlsupportprofiling.vim	/^function! perlsupportprofiling#Perl_Smallprof ()$/
perlsupportprofiling#Perl_Smallprof_OpenQuickfix	autoload/perlsupportprofiling.vim	/^function! perlsupportprofiling#Perl_Smallprof_OpenQuickfix ()$/
perlsupportregex#Perl_PerlRegexSubstitutions	autoload/perlsupportregex.vim	/^function! perlsupportregex#Perl_PerlRegexSubstitutions ( string )$/
perlsupportregex#Perl_RegexCodeEvaluation	autoload/perlsupportregex.vim	/^function! perlsupportregex#Perl_RegexCodeEvaluation ( onoff )$/
perlsupportregex#Perl_RegexExplain	autoload/perlsupportregex.vim	/^function! perlsupportregex#Perl_RegexExplain( mode )$/
perlsupportregex#Perl_RegexMatchSeveral	autoload/perlsupportregex.vim	/^function! perlsupportregex#Perl_RegexMatchSeveral( )$/
perlsupportregex#Perl_RegexPick	autoload/perlsupportregex.vim	/^function! perlsupportregex#Perl_RegexPick ( item, mode )$/
perlsupportregex#Perl_RegexPickFlag	autoload/perlsupportregex.vim	/^function! perlsupportregex#Perl_RegexPickFlag ( mode )$/
perlsupportregex#Perl_RegexVisualize	autoload/perlsupportregex.vim	/^function! perlsupportregex#Perl_RegexVisualize( )$/
permutations	autoload/arpeggio.vim	/^function! s:permutations(ss, r)  "{{{2$/
plugin	autoload/idwintab.vim	/^augroup plugin-idwintab$/
plugin	autoload/ku.vim	/^augroup plugin-ku$/
plugin	autoload/repeat.vim	/^augroup plugin-repeat$/
plugin	plugin/metarw.vim	/^augroup plugin-metarw$/
plugin	plugin/skeleton.vim	/^augroup plugin-skeleton$/
plugin.define_default_key_mappings	autoload/textobj/user.vim	/^function! s:plugin.define_default_key_mappings(banged_p)  "{{{3$/
plugin.define_interface_key_mappings	autoload/textobj/user.vim	/^function! s:plugin.define_interface_key_mappings()  "{{{3$/
plugin.interface_mapping_name	autoload/textobj/user.vim	/^function! s:plugin.interface_mapping_name(obj_name, spec_name)  "{{{3$/
plugin.move	autoload/textobj/user.vim	/^function! s:plugin.move(obj_name, flags, previous_mode)$/
plugin.new	autoload/textobj/user.vim	/^function s:plugin.new(plugin_name, obj_specs)$/
plugin.normalize	autoload/textobj/user.vim	/^function s:plugin.normalize()$/
plugin.select	autoload/textobj/user.vim	/^function! s:plugin.select(obj_name, flags, previous_mode)$/
plugin.select_pair	autoload/textobj/user.vim	/^function! s:plugin.select_pair(obj_name, flags, previous_mode)$/
plugins#background_processes#grep#PluginBackgroundGrep	autoload/plugins/background_processes/grep.vim	/^function! plugins#background_processes#grep#PluginBackgroundGrep(p)$/
plugins#background_processes#grep#PluginGNUIdUtils	autoload/plugins/background_processes/grep.vim	/^function! plugins#background_processes#grep#PluginGNUIdUtils(p)$/
plugins#buffer#highligh_current_line_in_active_window#PluginHighlightCurrentLineInActiveWindow	autoload/plugins/buffer/highligh_current_line_in_active_window.vim	/^function! plugins#buffer#highligh_current_line_in_active_window#PluginHighlightCurrentLineInActiveWindow(p)$/
plugins#buffer#move_copy#ContinueWorkOnCopy	autoload/plugins/buffer/move_copy.vim	/^fun! plugins#buffer#move_copy#ContinueWorkOnCopy(newname)$/
plugins#buffer#move_copy#PluginMoveCopyFile	autoload/plugins/buffer/move_copy.vim	/^function! plugins#buffer#move_copy#PluginMoveCopyFile(p)$/
plugins#buffer#move_copy#RenameFile	autoload/plugins/buffer/move_copy.vim	/^fun! plugins#buffer#move_copy#RenameFile(newname)$/
plugins#buffer#syntax_checker#PluginSyntaxChecker	autoload/plugins/buffer/syntax_checker.vim	/^function! plugins#buffer#syntax_checker#PluginSyntaxChecker(p)$/
plugins#buffer#tovl_toc#PluginTOVL_ToC	autoload/plugins/buffer/tovl_toc.vim	/^function! plugins#buffer#tovl_toc#PluginTOVL_ToC(p)$/
plugins#buffer#utility#PluginCreateDirOnBufWrite	autoload/plugins/buffer/utility.vim	/^function! plugins#buffer#utility#PluginCreateDirOnBufWrite(p)$/
plugins#examples#example#PluginExample	autoload/plugins/examples/example.vim	/^function! plugins#examples#example#PluginExample(p)$/
plugins#feature_types#action#PluginAction	autoload/plugins/feature_types/action.vim	/^function! plugins#feature_types#action#PluginAction(p)$/
plugins#feature_types#command#PluginCommand	autoload/plugins/feature_types/command.vim	/^function! plugins#feature_types#command#PluginCommand(p)$/
plugins#feature_types#completion_func#PluginCompletion	autoload/plugins/feature_types/completion_func.vim	/^function! plugins#feature_types#completion_func#PluginCompletion(p)$/
plugins#feature_types#map#PluginMap	autoload/plugins/feature_types/map.vim	/^function! plugins#feature_types#map#PluginMap(p)$/
plugins#feature_types#map#PluginMapEscHack	autoload/plugins/feature_types/map.vim	/^function! plugins#feature_types#map#PluginMapEscHack(p)$/
plugins#feature_types#map#Subst	autoload/plugins/feature_types/map.vim	/^function! plugins#feature_types#map#Subst(s)$/
plugins#feature_types#map#SubstMapPart	autoload/plugins/feature_types/map.vim	/^fun! plugins#feature_types#map#SubstMapPart(s)$/
plugins#filetype#flex#PluginFlexSupport	autoload/plugins/filetype/flex.vim	/^function! plugins#filetype#flex#PluginFlexSupport(p)$/
plugins#filetype#haxe#PluginHaxe	autoload/plugins/filetype/haxe.vim	/^function! plugins#filetype#haxe#PluginHaxe(p)$/
plugins#filetype#nix#PluginNixSupport	autoload/plugins/filetype/nix.vim	/^function! plugins#filetype#nix#PluginNixSupport(p)$/
plugins#filetype#php#PluginPHPSupport	autoload/plugins/filetype/php.vim	/^function! plugins#filetype#php#PluginPHPSupport(p)$/
plugins#filetype#quickfix#quickfix#PluginQuickfix	autoload/plugins/filetype/quickfix/quickfix.vim	/^function! plugins#filetype#quickfix#quickfix#PluginQuickfix(p)$/
plugins#filetype#ruby#PluginRubySupport	autoload/plugins/filetype/ruby.vim	/^function! plugins#filetype#ruby#PluginRubySupport(p)$/
plugins#filetype#vim#vl_repo#PluginVL_RepoStuff	autoload/plugins/filetype/vim/vl_repo.vim	/^function! plugins#filetype#vim#vl_repo#PluginVL_RepoStuff(p)$/
plugins#language_support#c#PluginC	autoload/plugins/language_support/c.vim	/^function! plugins#language_support#c#PluginC(p)$/
plugins#mappings#various#PluginSurround	autoload/plugins/mappings/various.vim	/^fun! plugins#mappings#various#PluginSurround(p)$/
plugins#mappings#various#PluginUsefulBufferMappings	autoload/plugins/mappings/various.vim	/^function! plugins#mappings#various#PluginUsefulBufferMappings(p)$/
plugins#mappings#various#PluginUsefulTabMappings	autoload/plugins/mappings/various.vim	/^function! plugins#mappings#various#PluginUsefulTabMappings(p)$/
plugins#mappings#various#PluginUsefulVariousMappings	autoload/plugins/mappings/various.vim	/^function! plugins#mappings#various#PluginUsefulVariousMappings(p)$/
plugins#mappings#various#PluginVSearch	autoload/plugins/mappings/various.vim	/^fun! plugins#mappings#various#PluginVSearch(p)$/
plugins#mappings#various#SetWindowSize	autoload/plugins/mappings/various.vim	/^function! plugins#mappings#various#SetWindowSize(orientation)$/
plugins#mappings#various#VSetSearch	autoload/plugins/mappings/various.vim	/^  function! plugins#mappings#various#VSetSearch()$/
plugins#misc#rfc#CompleteRFCFiles	autoload/plugins/misc/rfc.vim	/^function! plugins#misc#rfc#CompleteRFCFiles(A,L,P)$/
plugins#misc#rfc#PluginRFC	autoload/plugins/misc/rfc.vim	/^function! plugins#misc#rfc#PluginRFC(p)$/
plugins#navigation#glob_open#FileByGlobCurrentDir	autoload/plugins/navigation/glob_open.vim	/^function! plugins#navigation#glob_open#FileByGlobCurrentDir(glob, excludes)$/
plugins#navigation#glob_open#PluginGlobOpen	autoload/plugins/navigation/glob_open.vim	/^function! plugins#navigation#glob_open#PluginGlobOpen(p)$/
plugins#plone#PluginPlone	autoload/plugins/plone.vim	/^function! plugins#plone#PluginPlone(p)$/
plugins#tovl#config#PluginTOVL_Config	autoload/plugins/tovl/config.vim	/^function! plugins#tovl#config#PluginTOVL_Config(p)$/
plugins#tovl#debug_trace#FindPiece	autoload/plugins/tovl/debug_trace.vim	/^fun! plugins#tovl#debug_trace#FindPiece(p, objects)$/
plugins#tovl#debug_trace#FindPieces	autoload/plugins/tovl/debug_trace.vim	/^fun! plugins#tovl#debug_trace#FindPieces(ps, objects)$/
plugins#tovl#debug_trace#PluginDebugTrace	autoload/plugins/tovl/debug_trace.vim	/^function! plugins#tovl#debug_trace#PluginDebugTrace(p)$/
plugins#tovl#errorformats#CompleteEFM	autoload/plugins/tovl/errorformats.vim	/^fun! plugins#tovl#errorformats#CompleteEFM(A,L,P)$/
plugins#tovl#errorformats#PluginErrorFormats	autoload/plugins/tovl/errorformats.vim	/^function! plugins#tovl#errorformats#PluginErrorFormats(p)$/
plugins#tovl#featureset#PluginFeatureSet	autoload/plugins/tovl/featureset.vim	/^function! plugins#tovl#featureset#PluginFeatureSet(p)$/
plugins#tovl#local_vimrc#PluginLocalVimrc	autoload/plugins/tovl/local_vimrc.vim	/^function! plugins#tovl#local_vimrc#PluginLocalVimrc(p)$/
plugins#tovl#log#PluginLog	autoload/plugins/tovl/log.vim	/^function! plugins#tovl#log#PluginLog(p)$/
plugins#tovl#log#ShowTOVLLog	autoload/plugins/tovl/log.vim	/^fun! plugins#tovl#log#ShowTOVLLog()$/
plugins#tovl#mru#PluginMRU	autoload/plugins/tovl/mru.vim	/^function! plugins#tovl#mru#PluginMRU(p)$/
plugins#tovl#runtaskinbackground#PluginRunTaskInBackground	autoload/plugins/tovl/runtaskinbackground.vim	/^function! plugins#tovl#runtaskinbackground#PluginRunTaskInBackground(p)$/
plugins#vcs#git#PluginGit	autoload/plugins/vcs/git.vim	/^function! plugins#vcs#git#PluginGit(p)$/
pop_context	autoload/vspec.vim	/^function! s:pop_context()  "{{{3$/
portable_count	autoload/exjumplist.vim	/^function! s:portable_count(count)  "{{{2$/
pos_headp	autoload/textobj/user.vim	/^function! s:pos_headp(pos)$/
pos_lastp	autoload/textobj/user.vim	/^function! s:pos_lastp(pos)$/
pos_le	autoload/textobj/user.vim	/^function! s:pos_le(pos1, pos2)  " less than or equal$/
prefix	ftplugin/latex-suite/outline.py	/^        prefix = ''$/
prefix	ftplugin/latex-suite/outline.py	/^        prefix = sys.argv[2]$/
prefix_table_for	autoload/ku.vim	/^function! s:prefix_table_for(source)  "{{{3$/
prepare_movement	autoload/textobj/user.vim	/^function! s:prepare_movement(previous_mode)$/
prepare_selection	autoload/textobj/user.vim	/^function! s:prepare_selection(previous_mode)$/
previewNode	plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/
process	plugin/surround.vim	/^function! s:process(string)$/
process.DelTemp	autoload/tovl/runtaskinbackground.vim	/^  fun! process.DelTemp()$/
process.EchoResult	autoload/tovl/runtaskinbackground.vim	/^  fun! process.EchoResult()$/
process.Finished	autoload/tovl/runtaskinbackground.vim	/^  fun! process.Finished(exitCode)$/
process.OnFinish	autoload/tovl/runtaskinbackground.vim	/^  fun! process.OnFinish()$/
process.OnStart	autoload/tovl/runtaskinbackground.vim	/^  fun! process.OnStart()$/
process.Run	autoload/tovl/runtaskinbackground.vim	/^  fun! process.Run()$/
process.SetProcessId	autoload/tovl/runtaskinbackground.vim	/^  fun! process.SetProcessId(pid)$/
process_readline_data2	ftplugin/funnel.pl	/^sub process_readline_data2$/
promptToDelBuffer	plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/
prototype.AssessName	autoload/tlib/Filter_cnf.vim	/^function! s:prototype.AssessName(world, name) dict "{{{3$/
prototype.BuildTableList	autoload/tlib/World.vim	/^function! s:prototype.BuildTableList() dict "{{{3$/
prototype.CleanFilter	autoload/tlib/Filter_cnf.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/
prototype.CleanFilter	autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/
prototype.CleanFilter	autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/
prototype.CleanFilter	autoload/tlib/Filter_seq.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/
prototype.CleanFilter	autoload/tlib/World.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/
prototype.ClearAllMarks	autoload/tlib/World.vim	/^function! s:prototype.ClearAllMarks() dict "{{{3$/
prototype.CloseScratch	autoload/tlib/World.vim	/^function! s:prototype.CloseScratch(...) dict "{{{3$/
prototype.CurrentItem	autoload/tlib/World.vim	/^function! s:prototype.CurrentItem() dict "{{{3$/
prototype.DisplayFilter	autoload/tlib/Filter_cnf.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/
prototype.DisplayFilter	autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/
prototype.DisplayFilter	autoload/tlib/Filter_seq.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/
prototype.DisplayFilter	autoload/tlib/World.vim	/^function! s:prototype.DisplayFilter() dict "{{{3$/
prototype.DisplayHelp	autoload/tlib/World.vim	/^function! s:prototype.DisplayHelp() dict "{{{3$/
prototype.DisplayList	autoload/tlib/World.vim	/^function! s:prototype.DisplayList(query, ...) dict "{{{3$/
prototype.DisplayListMark	autoload/tlib/World.vim	/^function! s:prototype.DisplayListMark(x, y, mark) dict "{{{3$/
prototype.Dummy	autoload/tlib/Test.vim	/^function! s:prototype.Dummy() dict "{{{3$/
prototype.Dummy	autoload/tlib/TestChild.vim	/^function! s:prototype.Dummy() dict "{{{3$/
prototype.Extend	autoload/tlib/Object.vim	/^function! s:prototype.Extend(dictionary) dict "{{{3$/
prototype.FilterIsEmpty	autoload/tlib/World.vim	/^function! s:prototype.FilterIsEmpty() dict "{{{3$/
prototype.FilterRxPrefix	autoload/tlib/Filter_cnf.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/
prototype.FilterRxPrefix	autoload/tlib/Filter_seq.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/
prototype.FilterRxPrefix	autoload/tlib/World.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/
prototype.FollowCursor	autoload/tlib/World.vim	/^function! s:prototype.FollowCursor() dict "{{{3$/
prototype.FormatArgs	autoload/tlib/World.vim	/^function! s:prototype.FormatArgs(format_string, arg) dict "{{{3$/
prototype.FormatFilename	autoload/tlib/World.vim	/^function! s:prototype.FormatFilename(file) dict "{{{3$/
prototype.FormatName	autoload/tlib/World.vim	/^function! s:prototype.FormatName(cache, format, value) dict "{{{3$/
prototype.GetBaseIdx	autoload/tlib/World.vim	/^function! s:prototype.GetBaseIdx(idx) dict "{{{3$/
prototype.GetBaseIdx0	autoload/tlib/World.vim	/^function! s:prototype.GetBaseIdx0(idx) dict "{{{3$/
prototype.GetBaseItem	autoload/tlib/World.vim	/^function! s:prototype.GetBaseItem(idx) dict "{{{3$/
prototype.GetItem	autoload/tlib/World.vim	/^function! s:prototype.GetItem(idx) dict "{{{3$/
prototype.GetListIdx	autoload/tlib/World.vim	/^function! s:prototype.GetListIdx(baseidx) dict "{{{3$/
prototype.GetRx	autoload/tlib/World.vim	/^function! s:prototype.GetRx(filter) dict "{{{3$/
prototype.GetRx0	autoload/tlib/World.vim	/^function! s:prototype.GetRx0(...) dict "{{{3$/
prototype.GetSelectedItems	autoload/tlib/World.vim	/^function! s:prototype.GetSelectedItems(current) dict "{{{3$/
prototype.Highlight_filename	autoload/tlib/World.vim	/^function! s:prototype.Highlight_filename() dict "{{{3$/
prototype.Inherit	autoload/tlib/Object.vim	/^function! s:prototype.Inherit(object) dict "{{{3$/
prototype.IsA	autoload/tlib/Object.vim	/^function! s:prototype.IsA(class) dict "{{{3$/
prototype.IsRelated	autoload/tlib/Object.vim	/^function! s:prototype.IsRelated(object) dict "{{{3$/
prototype.IsValidFilter	autoload/tlib/World.vim	/^function! s:prototype.IsValidFilter() dict "{{{3$/
prototype.MarkCurrent	autoload/tlib/World.vim	/^function! s:prototype.MarkCurrent(y) dict "{{{3$/
prototype.Match	autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Match(world, text) dict "{{{3$/
prototype.Match	autoload/tlib/Filter_seq.vim	/^function! s:prototype.Match(world, text) dict "{{{3$/
prototype.MatchBaseIdx	autoload/tlib/World.vim	/^function! s:prototype.MatchBaseIdx(idx) dict "{{{3$/
prototype.Methods	autoload/tlib/Object.vim	/^function! s:prototype.Methods(...) dict "{{{3$/
prototype.New	autoload/tlib/Object.vim	/^function! s:prototype.New(...) dict "{{{3$/
prototype.PopFilter	autoload/tlib/World.vim	/^function! s:prototype.PopFilter() dict "{{{3$/
prototype.PushFrontFilter	autoload/tlib/Filter_cnf.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/
prototype.PushFrontFilter	autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/
prototype.PushFrontFilter	autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/
prototype.PushFrontFilter	autoload/tlib/Filter_seq.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/
prototype.PushFrontFilter	autoload/tlib/World.vim	/^function! s:prototype.PushFrontFilter(char) dict "{{{3$/
prototype.ReduceFilter	autoload/tlib/World.vim	/^function! s:prototype.ReduceFilter() dict "{{{3$/
prototype.ReduceFrontFilter	autoload/tlib/Filter_cnf.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/
prototype.ReduceFrontFilter	autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/
prototype.ReduceFrontFilter	autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/
prototype.ReduceFrontFilter	autoload/tlib/Filter_seq.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/
prototype.Reset	autoload/tlib/World.vim	/^function! s:prototype.Reset(...) dict "{{{3$/
prototype.ResetSelected	autoload/tlib/World.vim	/^function! s:prototype.ResetSelected() dict "{{{3$/
prototype.Resize	autoload/tlib/World.vim	/^function! s:prototype.Resize(hsize, vsize) dict "{{{3$/
prototype.RespondTo	autoload/tlib/Object.vim	/^function! s:prototype.RespondTo(name) dict "{{{3$/
prototype.RestoreOrigin	autoload/tlib/World.vim	/^function! s:prototype.RestoreOrigin(...) dict "{{{3$/
prototype.Retrieve	autoload/tlib/World.vim	/^function! s:prototype.Retrieve(anyway) dict "{{{3$/
prototype.SelectItem	autoload/tlib/World.vim	/^function! s:prototype.SelectItem(mode, index) dict "{{{3$/
prototype.SetBaseItem	autoload/tlib/World.vim	/^function! s:prototype.SetBaseItem(idx, item) dict "{{{3$/
prototype.SetFilter	autoload/tlib/World.vim	/^function! s:prototype.SetFilter() dict "{{{3$/
prototype.SetFrontFilter	autoload/tlib/Filter_cnf.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/
prototype.SetFrontFilter	autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/
prototype.SetFrontFilter	autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/
prototype.SetFrontFilter	autoload/tlib/Filter_seq.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/
prototype.SetFrontFilter	autoload/tlib/World.vim	/^function! s:prototype.SetFrontFilter(pattern) dict "{{{3$/
prototype.SetInitialFilter	autoload/tlib/World.vim	/^function! s:prototype.SetInitialFilter(filter) dict "{{{3$/
prototype.SetMatchMode	autoload/tlib/World.vim	/^function! s:prototype.SetMatchMode(match_mode) dict "{{{3$/
prototype.SetOffset	autoload/tlib/World.vim	/^function! s:prototype.SetOffset() dict "{{{3$/
prototype.SetOrigin	autoload/tlib/World.vim	/^function! s:prototype.SetOrigin(...) dict "{{{3$/
prototype.SetPrefIdx	autoload/tlib/World.vim	/^function! s:prototype.SetPrefIdx() dict "{{{3$/
prototype.SetStatusline	autoload/tlib/World.vim	/^function! s:prototype.SetStatusline(query) dict "{{{3$/
prototype.Set_display_format	autoload/tlib/World.vim	/^function! s:prototype.Set_display_format(value) dict "{{{3$/
prototype.Set_highlight_filename	autoload/tlib/World.vim	/^function! s:prototype.Set_highlight_filename() dict "{{{3$/
prototype.Super	autoload/tlib/Object.vim	/^function! s:prototype.Super(method, arglist) dict "{{{3$/
prototype.SwitchWindow	autoload/tlib/World.vim	/^function! s:prototype.SwitchWindow(where) dict "{{{3$/
prototype.UseInputListScratch	autoload/tlib/World.vim	/^function! s:prototype.UseInputListScratch() dict "{{{3$/
prototype.UseScratch	autoload/tlib/World.vim	/^function! s:prototype.UseScratch() dict "{{{3$/
push_context	autoload/vspec.vim	/^function! s:push_context(context)  "{{{3$/
putCursorInTreeWin	plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/
putCursorOnBookmarkTable	plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/
r	ftplugin/r.vim	/^  vnoremap <buffer> r <Esc>:call SendSelectionToR("silent", "down")<CR>$/
r	ftplugin/rhelp.vim	/^  vnoremap <buffer> r <Esc>:call SendSelectionToR("silent", "down")<CR>$/
r	ftplugin/rnoweb.vim	/^  vnoremap <buffer> r <Esc>:call SendSelectionToR("silent", "down")<CR>$/
range_containsp	autoload/textobj/user.vim	/^function! s:range_containsp(range_head, range_tail, target_pos)$/
range_no_text_without_edgesp	autoload/textobj/user.vim	/^function! s:range_no_text_without_edgesp(range_head, range_tail)$/
range_select	autoload/textobj/user.vim	/^function! s:range_select(range_head, range_tail)$/
range_validp	autoload/textobj/user.vim	/^function! s:range_validp(range_head, range_tail)$/
rcomplete#CompleteR	autoload/rcomplete.vim	/^fun! rcomplete#CompleteR(findstart, base)$/
re	ftplugin/latex-suite/bibtools.py	/^import re$/
re	ftplugin/latex-suite/outline.py	/^import re$/
re	ftplugin/latex-suite/pytools.py	/^import string, vim, re, os, glob$/
read	autoload/metarw.vim	/^function! s:read(arg)  "{{{2$/
read_blob	autoload/metarw/git.vim	/^function! s:read_blob(_)  "{{{2$/
read_branches	autoload/metarw/git.vim	/^function! s:read_branches(_)  "{{{2$/
read_clipboard	autoload/fakeclip.vim	/^function! s:read_clipboard()  "{{{2$/
read_clipboard_cygwin	autoload/fakeclip.vim	/^function! s:read_clipboard_cygwin()$/
read_clipboard_mac	autoload/fakeclip.vim	/^function! s:read_clipboard_mac()$/
read_clipboard_unknown	autoload/fakeclip.vim	/^function! s:read_clipboard_unknown()$/
read_clipboard_x	autoload/fakeclip.vim	/^function! s:read_clipboard_x()$/
read_commit	autoload/metarw/git.vim	/^function! s:read_commit(_)  "{{{2$/
read_pastebuffer	autoload/fakeclip.vim	/^function! s:read_pastebuffer()  "{{{2$/
read_pastebuffer_gnuscreen	autoload/fakeclip.vim	/^function! s:read_pastebuffer_gnuscreen()$/
read_pastebuffer_tmux	autoload/fakeclip.vim	/^function! s:read_pastebuffer_tmux()$/
read_pastebuffer_unknown	autoload/fakeclip.vim	/^function! s:read_pastebuffer_unknown()$/
read_tree	autoload/metarw/git.vim	/^function! s:read_tree(_)  "{{{2$/
read_vcs_command_result	autoload/vcsi.vim	/^function! s:read_vcs_command_result(line, args, ...)  "{{{2$/
recall_input_history	autoload/ku.vim	/^function! s:recall_input_history(delta, change_source_p)  "{{{2$/
redraw	plugin/surround.vim	/^function! s:redraw()$/
refreshCurrent	plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/
refreshRoot	plugin/NERD_tree.vim	/^function! s:refreshRoot()$/
regexp_any_char_of	autoload/ku.vim	/^function! s:regexp_any_char_of(cs)  "{{{2$/
regexp_not_any_char_of	autoload/ku.vim	/^function! s:regexp_not_any_char_of(cs)  "{{{2$/
register_designation	autoload/operator/user.vim	/^function! s:register_designation()$/
reindent	plugin/surround.vim	/^function! s:reindent() " {{{1$/
remove_flag	autoload/submode.vim	/^function! s:remove_flag(s, c)  "{{{2$/
remove_flydiff_handlers	autoload/flydiff.vim	/^function! s:remove_flydiff_handlers()  "{{{2$/
remove_prompt	autoload/ku.vim	/^function! s:remove_prompt(s)  "{{{3$/
renderBookmarks	plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/
renderView	plugin/NERD_tree.vim	/^function! s:renderView()$/
renderViewSavingPosition	plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/
repeat	plugin/surround.vim	/^function! s:repeat(str,count)$/
repeat#_do	autoload/repeat.vim	/^function! repeat#_do(keyseq, count)  "{{{2$/
repeat#_repeat	autoload/repeat.vim	/^function! repeat#_repeat(count)  "{{{2$/
repeat#set	autoload/repeat.vim	/^function! repeat#set(keyseq, ...)  "{{{2$/
restoreScreenState	plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/
restore_options	autoload/arpeggio.vim	/^function! s:restore_options()  "{{{2$/
restore_options	autoload/submode.vim	/^function! s:restore_options()  "{{{2$/
restore_register	autoload/fakeclip.vim	/^function! s:restore_register(regname, reginfo)  "{{{2$/
revealBookmark	plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/
rhs_escape	autoload/textobj/user.vim	/^function! s:rhs_escape(pattern)$/
rmfilters	ftplugin/latex-suite/bibtools.py	/^    def rmfilters(self):$/
rmsortfields	ftplugin/latex-suite/bibtools.py	/^    def rmsortfields(self):$/
runtime_files	autoload/ku.vim	/^function! s:runtime_files(glob_pattern)  "{{{2$/
s	plugin/surround.vim	/^            vmap  s    <Plug>Vsurround$/
satisfies	ftplugin/latex-suite/bibtools.py	/^    def satisfies(self, filters):$/
save	ftplugin/perl.vim	/^  let save=&dictionary$/
saveScreenState	plugin/NERD_tree.vim	/^function! s:saveScreenState()$/
save_register	autoload/fakeclip.vim	/^function! s:save_register(regname)  "{{{2$/
save_the_state_of_buffer	autoload/narrow.vim	/^function! s:save_the_state_of_buffer()  "{{{2$/
scheme_of	autoload/metarw.vim	/^function! s:scheme_of(s)  "{{{2$/
scratch#close	autoload/scratch.vim	/^function! scratch#close()  "{{{2$/
scratch#evaluate	autoload/scratch.vim	/^function! scratch#evaluate(range_head, range_tail, adjust_cursorp)  "{{{2$/
scratch#evaluate_linewise	autoload/scratch.vim	/^function! scratch#evaluate_linewise(line1, line2, adjust_cursorp)  "{{{2$/
scratch#open	autoload/scratch.vim	/^function! scratch#open()  "{{{2$/
select	autoload/textobj/indent.vim	/^function! s:select(include_empty_lines_p, block_border_type)  "{{{2$/
select	plugin/textobj/function.vim	/^function! s:select(object_type)$/
select	plugin/textobj/lastpat.vim	/^function! s:select(opposite_p)$/
select_N	plugin/textobj/lastpat.vim	/^function! s:select_N()$/
select_a	plugin/textobj/entire.vim	/^function! s:select_a()$/
select_a	plugin/textobj/fold.vim	/^function! s:select_a()$/
select_a	plugin/textobj/function.vim	/^function! s:select_a()$/
select_function_wrapper	autoload/textobj/user.vim	/^function! s:select_function_wrapper(function_name, previous_mode)$/
select_i	plugin/textobj/entire.vim	/^function! s:select_i()$/
select_i	plugin/textobj/fold.vim	/^function! s:select_i()$/
select_i	plugin/textobj/function.vim	/^function! s:select_i()$/
select_last_motion	autoload/fakeclip.vim	/^function! s:select_last_motion(motion_type)  "{{{2$/
select_n	plugin/textobj/lastpat.vim	/^function! s:select_n()$/
selection	autoload/altkwprg.vim	/^function! s:selection()  "{{{2$/
separator_regexp	autoload/ku/bundle.vim	/^function! s:separator_regexp()  "{{{2$/
set_flydiff_handlers	autoload/flydiff.vim	/^function! s:set_flydiff_handlers()  "{{{2$/
set_up_content_browser_buffer	autoload/metarw.vim	/^function! s:set_up_content_browser_buffer(fakepath, items)  "{{{2$/
set_up_options	autoload/arpeggio.vim	/^function! s:set_up_options(key)  "{{{2$/
set_up_options	autoload/submode.vim	/^function! s:set_up_options()  "{{{2$/
setupStatusline	plugin/NERD_tree.vim	/^function! s:setupStatusline()$/
setupSyntaxHighlighting	plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/
showMenu	plugin/NERD_tree.vim	/^function! s:showMenu()$/
show_vec	ftplugin/funnel.pl	/^sub show_vec$/
skip_spaces	autoload/arpeggio.vim	/^function! s:skip_spaces(ss)  "{{{2$/
smartchr#loop	autoload/smartchr.vim	/^function! smartchr#loop(...)$/
smartchr#one_of	autoload/smartchr.vim	/^function! smartchr#one_of(...)$/
smarttill#after	autoload/smarttill.vim	/^function! smarttill#after(mode)  "{{{2$/
smarttill#before	autoload/smarttill.vim	/^function! smarttill#before(mode)  "{{{2$/
smartword#move	autoload/smartword.vim	/^function! smartword#move(motion_command, mode)  "{{{2$/
snr_prefix	autoload/textobj/user.vim	/^function! s:snr_prefix(sfile)$/
sort	ftplugin/latex-suite/bibtools.py	/^    def sort(self):$/
sort_sources	autoload/ku.vim	/^function! s:sort_sources(_)  "{{{2$/
spawn	ftplugin/funnel.pl	/^sub spawn$/
split	autoload/vspec.vim	/^  let _ = split(function_names, '\\n')$/
split_keys	autoload/submode.vim	/^function! s:split_keys(keyseq)  "{{{2$/
split_source_name	autoload/ku.vim	/^function! s:split_source_name(source_name)  "{{{2$/
split_to_keys	autoload/arpeggio.vim	/^function! s:split_to_keys(lhs)  "{{{2$/
status_line	plugin/ui-functions.vim	/^function! s:status_line(current, hl, ...)$/
string	ftplugin/latex-suite/pytools.py	/^import string, vim, re, os, glob$/
stripComments	ftplugin/latex-suite/outline.py	/^def stripComments(contents):$/
stripMarkupFromLine	plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/
submode#enter_with	autoload/submode.vim	/^function! submode#enter_with(submode, modes, options, lhs, ...)  "{{{2$/
submode#leave_with	autoload/submode.vim	/^function! submode#leave_with(submode, modes, options, lhs)  "{{{2$/
submode#map	autoload/submode.vim	/^function! submode#map(submode, modes, options, lhs, rhs)  "{{{2$/
submode#restore_options	autoload/submode.vim	/^function! submode#restore_options()  "{{{2$/
submode#unmap	autoload/submode.vim	/^function! submode#unmap(submode, modes, options, lhs)  "{{{2$/
switch_current_source	autoload/ku.vim	/^function! s:switch_current_source(new_source)  "{{{2$/
syntaxcomplete#Complete	autoload/syntaxcomplete.vim	/^function! syntaxcomplete#Complete(findstart, base)$/
sys	ftplugin/latex-suite/bibtools.py	/^    import sys$/
sys	ftplugin/latex-suite/outline.py	/^import sys$/
tabpagevar	plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/
text_by_automatic_component_completion	autoload/ku.vim	/^function! s:text_by_automatic_component_completion(line)  "{{{3$/
textobj#indent#select_a	autoload/textobj/indent.vim	/^function! textobj#indent#select_a()  "{{{2$/
textobj#indent#select_i	autoload/textobj/indent.vim	/^function! textobj#indent#select_i()  "{{{2$/
textobj#indent#select_same_a	autoload/textobj/indent.vim	/^function! textobj#indent#select_same_a()  "{{{2$/
textobj#indent#select_same_i	autoload/textobj/indent.vim	/^function! textobj#indent#select_same_i()  "{{{2$/
textobj#syntax#select_a	autoload/textobj/syntax.vim	/^function! textobj#syntax#select_a()  "{{{2$/
textobj#syntax#select_i	autoload/textobj/syntax.vim	/^function! textobj#syntax#select_i()  "{{{2$/
textobj#user#define	autoload/textobj/user.vim	/^function! textobj#user#define(pat0, pat1, pat2, guideline)  "{{{2$/
textobj#user#move	autoload/textobj/user.vim	/^function! textobj#user#move(pattern, flags, previous_mode)$/
textobj#user#plugin	autoload/textobj/user.vim	/^function! textobj#user#plugin(plugin_name, obj_specs)  "{{{2$/
textobj#user#select	autoload/textobj/user.vim	/^function! textobj#user#select(pattern, flags, previous_mode)$/
textobj#user#select_pair	autoload/textobj/user.vim	/^function! textobj#user#select_pair(pattern1, pattern2, flags, previous_mode)$/
theonevimlibsetup#Setup	autoload/theonevimlibsetup.vim	/^function! theonevimlibsetup#Setup()$/
threading	autoload/tovl/runtaskinbackground.vim	/^import threading$/
tlib#Filter_cnf#New	autoload/tlib/Filter_cnf.vim	/^function! tlib#Filter_cnf#New(...) "{{{3$/
tlib#Filter_cnfd#New	autoload/tlib/Filter_cnfd.vim	/^function! tlib#Filter_cnfd#New(...) "{{{3$/
tlib#Filter_fuzzy#New	autoload/tlib/Filter_fuzzy.vim	/^function! tlib#Filter_fuzzy#New(...) "{{{3$/
tlib#Filter_seq#New	autoload/tlib/Filter_seq.vim	/^function! tlib#Filter_seq#New(...) "{{{3$/
tlib#Object#New	autoload/tlib/Object.vim	/^function! tlib#Object#New(...) "{{{3$/
tlib#Test#New	autoload/tlib/Test.vim	/^function! tlib#Test#New(...) "{{{3$/
tlib#TestChild#New	autoload/tlib/TestChild.vim	/^function! tlib#TestChild#New(...) "{{{3$/
tlib#World#New	autoload/tlib/World.vim	/^function! tlib#World#New(...)$/
tlib#agent#AND	autoload/tlib/agent.vim	/^function! tlib#agent#AND(world, selected) "{{{3$/
tlib#agent#Copy	autoload/tlib/agent.vim	/^function! tlib#agent#Copy(world, selected) "{{{3$/
tlib#agent#CopyItems	autoload/tlib/agent.vim	/^function! tlib#agent#CopyItems(world, selected) "{{{3$/
tlib#agent#Cut	autoload/tlib/agent.vim	/^function! tlib#agent#Cut(world, selected) "{{{3$/
tlib#agent#Debug	autoload/tlib/agent.vim	/^function! tlib#agent#Debug(world, selected) "{{{3$/
tlib#agent#DeleteItems	autoload/tlib/agent.vim	/^function! tlib#agent#DeleteItems(world, selected) "{{{3$/
tlib#agent#DoAtLine	autoload/tlib/agent.vim	/^function! tlib#agent#DoAtLine(world, selected) "{{{3$/
tlib#agent#Down	autoload/tlib/agent.vim	/^function! tlib#agent#Down(world, selected, ...) "{{{3$/
tlib#agent#DownN	autoload/tlib/agent.vim	/^function! tlib#agent#DownN(world, selected) "{{{3$/
tlib#agent#EditFile	autoload/tlib/agent.vim	/^function! tlib#agent#EditFile(world, selected) "{{{3$/
tlib#agent#EditFileInSplit	autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInSplit(world, selected) "{{{3$/
tlib#agent#EditFileInTab	autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInTab(world, selected) "{{{3$/
tlib#agent#EditFileInVSplit	autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInVSplit(world, selected) "{{{3$/
tlib#agent#EditItem	autoload/tlib/agent.vim	/^function! tlib#agent#EditItem(world, selected) "{{{3$/
tlib#agent#EditReturnValue	autoload/tlib/agent.vim	/^function! tlib#agent#EditReturnValue(world, rv) "{{{3$/
tlib#agent#Exit	autoload/tlib/agent.vim	/^function! tlib#agent#Exit(world, selected) "{{{3$/
tlib#agent#GotoLine	autoload/tlib/agent.vim	/^function! tlib#agent#GotoLine(world, selected) "{{{3$/
tlib#agent#Help	autoload/tlib/agent.vim	/^function! tlib#agent#Help(world, selected) "{{{3$/
tlib#agent#Input	autoload/tlib/agent.vim	/^function! tlib#agent#Input(world, selected) "{{{3$/
tlib#agent#NewItem	autoload/tlib/agent.vim	/^function! tlib#agent#NewItem(world, selected) "{{{3$/
tlib#agent#OR	autoload/tlib/agent.vim	/^function! tlib#agent#OR(world, selected) "{{{3$/
tlib#agent#PageDown	autoload/tlib/agent.vim	/^function! tlib#agent#PageDown(world, selected) "{{{3$/
tlib#agent#PageUp	autoload/tlib/agent.vim	/^function! tlib#agent#PageUp(world, selected) "{{{3$/
tlib#agent#Paste	autoload/tlib/agent.vim	/^function! tlib#agent#Paste(world, selected) "{{{3$/
tlib#agent#PopFilter	autoload/tlib/agent.vim	/^function! tlib#agent#PopFilter(world, selected) "{{{3$/
tlib#agent#PreviewLine	autoload/tlib/agent.vim	/^function! tlib#agent#PreviewLine(world, selected) "{{{3$/
tlib#agent#ReduceFilter	autoload/tlib/agent.vim	/^function! tlib#agent#ReduceFilter(world, selected) "{{{3$/
tlib#agent#Reset	autoload/tlib/agent.vim	/^function! tlib#agent#Reset(world, selected) "{{{3$/
tlib#agent#Select	autoload/tlib/agent.vim	/^function! tlib#agent#Select(world, selected) "{{{3$/
tlib#agent#SelectAll	autoload/tlib/agent.vim	/^function! tlib#agent#SelectAll(world, selected) "{{{3$/
tlib#agent#SelectDown	autoload/tlib/agent.vim	/^function! tlib#agent#SelectDown(world, selected) "{{{3$/
tlib#agent#SelectUp	autoload/tlib/agent.vim	/^function! tlib#agent#SelectUp(world, selected) "{{{3$/
tlib#agent#ShiftLeft	autoload/tlib/agent.vim	/^function! tlib#agent#ShiftLeft(world, selected) "{{{3$/
tlib#agent#ShiftRight	autoload/tlib/agent.vim	/^function! tlib#agent#ShiftRight(world, selected) "{{{3$/
tlib#agent#ShowInfo	autoload/tlib/agent.vim	/^function! tlib#agent#ShowInfo(world, selected)$/
tlib#agent#Suspend	autoload/tlib/agent.vim	/^function! tlib#agent#Suspend(world, selected) "{{{3$/
tlib#agent#SuspendToParentWindow	autoload/tlib/agent.vim	/^function! tlib#agent#SuspendToParentWindow(world, selected) "{{{3$/
tlib#agent#ToggleScrollbind	autoload/tlib/agent.vim	/^function! tlib#agent#ToggleScrollbind(world, selected) "{{{3$/
tlib#agent#ToggleStickyList	autoload/tlib/agent.vim	/^function! tlib#agent#ToggleStickyList(world, selected) "{{{3$/
tlib#agent#Up	autoload/tlib/agent.vim	/^function! tlib#agent#Up(world, selected, ...) "{{{3$/
tlib#agent#UpN	autoload/tlib/agent.vim	/^function! tlib#agent#UpN(world, selected) "{{{3$/
tlib#agent#ViewFile	autoload/tlib/agent.vim	/^function! tlib#agent#ViewFile(world, selected) "{{{3$/
tlib#arg#Ex	autoload/tlib/arg.vim	/^function! tlib#arg#Ex(arg, ...) "{{{3$/
tlib#arg#Get	autoload/tlib/arg.vim	/^function! tlib#arg#Get(n, var, ...) "{{{3$/
tlib#arg#Key	autoload/tlib/arg.vim	/^function! tlib#arg#Key(list, ...) "{{{3$/
tlib#arg#Let	autoload/tlib/arg.vim	/^function! tlib#arg#Let(list, ...) "{{{3$/
tlib#arg#StringAsKeyArgs	autoload/tlib/arg.vim	/^function! tlib#arg#StringAsKeyArgs(string, ...) "{{{1$/
tlib#autocmdgroup#Init	autoload/tlib/autocmdgroup.vim	/^function! tlib#autocmdgroup#Init() "{{{3$/
tlib#buffer#BufDo	autoload/tlib/buffer.vim	/^function! tlib#buffer#BufDo(exec) "{{{3$/
tlib#buffer#CurrentByte	autoload/tlib/buffer.vim	/^function! tlib#buffer#CurrentByte() "{{{3$/
tlib#buffer#DeleteRange	autoload/tlib/buffer.vim	/^function! tlib#buffer#DeleteRange(line1, line2) "{{{3$/
tlib#buffer#DisableMRU	autoload/tlib/buffer.vim	/^function! tlib#buffer#DisableMRU() "{{{3$/
tlib#buffer#EnableMRU	autoload/tlib/buffer.vim	/^function! tlib#buffer#EnableMRU() "{{{3$/
tlib#buffer#Eval	autoload/tlib/buffer.vim	/^function! tlib#buffer#Eval(buffer, code) "{{{3$/
tlib#buffer#GetList	autoload/tlib/buffer.vim	/^function! tlib#buffer#GetList(...)$/
tlib#buffer#HighlightLine	autoload/tlib/buffer.vim	/^function! tlib#buffer#HighlightLine(line) "{{{3$/
tlib#buffer#InsertText	autoload/tlib/buffer.vim	/^function! tlib#buffer#InsertText(text, ...) "{{{3$/
tlib#buffer#InsertText0	autoload/tlib/buffer.vim	/^function! tlib#buffer#InsertText0(text, ...) "{{{3$/
tlib#buffer#KeepCursorPosition	autoload/tlib/buffer.vim	/^function! tlib#buffer#KeepCursorPosition(cmd) "{{{3$/
tlib#buffer#ReplaceRange	autoload/tlib/buffer.vim	/^function! tlib#buffer#ReplaceRange(line1, line2, lines)$/
tlib#buffer#ScratchEnd	autoload/tlib/buffer.vim	/^function! tlib#buffer#ScratchEnd() "{{{3$/
tlib#buffer#ScratchStart	autoload/tlib/buffer.vim	/^function! tlib#buffer#ScratchStart() "{{{3$/
tlib#buffer#Set	autoload/tlib/buffer.vim	/^function! tlib#buffer#Set(buffer) "{{{3$/
tlib#buffer#ViewLine	autoload/tlib/buffer.vim	/^function! tlib#buffer#ViewLine(line, ...) "{{{3$/
tlib#cache#Filename	autoload/tlib/cache.vim	/^function! tlib#cache#Filename(type, ...) "{{{3$/
tlib#cache#Get	autoload/tlib/cache.vim	/^function! tlib#cache#Get(cfile) "{{{3$/
tlib#cache#Save	autoload/tlib/cache.vim	/^function! tlib#cache#Save(cfile, dictionary) "{{{3$/
tlib#char#Get	autoload/tlib/char.vim	/^function! tlib#char#Get(...) "{{{3$/
tlib#char#GetWithTimeout	autoload/tlib/char.vim	/^function! tlib#char#GetWithTimeout(timeout, ...) "{{{3$/
tlib#char#IsAvailable	autoload/tlib/char.vim	/^function! tlib#char#IsAvailable() "{{{3$/
tlib#cmd#BrowseOutput	autoload/tlib/cmd.vim	/^function! tlib#cmd#BrowseOutput(command) "{{{3$/
tlib#cmd#OutputAsList	autoload/tlib/cmd.vim	/^function! tlib#cmd#OutputAsList(command) "{{{3$/
tlib#cmd#Time	autoload/tlib/cmd.vim	/^function! tlib#cmd#Time(cmd) "{{{3$/
tlib#cmd#UseVertical	autoload/tlib/cmd.vim	/^function! tlib#cmd#UseVertical(...) "{{{3$/
tlib#comments#Comments	autoload/tlib/comments.vim	/^function! tlib#comments#Comments(...)$/
tlib#dir#CD	autoload/tlib/dir.vim	/^function! tlib#dir#CD(dir, ...) "{{{3$/
tlib#dir#CanonicName	autoload/tlib/dir.vim	/^function! tlib#dir#CanonicName(dirname) "{{{3$/
tlib#dir#Ensure	autoload/tlib/dir.vim	/^function! tlib#dir#Ensure(dir) "{{{3$/
tlib#dir#MyRuntime	autoload/tlib/dir.vim	/^function! tlib#dir#MyRuntime() "{{{3$/
tlib#dir#PlainName	autoload/tlib/dir.vim	/^function! tlib#dir#PlainName(dirname) "{{{3$/
tlib#dir#Pop	autoload/tlib/dir.vim	/^function! tlib#dir#Pop() "{{{3$/
tlib#dir#Push	autoload/tlib/dir.vim	/^function! tlib#dir#Push(dir, ...) "{{{3$/
tlib#eval#FormatValue	autoload/tlib/eval.vim	/^function! tlib#eval#FormatValue(value, ...) "{{{3$/
tlib#file#Join	autoload/tlib/file.vim	/^function! tlib#file#Join(filename_parts, ...) "{{{3$/
tlib#file#Relative	autoload/tlib/file.vim	/^function! tlib#file#Relative(filename, basedir) "{{{3$/
tlib#file#Split	autoload/tlib/file.vim	/^function! tlib#file#Split(filename) "{{{3$/
tlib#file#With	autoload/tlib/file.vim	/^function! tlib#file#With(fcmd, bcmd, files, ...) "{{{3$/
tlib#hook#Run	autoload/tlib/hook.vim	/^function! tlib#hook#Run(hook, ...) "{{{3$/
tlib#input#CommandSelect	autoload/tlib/input.vim	/^function! tlib#input#CommandSelect(command, ...) "{{{3$/
tlib#input#Edit	autoload/tlib/input.vim	/^function! tlib#input#Edit(name, value, callback, ...) "{{{3$/
tlib#input#EditList	autoload/tlib/input.vim	/^function! tlib#input#EditList(query, list, ...) "{{{3$/
tlib#input#List	autoload/tlib/input.vim	/^function! tlib#input#List(type, ...) "{{{3$/
tlib#input#ListD	autoload/tlib/input.vim	/^function! tlib#input#ListD(dict) "{{{3$/
tlib#input#ListW	autoload/tlib/input.vim	/^function! tlib#input#ListW(world, ...) "{{{3$/
tlib#input#Resume	autoload/tlib/input.vim	/^function! tlib#input#Resume(name, pick) "{{{3$/
tlib#list#All	autoload/tlib/list.vim	/^function! tlib#list#All(list, expr) "{{{3$/
tlib#list#Any	autoload/tlib/list.vim	/^function! tlib#list#Any(list, expr) "{{{3$/
tlib#list#Compact	autoload/tlib/list.vim	/^function! tlib#list#Compact(list) "{{{3$/
tlib#list#Find	autoload/tlib/list.vim	/^function! tlib#list#Find(list, filter, ...) "{{{3$/
tlib#list#FindAll	autoload/tlib/list.vim	/^function! tlib#list#FindAll(list, filter, ...) "{{{3$/
tlib#list#Flatten	autoload/tlib/list.vim	/^function! tlib#list#Flatten(list) "{{{3$/
tlib#list#Inject	autoload/tlib/list.vim	/^function! tlib#list#Inject(list, value, Function) "{{{3$/
tlib#list#Remove	autoload/tlib/list.vim	/^function! tlib#list#Remove(list, element) "{{{3$/
tlib#list#RemoveAll	autoload/tlib/list.vim	/^function! tlib#list#RemoveAll(list, element) "{{{3$/
tlib#list#Uniq	autoload/tlib/list.vim	/^function! tlib#list#Uniq(list, ...) "{{{3$/
tlib#list#Zip	autoload/tlib/list.vim	/^function! tlib#list#Zip(lists, ...) "{{{3$/
tlib#map#PumAccept	autoload/tlib/map.vim	/^function! tlib#map#PumAccept(key) "{{{3$/
tlib#normal#WithRegister	autoload/tlib/normal.vim	/^function! tlib#normal#WithRegister(cmd, ...) "{{{3$/
tlib#notify#Echo	autoload/tlib/notify.vim	/^function! tlib#notify#Echo(text, ...) "{{{3$/
tlib#notify#TrimMessage	autoload/tlib/notify.vim	/^function! tlib#notify#TrimMessage(message) "{{{3$/
tlib#paragraph#GetMetric	autoload/tlib/paragraph.vim	/^function! tlib#paragraph#GetMetric() "{{{3$/
tlib#paragraph#Move	autoload/tlib/paragraph.vim	/^function! tlib#paragraph#Move(direction, count)$/
tlib#progressbar#Display	autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Display(value, ...) "{{{3$/
tlib#progressbar#Init	autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Init(max, ...) "{{{3$/
tlib#progressbar#Restore	autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Restore() "{{{3$/
tlib#rx#Escape	autoload/tlib/rx.vim	/^function! tlib#rx#Escape(text, ...) "{{{3$/
tlib#rx#EscapeReplace	autoload/tlib/rx.vim	/^function! tlib#rx#EscapeReplace(text, ...) "{{{3$/
tlib#rx#Suffixes	autoload/tlib/rx.vim	/^function! tlib#rx#Suffixes(...) "{{{3$/
tlib#scratch#CloseScratch	autoload/tlib/scratch.vim	/^function! tlib#scratch#CloseScratch(keyargs, ...) "{{{3$/
tlib#scratch#UseScratch	autoload/tlib/scratch.vim	/^function! tlib#scratch#UseScratch(...) "{{{3$/
tlib#signs#ClearAll	autoload/tlib/signs.vim	/^function! tlib#signs#ClearAll(sign) "{{{3$/
tlib#signs#ClearBuffer	autoload/tlib/signs.vim	/^function! tlib#signs#ClearBuffer(sign, bufnr) "{{{3$/
tlib#signs#Mark	autoload/tlib/signs.vim	/^function! tlib#signs#Mark(sign, list) "{{{3$/
tlib#string#Chomp	autoload/tlib/string.vim	/^function! tlib#string#Chomp(string) "{{{3$/
tlib#string#Count	autoload/tlib/string.vim	/^function! tlib#string#Count(string, rx) "{{{3$/
tlib#string#Format	autoload/tlib/string.vim	/^function! tlib#string#Format(template, dict) "{{{3$/
tlib#string#Printf1	autoload/tlib/string.vim	/^function! tlib#string#Printf1(format, string) "{{{3$/
tlib#string#RemoveBackslashes	autoload/tlib/string.vim	/^function! tlib#string#RemoveBackslashes(text, ...) "{{{3$/
tlib#string#Strip	autoload/tlib/string.vim	/^function! tlib#string#Strip(string) "{{{3$/
tlib#string#TrimLeft	autoload/tlib/string.vim	/^function! tlib#string#TrimLeft(string) "{{{3$/
tlib#string#TrimRight	autoload/tlib/string.vim	/^function! tlib#string#TrimRight(string) "{{{3$/
tlib#syntax#Collect	autoload/tlib/syntax.vim	/^function! tlib#syntax#Collect() "{{{3$/
tlib#syntax#Names	autoload/tlib/syntax.vim	/^function! tlib#syntax#Names(...) "{{{3$/
tlib#tab#BufMap	autoload/tlib/tab.vim	/^function! tlib#tab#BufMap() "{{{3$/
tlib#tab#Set	autoload/tlib/tab.vim	/^function! tlib#tab#Set(tabnr) "{{{3$/
tlib#tab#TabWinNr	autoload/tlib/tab.vim	/^function! tlib#tab#TabWinNr(buffer) "{{{3$/
tlib#tag#Collect	autoload/tlib/tag.vim	/^function! tlib#tag#Collect(constraints, ...) "{{{3$/
tlib#tag#Format	autoload/tlib/tag.vim	/^function! tlib#tag#Format(tag) "{{{3$/
tlib#tag#Retrieve	autoload/tlib/tag.vim	/^function! tlib#tag#Retrieve(rx, ...) "{{{3$/
tlib#textobjects#Init	autoload/tlib/textobjects.vim	/^function! tlib#textobjects#Init() "{{{3$/
tlib#textobjects#StandardParagraph	autoload/tlib/textobjects.vim	/^function! tlib#textobjects#StandardParagraph() "{{{3$/
tlib#time#Diff	autoload/tlib/time.vim	/^function! tlib#time#Diff(a, b, ...) "{{{3$/
tlib#time#DiffMSecs	autoload/tlib/time.vim	/^function! tlib#time#DiffMSecs(a, b, ...) "{{{3$/
tlib#time#MSecs	autoload/tlib/time.vim	/^function! tlib#time#MSecs() "{{{3$/
tlib#time#Now	autoload/tlib/time.vim	/^function! tlib#time#Now() "{{{3$/
tlib#type#IsDictionary	autoload/tlib/type.vim	/^function! tlib#type#IsDictionary(expr)$/
tlib#type#IsFuncref	autoload/tlib/type.vim	/^function! tlib#type#IsFuncref(expr)$/
tlib#type#IsList	autoload/tlib/type.vim	/^function! tlib#type#IsList(expr)$/
tlib#type#IsNumber	autoload/tlib/type.vim	/^function! tlib#type#IsNumber(expr)$/
tlib#type#IsString	autoload/tlib/type.vim	/^function! tlib#type#IsString(expr)$/
tlib#url#Decode	autoload/tlib/url.vim	/^function! tlib#url#Decode(url) "{{{3$/
tlib#url#DecodeChar	autoload/tlib/url.vim	/^function! tlib#url#DecodeChar(char) "{{{3$/
tlib#url#Encode	autoload/tlib/url.vim	/^function! tlib#url#Encode(url, ...) "{{{3$/
tlib#url#EncodeChar	autoload/tlib/url.vim	/^function! tlib#url#EncodeChar(char) "{{{3$/
tlib#var#EGet	autoload/tlib/var.vim	/^function! tlib#var#EGet(var, namespace, ...) "{{{3$/
tlib#var#Get	autoload/tlib/var.vim	/^function! tlib#var#Get(var, namespace, ...) "{{{3$/
tlib#var#Let	autoload/tlib/var.vim	/^function! tlib#var#Let(name, val) "{{{3$/
tlib#var#List	autoload/tlib/var.vim	/^function! tlib#var#List(rx, ...) "{{{3$/
tlib#win#GetLayout	autoload/tlib/win.vim	/^function! tlib#win#GetLayout(...) "{{{3$/
tlib#win#List	autoload/tlib/win.vim	/^function! tlib#win#List() "{{{3$/
tlib#win#Set	autoload/tlib/win.vim	/^function! tlib#win#Set(winnr) "{{{3$/
tlib#win#SetLayout	autoload/tlib/win.vim	/^function! tlib#win#SetLayout(layout) "{{{3$/
tlib#win#Width	autoload/tlib/win.vim	/^function! tlib#win#Width(wnr) "{{{3$/
to_map_arguments	autoload/arpeggio.vim	/^function! s:to_map_arguments(options)  "{{{2$/
tofl#list_test#Test	autoload/tovl/list_test.vim	/^function! tofl#list_test#Test()$/
toggle	plugin/NERD_tree.vim	/^function! s:toggle(dir)$/
toggleIgnoreFilter	plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/
toggleShowBookmarks	plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/
toggleShowFiles	plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/
toggleShowHidden	plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/
toggleZoom	plugin/NERD_tree.vim	/^function! s:toggleZoom()$/
tovl#buffer#SplitCurrentLineAtCursor	autoload/tovl/buffer.vim	/^fun! tovl#buffer#SplitCurrentLineAtCursor()$/
tovl#dict#CopyKeys	autoload/tovl/dict.vim	/^fun! tovl#dict#CopyKeys(dict, keys, mustExist)$/
tovl#errorformat#EscapePattern	autoload/tovl/errorformat.vim	/^function! tovl#errorformat#EscapePattern(p)$/
tovl#errorformat#SetErrorFormat	autoload/tovl/errorformat.vim	/^fun! tovl#errorformat#SetErrorFormat(id)$/
tovl#featureset#Apply	autoload/tovl/featureset.vim	/^fun! tovl#featureset#Apply()$/
tovl#featureset#AvailibleTags	autoload/tovl/featureset.vim	/^fun! tovl#featureset#AvailibleTags(buffer)$/
tovl#featureset#CommandAction	autoload/tovl/featureset.vim	/^fun! tovl#featureset#CommandAction(buffer, ...)$/
tovl#featureset#CommandCompletion	autoload/tovl/featureset.vim	/^fun! tovl#featureset#CommandCompletion(buffer, A,L,P)$/
tovl#featureset#CommandCompletionBuffer	autoload/tovl/featureset.vim	/^fun! tovl#featureset#CommandCompletionBuffer(...)$/
tovl#featureset#CommandCompletionGlobal	autoload/tovl/featureset.vim	/^fun! tovl#featureset#CommandCompletionGlobal(...)$/
tovl#featureset#DelItemsOfPlugin	autoload/tovl/featureset.vim	/^fun! tovl#featureset#DelItemsOfPlugin(name)$/
tovl#featureset#ListItems	autoload/tovl/featureset.vim	/^fun! tovl#featureset#ListItems(filter)$/
tovl#featureset#ModifyFeatureItem	autoload/tovl/featureset.vim	/^fun! tovl#featureset#ModifyFeatureItem(i,action)$/
tovl#featureset#ModifyTags	autoload/tovl/featureset.vim	/^fun! tovl#featureset#ModifyTags(buffer, tags_add, tags_del)$/
tovl#featureset#RegisterFeatureType	autoload/tovl/featureset.vim	/^fun! tovl#featureset#RegisterFeatureType(ext)$/
tovl#featureset#UnregisterFeatureType	autoload/tovl/featureset.vim	/^fun! tovl#featureset#UnregisterFeatureType(name)$/
tovl#ft#sql#Complete	autoload/tovl/ft/sql.vim	/^function! tovl#ft#sql#Complete(findstart, base)$/
tovl#ft#sql#Connect	autoload/tovl/ft/sql.vim	/^function! tovl#ft#sql#Connect(dbType,settings)$/
tovl#ft#sql#MysqlConn	autoload/tovl/ft/sql.vim	/^function! tovl#ft#sql#MysqlConn(conn)$/
tovl#ft#sql#ThisSQLCommand	autoload/tovl/ft/sql.vim	/^function! tovl#ft#sql#ThisSQLCommand()$/
tovl#ft#sql#UI	autoload/tovl/ft/sql.vim	/^function! tovl#ft#sql#UI()$/
tovl#ft#vimscript#vimfile#BuiltinFunctions	autoload/tovl/ft/vimscript/vimfile.vim	/^fun! tovl#ft#vimscript#vimfile#BuiltinFunctions()$/
tovl#ft#vimscript#vimfile#CompleteFunction	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#CompleteFunction(findstart,base)$/
tovl#ft#vimscript#vimfile#DoesAutoloadFunctionExist	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#DoesAutoloadFunctionExist(files, function)$/
tovl#ft#vimscript#vimfile#FileInAutoloadDir	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#FileInAutoloadDir(file)$/
tovl#ft#vimscript#vimfile#FileInDirOfRuntimePath	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#FileInDirOfRuntimePath(file, subdir)$/
tovl#ft#vimscript#vimfile#FileInRuntimePath	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#FileInRuntimePath(file)$/
tovl#ft#vimscript#vimfile#FindFileInRuntimePath	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#FindFileInRuntimePath(rel_filepath)$/
tovl#ft#vimscript#vimfile#FixPrefixesOfAutoloadFunctions	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#FixPrefixesOfAutoloadFunctions()$/
tovl#ft#vimscript#vimfile#GetAllDeclaredFunctions	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#GetAllDeclaredFunctions(file_as_string_list)$/
tovl#ft#vimscript#vimfile#GetAllUsedUserFunctions	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#GetAllUsedUserFunctions(file_as_string_list)$/
tovl#ft#vimscript#vimfile#GetFuncLocation	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#GetFuncLocation(addNonExisting)$/
tovl#ft#vimscript#vimfile#GetPrefix	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#GetPrefix(file)$/
tovl#ft#vimscript#vimfile#ListOfAutoloadFiles	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#ListOfAutoloadFiles()$/
tovl#ft#vimscript#vimfile#ScanVimFile	autoload/tovl/ft/vimscript/vimfile.vim	/^function! tovl#ft#vimscript#vimfile#ScanVimFile(file_lines)$/
tovl#lib#filefunctions#WalkUp	autoload/tovl/lib/filefunctions.vim	/^function! tovl#lib#filefunctions#WalkUp(path)$/
tovl#lib#filefunctions#WalkUpAndFind	autoload/tovl/lib/filefunctions.vim	/^function! tovl#lib#filefunctions#WalkUpAndFind(path,f_as_text,...)$/
tovl#list#AddUnique	autoload/tovl/list.vim	/^function! tovl#list#AddUnique(list, value)$/
tovl#list#Concat	autoload/tovl/list.vim	/^function! tovl#list#Concat(list_of_lists)$/
tovl#list#Difference	autoload/tovl/list.vim	/^function! tovl#list#Difference(a,b)$/
tovl#list#Intersection	autoload/tovl/list.vim	/^fun! tovl#list#Intersection(a,b)$/
tovl#list#MapIf	autoload/tovl/list.vim	/^function! tovl#list#MapIf(list, pred, expr)$/
tovl#list#Remove	autoload/tovl/list.vim	/^fun! tovl#list#Remove(l, i)$/
tovl#list#Uniq	autoload/tovl/list.vim	/^fun! tovl#list#Uniq(list)$/
tovl#log#FormatException	autoload/tovl/log.vim	/^fun! tovl#log#FormatException()$/
tovl#log#GetLogger	autoload/tovl/log.vim	/^fun! tovl#log#GetLogger()$/
tovl#log#Log	autoload/tovl/log.vim	/^fun! tovl#log#Log(...)$/
tovl#log#NewLogObj	autoload/tovl/log.vim	/^fun! tovl#log#NewLogObj()$/
tovl#log#SetLogger	autoload/tovl/log.vim	/^fun! tovl#log#SetLogger(o)$/
tovl#map#InsertLT	autoload/tovl/map.vim	/^fun! tovl#map#InsertLT(before, text, after)$/
tovl#n#quick_match_functions#AdvancedCamelCaseMatching	autoload/tovl/n/quick_match_functions.vim	/^function! tovl#n#quick_match_functions#AdvancedCamelCaseMatching(expr)$/
tovl#obj#NewObject	autoload/tovl/obj.vim	/^fun! tovl#obj#NewObject(name)$/
tovl#obj_test#Missing	autoload/tovl/obj_test.vim	/^fun! tovl#obj_test#Missing()$/
tovl#obj_test#Test	autoload/tovl/obj_test.vim	/^fun! tovl#obj_test#Test() $/
tovl#plugin#local_vimrc#ExtendPlugin	autoload/tovl/plugin/local_vimrc.vim	/^fun! tovl#plugin#local_vimrc#ExtendPlugin()$/
tovl#plugin_management#AllPluginFiles	autoload/tovl/plugin_management.vim	/^function! tovl#plugin_management#AllPluginFiles()$/
tovl#plugin_management#AllPlugins	autoload/tovl/plugin_management.vim	/^function! tovl#plugin_management#AllPlugins()$/
tovl#plugin_management#CompareLoadingOrder	autoload/tovl/plugin_management.vim	/^fun! tovl#plugin_management#CompareLoadingOrder(a,b)$/
tovl#plugin_management#NewPlugin	autoload/tovl/plugin_management.vim	/^fun! tovl#plugin_management#NewPlugin()$/
tovl#plugin_management#Plugin	autoload/tovl/plugin_management.vim	/^function! tovl#plugin_management#Plugin(name)$/
tovl#plugin_management#PluginDict	autoload/tovl/plugin_management.vim	/^function! tovl#plugin_management#PluginDict(p)$/
tovl#plugin_management#PluginNamesFromFile	autoload/tovl/plugin_management.vim	/^function! tovl#plugin_management#PluginNamesFromFile(file)$/
tovl#plugin_management#PluginsFromDict	autoload/tovl/plugin_management.vim	/^function! tovl#plugin_management#PluginsFromDict(path, dict, filter)$/
tovl#plugin_management#TidyUp	autoload/tovl/plugin_management.vim	/^function! tovl#plugin_management#TidyUp(dict)$/
tovl#plugin_management#UpdatePlugins	autoload/tovl/plugin_management.vim	/^function! tovl#plugin_management#UpdatePlugins()$/
tovl#plugins#mappings#various_surround#RemoveInnerMostSurrounding	autoload/tovl/plugins/mappings/various_surround.vim	/^function! tovl#plugins#mappings#various_surround#RemoveInnerMostSurrounding()$/
tovl#plugins#mappings#various_surround#RemoveSurrounding	autoload/tovl/plugins/mappings/various_surround.vim	/^function! tovl#plugins#mappings#various_surround#RemoveSurrounding()$/
tovl#plugins#mappings#various_surround#SubstituteInnerMostSurrounding	autoload/tovl/plugins/mappings/various_surround.vim	/^function! tovl#plugins#mappings#various_surround#SubstituteInnerMostSurrounding()$/
tovl#plugins#mappings#various_surround#SubstituteSurrounding	autoload/tovl/plugins/mappings/various_surround.vim	/^function! tovl#plugins#mappings#various_surround#SubstituteSurrounding()$/
tovl#plugins#mappings#various_surround#SubstituteSurroundingText	autoload/tovl/plugins/mappings/various_surround.vim	/^function! tovl#plugins#mappings#various_surround#SubstituteSurroundingText(subst, replace_with)$/
tovl#plugins#mappings#various_surround#Surround	autoload/tovl/plugins/mappings/various_surround.vim	/^function! tovl#plugins#mappings#various_surround#Surround(map_mode)$/
tovl#plugins#mappings#various_surround#SurroundText	autoload/tovl/plugins/mappings/various_surround.vim	/^function! tovl#plugins#mappings#various_surround#SurroundText(left, right, map_mode)$/
tovl#regex#regex#ManyQuotedStrings	autoload/tovl/regex/regex.vim	/^function! tovl#regex#regex#ManyQuotedStrings(notOuterSet, includeLeadingOuter, includeTrailingOuter)$/
tovl#regex#regex#MatchAll	autoload/tovl/regex/regex.vim	/^function! tovl#regex#regex#MatchAll(str, regex)$/
tovl#regex#regex#MatchLeftOpen	autoload/tovl/regex/regex.vim	/^function! tovl#regex#regex#MatchLeftOpen(open,close,inner,outer)$/
tovl#regex#regex#MatchLeftOpenQuotedString	autoload/tovl/regex/regex.vim	/^function! tovl#regex#regex#MatchLeftOpenQuotedString()$/
tovl#regex#regex#OpenCloseManyTimes	autoload/tovl/regex/regex.vim	/^function! tovl#regex#regex#OpenCloseManyTimes(open,close,inner,outer,includeLeadingOuter, includeTrailingOuter)$/
tovl#regex#regex#SeperatedBy	autoload/tovl/regex/regex.vim	/^function! tovl#regex#regex#SeperatedBy(regex, separator)$/
tovl#runtaskinbackground#DefaultDecorator	autoload/tovl/runtaskinbackground.vim	/^fun! tovl#runtaskinbackground#DefaultDecorator(p)$/
tovl#runtaskinbackground#EscapeShArg	autoload/tovl/runtaskinbackground.vim	/^fun! tovl#runtaskinbackground#EscapeShArg(arg)$/
tovl#runtaskinbackground#NewProcess	autoload/tovl/runtaskinbackground.vim	/^fun! tovl#runtaskinbackground#NewProcess(p)$/
tovl#runtaskinbackground#Run	autoload/tovl/runtaskinbackground.vim	/^fun! tovl#runtaskinbackground#Run(opts)$/
tovl#runtaskinbackground#RunHandlerPython	autoload/tovl/runtaskinbackground.vim	/^fun! tovl#runtaskinbackground#RunHandlerPython(process)$/
tovl#runtaskinbackground#RunHandlerSh	autoload/tovl/runtaskinbackground.vim	/^fun! tovl#runtaskinbackground#RunHandlerSh(process)$/
tovl#runtaskinbackground#RunHandlerSystem	autoload/tovl/runtaskinbackground.vim	/^fun! tovl#runtaskinbackground#RunHandlerSystem(opts)$/
tovl#runtaskinbackground#System	autoload/tovl/runtaskinbackground.vim	/^fun! tovl#runtaskinbackground#System(items, ... )$/
tovl#runtaskinbackground#Vim	autoload/tovl/runtaskinbackground.vim	/^fun! tovl#runtaskinbackground#Vim()$/
tovl#runtaskinbackground#VimFilepathByGlibc	autoload/tovl/runtaskinbackground.vim	/^fun! tovl#runtaskinbackground#VimFilepathByGlibc(v)$/
tovl#scratch_buffer#GetContents	autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#GetContents()$/
tovl#scratch_buffer#Help	autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#Help()$/
tovl#scratch_buffer#KeepIntactLineNr	autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#KeepIntactLineNr()$/
tovl#scratch_buffer#ScratchBuffer	autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#ScratchBuffer(opts)$/
tovl#scratch_buffer#Write	autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#Write()$/
tovl#template_systems#vl#DirectoryTemplateHandler	autoload/tovl/template_systems/vl.vim	/^function! tovl#template_systems#vl#DirectoryTemplateHandler( template )$/
tovl#template_systems#vl#ExtendPlugin	autoload/tovl/template_systems/vl.vim	/^fun! tovl#template_systems#vl#ExtendPlugin()$/
tovl#template_systems#vl#GetDirectoryTemplate	autoload/tovl/template_systems/vl.vim	/^function! tovl#template_systems#vl#GetDirectoryTemplate(path, vars, use_vim_preprocessor_using_exec)$/
tovl#template_systems#vl#PreprocessTemplatetext	autoload/tovl/template_systems/vl.vim	/^function! tovl#template_systems#vl#PreprocessTemplatetext(text, vars, ...)$/
tovl#template_systems#vl#TemplateGivenDirectlyHandler	autoload/tovl/template_systems/vl.vim	/^function! tovl#template_systems#vl#TemplateGivenDirectlyHandler(template)$/
tovl#ui#choice#Inputlist	autoload/tovl/ui/choice.vim	/^function! tovl#ui#choice#Inputlist(list)$/
tovl#ui#choice#LetUserSelectIfThereIsAChoice	autoload/tovl/ui/choice.vim	/^function! tovl#ui#choice#LetUserSelectIfThereIsAChoice(caption, list, ...)$/
tovl#ui#choice#LetUserSelectOneOf	autoload/tovl/ui/choice.vim	/^function! tovl#ui#choice#LetUserSelectOneOf(caption, list, ...)$/
tovl#ui#filter_list#ListTest	autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListTest()$/
tovl#ui#filter_list#ListTestGotoLineCurrentBuf	autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListTestGotoLineCurrentBuf()$/
tovl#ui#filter_list#ListView	autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListView(opts)$/
tovl#ui#match#AdvancedCamelCaseMatching	autoload/tovl/ui/match.vim	/^function! tovl#ui#match#AdvancedCamelCaseMatching(expr)$/
tovl#ui#multiple_completions#ChooseCompletionFunc	autoload/tovl/ui/multiple_completions.vim	/^fun! tovl#ui#multiple_completions#ChooseCompletionFunc() $/
tovl#ui#multiple_completions#Complete	autoload/tovl/ui/multiple_completions.vim	/^fun! tovl#ui#multiple_completions#Complete(...)$/
tovl#ui#multiple_completions#RegisterBufferCompletionFunc	autoload/tovl/ui/multiple_completions.vim	/^fun! tovl#ui#multiple_completions#RegisterBufferCompletionFunc(a)$/
tovl#ui#multiple_completions#UnregisterBufferCompletionFunc	autoload/tovl/ui/multiple_completions.vim	/^fun! tovl#ui#multiple_completions#UnregisterBufferCompletionFunc(a)$/
treeExistsForBuf	plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/
treeExistsForTab	plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/
undefine_submode_mapping	autoload/submode.vim	/^function! s:undefine_submode_mapping(submode, mode, options, lhs)  "{{{2$/
unescape_lhs	autoload/arpeggio.vim	/^function! s:unescape_lhs(escaped_lhs)  "{{{2$/
uninstall_handler	ftplugin/funnel.pl	/^sub uninstall_handler$/
uniq	autoload/ku.vim	/^function! s:uniq(sorted_list)  "{{{2$/
unique	plugin/NERD_tree.vim	/^function! s:unique(list)$/
upDir	plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/
uri_escape	autoload/wwwsearch.vim	/^function! s:uri_escape(s)  "{{{2$/
uri_to_search	autoload/wwwsearch.vim	/^function! s:uri_to_search(keyword, n_search_engine_name)  "{{{2$/
userlogin	ftplugin/r.vim	/^    let userlogin = strpart(userlogin, 0, newline)$/
userlogin	ftplugin/r.vim	/^  let userlogin = 'unknown'$/
userlogin	ftplugin/r.vim	/^let userlogin = system('whoami')$/
userlogin	ftplugin/rhelp.vim	/^    let userlogin = strpart(userlogin, 0, newline)$/
userlogin	ftplugin/rhelp.vim	/^  let userlogin = 'unknown'$/
userlogin	ftplugin/rhelp.vim	/^let userlogin = system('whoami')$/
userlogin	ftplugin/rnoweb.vim	/^    let userlogin = strpart(userlogin, 0, newline)$/
userlogin	ftplugin/rnoweb.vim	/^  let userlogin = 'unknown'$/
userlogin	ftplugin/rnoweb.vim	/^let userlogin = system('whoami')$/
valid_matcher_equality_p	autoload/vspec.vim	/^function! s:valid_matcher_equality_p(expr_matcher)  "{{{2$/
valid_matcher_negative_p	autoload/vspec.vim	/^function! s:valid_matcher_negative_p(expr_matcher)  "{{{2$/
valid_matcher_ordering_p	autoload/vspec.vim	/^function! s:valid_matcher_ordering_p(expr_matcher)  "{{{2$/
valid_matcher_p	autoload/vspec.vim	/^function! s:valid_matcher_p(expr_matcher)  "{{{2$/
valid_matcher_regexp_p	autoload/vspec.vim	/^function! s:valid_matcher_regexp_p(expr_matcher)  "{{{2$/
value_of	autoload/bundle.vim	/^function! s:value_of(event_name, ...)  "{{{2$/
vcs_diff_script	autoload/flydiff.vim	/^function! s:vcs_diff_script(bufnr)  "{{{2$/
vcs_type	autoload/vcsi.vim	/^function! s:vcs_type(targets)  "{{{2$/
vcsi#add	autoload/vcsi.vim	/^function! vcsi#add(...)  "{{{2$/
vcsi#amend	autoload/vcsi.vim	/^function! vcsi#amend(...)  "{{{2$/
vcsi#commit	autoload/vcsi.vim	/^function! vcsi#commit(...)  "{{{2$/
vcsi#diff	autoload/vcsi.vim	/^function! vcsi#diff(count, ...)  "{{{2$/
vcsi#log	autoload/vcsi.vim	/^function! vcsi#log(...)  "{{{2$/
vcsi#remove	autoload/vcsi.vim	/^function! vcsi#remove(banged_p, ...)  "{{{2$/
vcsi#revert	autoload/vcsi.vim	/^function! vcsi#revert(...)  "{{{2$/
vcsi#status	autoload/vcsi.vim	/^function! vcsi#status(...)  "{{{2$/
vim	autoload/tovl/runtaskinbackground.vim	/^import vim$/
vim	ftplugin/latex-suite/pytools.py	/^import string, vim, re, os, glob$/
vimball#Decompress	autoload/vimball.vim	/^fun! vimball#Decompress(fname,...)$/
vimball#MkVimball	autoload/vimball.vim	/^fun! vimball#MkVimball(line1,line2,writelevel,...) range$/
vimball#RestoreSettings	autoload/vimball.vim	/^fun! vimball#RestoreSettings()$/
vimball#RmVimball	autoload/vimball.vim	/^fun! vimball#RmVimball(...)$/
vimball#SaveSettings	autoload/vimball.vim	/^fun! vimball#SaveSettings()$/
vimball#ShowMesg	autoload/vimball.vim	/^fun! vimball#ShowMesg(level,msg)$/
vimball#Vimball	autoload/vimball.vim	/^fun! vimball#Vimball(really,...)$/
vimball#VimballHome	autoload/vimball.vim	/^fun! vimball#VimballHome()$/
visual_command_from_wise_name	autoload/operator/replace.vim	/^function! s:visual_command_from_wise_name(wise_name)  "{{{2()$/
vl#dev#haskell#modules_list_cache_jump#AddDirToModulCache	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#AddDirToModulCache(dir)$/
vl#dev#haskell#modules_list_cache_jump#Complete	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#Complete(findstart,base, func)$/
vl#dev#haskell#modules_list_cache_jump#CompleteAddMatchingFunctions	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#CompleteAddMatchingFunctions(regex1, quickRegex, scanned_file, prefix, module, file)$/
vl#dev#haskell#modules_list_cache_jump#CompleteAddMatchingTypes	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#CompleteAddMatchingTypes(regex1, quickRegex, scanned_file, prefix, module, file)$/
vl#dev#haskell#modules_list_cache_jump#CompleteFunction	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#CompleteFunction(findstart,base)$/
vl#dev#haskell#modules_list_cache_jump#CompleteModuleImportName	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#CompleteModuleImportName(findstart,base)$/
vl#dev#haskell#modules_list_cache_jump#CompleteType	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#CompleteType(findstart,base)$/
vl#dev#haskell#modules_list_cache_jump#FunctionRegex	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#FunctionRegex()$/
vl#dev#haskell#modules_list_cache_jump#GetPossibleImportHaskellFilenamesWithSameBase	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#GetPossibleImportHaskellFilenamesWithSameBase()$/
vl#dev#haskell#modules_list_cache_jump#ImportedList	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#ImportedList(file)$/
vl#dev#haskell#modules_list_cache_jump#OpenModuleByRegex	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#OpenModuleByRegex(RegExpr)$/
vl#dev#haskell#modules_list_cache_jump#PathOfModule	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#PathOfModule(module,...)$/
vl#dev#haskell#modules_list_cache_jump#RemoveDirectoryFromCache	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#RemoveDirectoryFromCache()$/
vl#dev#haskell#modules_list_cache_jump#RescanAll	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#RescanAll()$/
vl#dev#haskell#modules_list_cache_jump#ScanHaskellFile	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#ScanHaskellFile(file_lines)$/
vl#dev#haskell#modules_list_cache_jump#ScanModuleForFunctions	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#ScanModuleForFunctions(file)$/
vl#dev#haskell#modules_list_cache_jump#ScanModuleForFunctions_old	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#ScanModuleForFunctions_old(file)$/
vl#dev#haskell#modules_list_cache_jump#ScanModuleForTypes	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#ScanModuleForTypes(file)$/
vl#dev#haskell#modules_list_cache_jump#UpdateDir	autoload/vl/dev/haskell/modules_list_cache_jump.vim	/^function! vl#dev#haskell#modules_list_cache_jump#UpdateDir(dir,action)$/
vl#dev#haskell#template_helper_functions#DataDeclarationTypeAboveCursor	autoload/vl/dev/haskell/template_helper_functions.vim	/^function! vl#dev#haskell#template_helper_functions#DataDeclarationTypeAboveCursor()$/
vl#dev#vimscript#vimfile#CompleteFunction	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#CompleteFunction(findstart,base)$/
vl#dev#vimscript#vimfile#DoesAutoloadFunctionExist	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#DoesAutoloadFunctionExist(files, function)$/
vl#dev#vimscript#vimfile#FileInAutoloadDir	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#FileInAutoloadDir(file)$/
vl#dev#vimscript#vimfile#FileInDirOfRuntimePath	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#FileInDirOfRuntimePath(file, subdir)$/
vl#dev#vimscript#vimfile#FileInRuntimePath	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#FileInRuntimePath(file)$/
vl#dev#vimscript#vimfile#FindFileInRuntimePath	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#FindFileInRuntimePath(rel_filepath)$/
vl#dev#vimscript#vimfile#FixPrefixesOfAutoloadFunctions	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#FixPrefixesOfAutoloadFunctions()$/
vl#dev#vimscript#vimfile#Function	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#Function(name)$/
vl#dev#vimscript#vimfile#GetAllDeclaredFunctions	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#GetAllDeclaredFunctions(file_as_string_list)$/
vl#dev#vimscript#vimfile#GetAllUsedUserFunctions	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#GetAllUsedUserFunctions(file_as_string_list)$/
vl#dev#vimscript#vimfile#GetFuncLocation	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#GetFuncLocation()$/
vl#dev#vimscript#vimfile#GetPrefix	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#GetPrefix(file)$/
vl#dev#vimscript#vimfile#ListOfAutoloadFiles	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#ListOfAutoloadFiles()$/
vl#dev#vimscript#vimfile#ScanVimFile	autoload/vl/dev/vimscript/vimfile.vim	/^function! vl#dev#vimscript#vimfile#ScanVimFile(file_lines)$/
vl#lib#brief#args#GetOptionalArg	autoload/vl/lib/brief/args.vim	/^function! vl#lib#brief#args#GetOptionalArg( name, default)$/
vl#lib#brief#conditional#If	autoload/vl/lib/brief/conditional.vim	/^function! vl#lib#brief#conditional#If( condition, statement)$/
vl#lib#brief#conditional#IfElse	autoload/vl/lib/brief/conditional.vim	/^function! vl#lib#brief#conditional#IfElse(condition,if_value,else_value)$/
vl#lib#brief#handler#Handle	autoload/vl/lib/brief/handler.vim	/^function! vl#lib#brief#handler#Handle( value, handler_list)$/
vl#lib#brief#handler#HandleList	autoload/vl/lib/brief/handler.vim	/^function! vl#lib#brief#handler#HandleList( value_list, handler)$/
vl#lib#brief#handler#IsExecutableHandlerfunc	autoload/vl/lib/brief/handler.vim	/^function! vl#lib#brief#handler#IsExecutableHandlerfunc(filename)$/
vl#lib#brief#map#MapCommand	autoload/vl/lib/brief/map.vim	/^function! vl#lib#brief#map#MapCommand(list, command)$/
vl#lib#buffer#splitlineatcursor#SplitCurrentLineAtCursor	autoload/vl/lib/buffer/splitlineatcursor.vim	/^fun! vl#lib#buffer#splitlineatcursor#SplitCurrentLineAtCursor()$/
vl#lib#completion#contextcompletion#CompletionDict	autoload/vl/lib/completion/contextcompletion.vim	/^function! vl#lib#completion#contextcompletion#CompletionDict(dict,bcm,bcnm, completion, ...)$/
vl#lib#completion#contextcompletion#ContextCompletion	autoload/vl/lib/completion/contextcompletion.vim	/^function! vl#lib#completion#contextcompletion#ContextCompletion(completion_list,...)$/
vl#lib#completion#contextcompletion#InitContextCompletion	autoload/vl/lib/completion/contextcompletion.vim	/^function! vl#lib#completion#contextcompletion#InitContextCompletion(list)$/
vl#lib#completion#quick_match_functions#AdvancedCamelCaseMatching	autoload/vl/lib/completion/quick_match_functions.vim	/^function! vl#lib#completion#quick_match_functions#AdvancedCamelCaseMatching(expr)$/
vl#lib#completion#useCustomFunctionNonInteracting#CompleteMonths	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^fun! vl#lib#completion#useCustomFunctionNonInteracting#CompleteMonths(findstart, base)$/
vl#lib#completion#useCustomFunctionNonInteracting#CompleteMonthsSlow	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^fun! vl#lib#completion#useCustomFunctionNonInteracting#CompleteMonthsSlow(findstart, base)$/
vl#lib#completion#useCustomFunctionNonInteracting#CountSpaces	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^function! vl#lib#completion#useCustomFunctionNonInteracting#CountSpaces(type, ...)$/
vl#lib#completion#useCustomFunctionNonInteracting#GetInsertModeMappingText	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^function! vl#lib#completion#useCustomFunctionNonInteracting#GetInsertModeMappingText(vim_func_name,func,characters_to_execute_in_insert_mode)$/
vl#lib#completion#useCustomFunctionNonInteracting#NormalModeMapping	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^function! vl#lib#completion#useCustomFunctionNonInteracting#NormalModeMapping(vim_func_name,func,characters_to_execute_in_normal_mode)$/
vl#lib#completion#useCustomFunctionNonInteracting#ReadMovement	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^function! vl#lib#completion#useCustomFunctionNonInteracting#ReadMovement()$/
vl#lib#completion#useCustomFunctionNonInteracting#RestoreUserFunction	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^function! vl#lib#completion#useCustomFunctionNonInteracting#RestoreUserFunction(vim_func_name)$/
vl#lib#completion#useCustomFunctionNonInteracting#StoreUserFunction	autoload/vl/lib/completion/useCustomFunctionNonInteracting.vim	/^function! vl#lib#completion#useCustomFunctionNonInteracting#StoreUserFunction(vim_func_name,func_to_call)$/
vl#lib#conversion#string#EscapCmd	autoload/vl/lib/conversion/string.vim	/^function! vl#lib#conversion#string#EscapCmd(string)$/
vl#lib#conversion#string#QuoteBackslashSpecial	autoload/vl/lib/conversion/string.vim	/^function! vl#lib#conversion#string#QuoteBackslashSpecial(str)$/
vl#lib#conversion#string#ToDoubleQuotedString	autoload/vl/lib/conversion/string.vim	/^function! vl#lib#conversion#string#ToDoubleQuotedString(str)$/
vl#lib#files#filefunctions#AddTrailingDelimiter	autoload/vl/lib/files/filefunctions.vim	/^function! vl#lib#files#filefunctions#AddTrailingDelimiter(path)$/
vl#lib#files#filefunctions#EnsureDirectoryExists	autoload/vl/lib/files/filefunctions.vim	/^fun! vl#lib#files#filefunctions#EnsureDirectoryExists(dir)$/
vl#lib#files#filefunctions#FileDir	autoload/vl/lib/files/filefunctions.vim	/^fun! vl#lib#files#filefunctions#FileDir(file)$/
vl#lib#files#filefunctions#FileHashValue	autoload/vl/lib/files/filefunctions.vim	/^fun! vl#lib#files#filefunctions#FileHashValue(file)$/
vl#lib#files#filefunctions#FileName	autoload/vl/lib/files/filefunctions.vim	/^fun! vl#lib#files#filefunctions#FileName(file)$/
vl#lib#files#filefunctions#PathToWine	autoload/vl/lib/files/filefunctions.vim	/^function! vl#lib#files#filefunctions#PathToWine(path)$/
vl#lib#files#filefunctions#ReadFile	autoload/vl/lib/files/filefunctions.vim	/^function! vl#lib#files#filefunctions#ReadFile(filename, default)$/
vl#lib#files#filefunctions#RelativeFileComponent	autoload/vl/lib/files/filefunctions.vim	/^fun! vl#lib#files#filefunctions#RelativeFileComponent(dir, file)$/
vl#lib#files#filefunctions#RemoveDirectoryRecursively	autoload/vl/lib/files/filefunctions.vim	/^function! vl#lib#files#filefunctions#RemoveDirectoryRecursively(directory)$/
vl#lib#files#filefunctions#WalkUp	autoload/vl/lib/files/filefunctions.vim	/^function! vl#lib#files#filefunctions#WalkUp(path)$/
vl#lib#files#filefunctions#WalkUpAndFind	autoload/vl/lib/files/filefunctions.vim	/^function! vl#lib#files#filefunctions#WalkUpAndFind(path,f_as_text,...)$/
vl#lib#files#filefunctions#WriteFile	autoload/vl/lib/files/filefunctions.vim	/^function! vl#lib#files#filefunctions#WriteFile(list, filename)$/
vl#lib#files#scan_and_cache_file#ClearScanAndCacheFileCache	autoload/vl/lib/files/scan_and_cache_file.vim	/^function! vl#lib#files#scan_and_cache_file#ClearScanAndCacheFileCache()$/
vl#lib#files#scan_and_cache_file#ScanFileContent	autoload/vl/lib/files/scan_and_cache_file.vim	/^function! vl#lib#files#scan_and_cache_file#ScanFileContent(file_lines)$/
vl#lib#files#scan_and_cache_file#ScanIfNewer	autoload/vl/lib/files/scan_and_cache_file.vim	/^function! vl#lib#files#scan_and_cache_file#ScanIfNewer(file, scan_func,...)$/
vl#lib#listdict#dict#EmptyDict	autoload/vl/lib/listdict/dict.vim	/^function! vl#lib#listdict#dict#EmptyDict(dict)$/
vl#lib#listdict#dict#HasKey	autoload/vl/lib/listdict/dict.vim	/^function! vl#lib#listdict#dict#HasKey(dict, key)$/
vl#lib#listdict#dict#KeyValue	autoload/vl/lib/listdict/dict.vim	/^function! vl#lib#listdict#dict#KeyValue(dict, key, default)$/
vl#lib#listdict#list#AddUnique	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#AddUnique(list, value)$/
vl#lib#listdict#list#AlignToSameIndent	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#AlignToSameIndent(a)$/
vl#lib#listdict#list#JoinLists	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#JoinLists(list_of_lists)$/
vl#lib#listdict#list#Last	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#Last(list, value_if_empty)$/
vl#lib#listdict#list#ListContains	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#ListContains(list, value)$/
vl#lib#listdict#list#MapCopy	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#MapCopy(list, expr)$/
vl#lib#listdict#list#MaybeIndex	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#MaybeIndex(list, index, default)$/
vl#lib#listdict#list#Transpose	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#Transpose(a)$/
vl#lib#listdict#list#TrimListCount	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#TrimListCount(list, count)$/
vl#lib#listdict#list#Unique	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#Unique(list)$/
vl#lib#listdict#list#Zip	autoload/vl/lib/listdict/list.vim	/^function! vl#lib#listdict#list#Zip(...)$/
vl#lib#regex#regex#AllMatches	autoload/vl/lib/regex/regex.vim	/^function! vl#lib#regex#regex#AllMatches(str, regex)$/
vl#lib#regex#regex#ManyQuotedStrings	autoload/vl/lib/regex/regex.vim	/^function! vl#lib#regex#regex#ManyQuotedStrings(notOuterSet, includeLeadingOuter, includeTrailingOuter)$/
vl#lib#regex#regex#MatchLeftOpen	autoload/vl/lib/regex/regex.vim	/^function! vl#lib#regex#regex#MatchLeftOpen(open,close,inner,outer)$/
vl#lib#regex#regex#MatchLeftOpenQuotedString	autoload/vl/lib/regex/regex.vim	/^function! vl#lib#regex#regex#MatchLeftOpenQuotedString()$/
vl#lib#regex#regex#OpenCloseManyTimes	autoload/vl/lib/regex/regex.vim	/^function! vl#lib#regex#regex#OpenCloseManyTimes(open,close,inner,outer,includeLeadingOuter, includeTrailingOuter)$/
vl#lib#regex#regex#SeperatedBy	autoload/vl/lib/regex/regex.vim	/^function! vl#lib#regex#regex#SeperatedBy(regex, separator)$/
vl#lib#template#template#AddTemplate	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#AddTemplate(id, text)$/
vl#lib#template#template#AddTemplateUI	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#AddTemplateUI(...)$/
vl#lib#template#template#AddTemplatesFromDirectory	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#AddTemplatesFromDirectory(directory)$/
vl#lib#template#template#CompleteTemplate	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#CompleteTemplate(findstart, base)$/
vl#lib#template#template#CompleteTemplateId	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#CompleteTemplateId(ArgLead,L,P)$/
vl#lib#template#template#CreateFilesFromTemplates	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#CreateFilesFromTemplates(list,...)$/
vl#lib#template#template#DirectoryTemplateHandler	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#DirectoryTemplateHandler( template )$/
vl#lib#template#template#GetDirectoryTemplate	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#GetDirectoryTemplate(path, ...)$/
vl#lib#template#template#GetTemplate	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#GetTemplate( template_text, ...)$/
vl#lib#template#template#GetTemplateById	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#GetTemplateById(id, ...)$/
vl#lib#template#template#GetVars	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#GetVars()$/
vl#lib#template#template#InsertTemplate	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#InsertTemplate(id,...)$/
vl#lib#template#template#PreprocessTemplatetext	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#PreprocessTemplatetext(text, vars, ...)$/
vl#lib#template#template#TemplateEdit	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#TemplateEdit()$/
vl#lib#template#template#TemplateFromBufferWord	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#TemplateFromBufferWord()$/
vl#lib#template#template#TemplateGivenDirectlyHandler	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#TemplateGivenDirectlyHandler(template)$/
vl#lib#template#template#TemplateIdList	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#TemplateIdList()$/
vl#lib#template#template#TemplateList	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#TemplateList()$/
vl#lib#template#template#TemplateNew	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#TemplateNew()$/
vl#lib#template#template#TemplateTextById	autoload/vl/lib/template/template.vim	/^function! vl#lib#template#template#TemplateTextById(id, ...)$/
vl#lib#vimscript#scriptsettings#AddValueToListUnique	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#AddValueToListUnique(id, value)$/
vl#lib#vimscript#scriptsettings#AlterSetting	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#AlterSetting(id, default, cmd)$/
vl#lib#vimscript#scriptsettings#GetOrDefine	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#GetOrDefine(var, get_var_content)$/
vl#lib#vimscript#scriptsettings#GetOrDefineFromString	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#GetOrDefineFromString(var, get_var_content_str)$/
vl#lib#vimscript#scriptsettings#GetValueByNameOrDefault	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#GetValueByNameOrDefault(globalname, default_value)$/
vl#lib#vimscript#scriptsettings#LetUserChoseKeyFromDict	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#LetUserChoseKeyFromDict(caption, id, default, cmd_nothing_selected )$/
vl#lib#vimscript#scriptsettings#Load	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#Load(id, default)$/
vl#lib#vimscript#scriptsettings#MergeGlobBList	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#MergeGlobBList(name)$/
vl#lib#vimscript#scriptsettings#RemoveValueFromList	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#RemoveValueFromList(id, value)$/
vl#lib#vimscript#scriptsettings#RestoreSetting	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#RestoreSetting(setting_as_string)$/
vl#lib#vimscript#scriptsettings#Save	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#Save(id, value)$/
vl#lib#vimscript#scriptsettings#StoreSetting	autoload/vl/lib/vimscript/scriptsettings.vim	/^function! vl#lib#vimscript#scriptsettings#StoreSetting(setting_as_string, ...)$/
vl#settings#DotvimDir	autoload/vl/settings.vim	/^function! vl#settings#DotvimDir()$/
vl#settings#VimlibDir	autoload/vl/settings.vim	/^function! vl#settings#VimlibDir()$/
vl#ui#navigation#gfHandler#AddGFHandler	autoload/vl/ui/navigation/gfHandler.vim	/^function! vl#ui#navigation#gfHandler#AddGFHandler(handler)$/
vl#ui#navigation#gfHandler#HandleGF	autoload/vl/ui/navigation/gfHandler.vim	/^function! vl#ui#navigation#gfHandler#HandleGF()$/
vl#ui#navigation#locate_edit#GetLocateFileList	autoload/vl/ui/navigation/locate_edit.vim	/^function! vl#ui#navigation#locate_edit#GetLocateFileList(search_string,...)$/
vl#ui#navigation#locate_edit#LetUserSelectLocateFileIfThereIsAChoice	autoload/vl/ui/navigation/locate_edit.vim	/^function! vl#ui#navigation#locate_edit#LetUserSelectLocateFileIfThereIsAChoice(search_string,...)$/
vl#ui#userSelection#Inputlist	autoload/vl/ui/userSelection.vim	/^function! vl#ui#userSelection#Inputlist(list)$/
vl#ui#userSelection#LetUserSelectIfThereIsAChoice	autoload/vl/ui/userSelection.vim	/^function! vl#ui#userSelection#LetUserSelectIfThereIsAChoice(caption, list, ...)$/
vl#ui#userSelection#LetUserSelectMany	autoload/vl/ui/userSelection.vim	/^function! vl#ui#userSelection#LetUserSelectMany(caption, list, ...)$/
vl#ui#userSelection#LetUserSelectOneOf	autoload/vl/ui/userSelection.vim	/^function! vl#ui#userSelection#LetUserSelectOneOf(caption, list, ...)$/
vspec#_scope	autoload/vspec.vim	/^function! vspec#_scope()  "{{{2$/
vspec#_sid	autoload/vspec.vim	/^function! vspec#_sid()  "{{{2$/
vspec#call	autoload/vspec.vim	/^function! vspec#call(function_name, ...)  "{{{2$/
vspec#cmd_It	autoload/vspec.vim	/^function! vspec#cmd_It(message)  "{{{2$/
vspec#cmd_ResetContext	autoload/vspec.vim	/^function! vspec#cmd_ResetContext()  "{{{2$/
vspec#cmd_SaveContext	autoload/vspec.vim	/^function! vspec#cmd_SaveContext()  "{{{2$/
vspec#cmd_Should	autoload/vspec.vim	/^function! vspec#cmd_Should(exprs, values)  "{{{2$/
vspec#hint	autoload/vspec.vim	/^function! vspec#hint(info)  "{{{2$/
vspec#ref	autoload/vspec.vim	/^function! vspec#ref(variable_name)  "{{{2$/
vspec#set	autoload/vspec.vim	/^function! vspec#set(variable_name, value)  "{{{2$/
vspec#test	autoload/vspec.vim	/^function! vspec#test(spec_file)  "{{{2$/
wise	autoload/textobj/user.vim	/^function! s:wise(default)$/
with_split	autoload/ku.vim	/^function! s:with_split(direction_modifier, item)$/
without	autoload/arpeggio.vim	/^function! s:without(list, i)  "{{{2$/
wrap	plugin/surround.vim	/^function! s:wrap(string,char,type,...)$/
wrapreg	plugin/surround.vim	/^function! s:wrapreg(reg,char,...)$/
write	autoload/metarw.vim	/^function! s:write(scheme, fakepath, line1, line2, event_name)  "{{{2$/
write_clipboard	autoload/fakeclip.vim	/^function! s:write_clipboard(text)  "{{{2$/
write_clipboard_cygwin	autoload/fakeclip.vim	/^function! s:write_clipboard_cygwin(text)$/
write_clipboard_mac	autoload/fakeclip.vim	/^function! s:write_clipboard_mac(text)$/
write_clipboard_unknown	autoload/fakeclip.vim	/^function! s:write_clipboard_unknown(text)$/
write_clipboard_x	autoload/fakeclip.vim	/^function! s:write_clipboard_x(text)$/
write_pastebuffer	autoload/fakeclip.vim	/^function! s:write_pastebuffer(text)  "{{{2$/
write_pastebuffer_gnuscreen	autoload/fakeclip.vim	/^function! s:write_pastebuffer_gnuscreen(lines)$/
write_pastebuffer_tmux	autoload/fakeclip.vim	/^function! s:write_pastebuffer_tmux(lines)$/
write_pastebuffer_unknown	autoload/fakeclip.vim	/^function! s:write_pastebuffer_unknown(lines)$/
wwwsearch#_sid_prefix	autoload/wwwsearch.vim	/^function! wwwsearch#_sid_prefix()  "{{{2$/
wwwsearch#add	autoload/wwwsearch.vim	/^function! wwwsearch#add(u_search_engine_name, uri_template)  "{{{2$/
wwwsearch#cmd_Wwwsearch	autoload/wwwsearch.vim	/^function! wwwsearch#cmd_Wwwsearch(args)  "{{{2$/
wwwsearch#cmd_Wwwsearch_complete	autoload/wwwsearch.vim	/^function! wwwsearch#cmd_Wwwsearch_complete(arglead, cmdline, cursorpos)  "{{{2$/
wwwsearch#operator_default	autoload/wwwsearch.vim	/^function! wwwsearch#operator_default(motion_wise)  "{{{2$/
wwwsearch#remove	autoload/wwwsearch.vim	/^function! wwwsearch#remove(u_search_engine_name)  "{{{2$/
wwwsearch#search	autoload/wwwsearch.vim	/^function! wwwsearch#search(keyword, ...)  "{{{2$/
yS	plugin/surround.vim	/^    nmap          yS   <Plug>YSurround$/
ySS	plugin/surround.vim	/^    nmap          ySS  <Plug>YSsurround$/
ySs	plugin/surround.vim	/^    nmap          ySs  <Plug>YSsurround$/
ys	plugin/surround.vim	/^    nmap          ys   <Plug>Ysurround$/
yss	plugin/surround.vim	/^    nmap          yss  <Plug>Yssurround$/
{<CR>	ftplugin/perl.vim	/^inoremap    <buffer>  {<CR>  {<CR>}<Esc>O$/
{<CR>	ftplugin/perl.vim	/^vnoremap    <buffer>  {<CR> s{<CR>}<Esc>kp=iB$/
